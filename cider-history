;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("a" "((comp {:a 1 :b 2} (fn [x] :a)) 2)" "((comp {:a 1 :b 2} (fn [x] :a)) 1)" "(comp {:a 1 :b 2} (fn [x] :a))" "asd" "a" "(not-empty nil)" "(pos? 1)" "(pos? 0)" "(not-empty [1 2 3])" "(map (fn [a] [a]) (range 5) (range 5))" "(map (fn [a c] [a c]) (range 5) (range 5))" "(map (fn [a c] [a c]) (range 5) (range5))" "v" "(filter (fn [_] [nil]) [1 2 3])" "v" "(doall s2)" "(count s2)" "(def s2 {:s s1})" "(def s1 (map (fn [x] (prn x) x) (range 50)))" "v" "(def v (atom nil))" "not-empty?" "(empty? [nil nil])" "(empty? (for [x (range 50)] (do (prn x) x)))" "(first (empty? (for [x (range 50)] (do (prn x) x))))" "(first (seq (for [x (range 50)] (do (prn x) x))))" "(empty? 123)" "(empty? [])" "(filter identity nil)" "(first (seq (for [x (range 5)] (do (prn x) x))))" "(for [x (range 5)] (do (prn x) x))" "(for [x (range 5)] (prn x) x)" "(first (for [x (range 5)] (prn x) x))" "(first (seq (for [x (range 5)] (prn x) x)))" "(detect.explainer.internal-anomaly/saved-anomaly-key detect.explainer.mock-data/detected-seg-job \"uid\" \"pid\" \"ts\")" "(-> detect.explainer.mock-data/detected-seg-job keys)" "detect.explainer.mock-data/detected-seg-job" "(take 1 [1 2 3])" "(apply max-key :idx [{:idx 1} {:idx 2 :c 2}])" "(apply max-key :idx [{:idx 1} {:idx 2 :c}])" "(apply max-key [{:idx 1} {:idx 2 :c}])" "max" "max-key" "(with-redefs [gcp.bucket.cloud-datastore/service gcp.bucket.cloud-datastore/emulator]
    (let [lock1 (concurrent.semaphore/global-lock {:namespace \"animal\"
                                        :lock-name \"cats\"})
          lock2 2]
      ))" "(with-redefs [gcp.bucket.cloud-datastore/service gcp.bucket.cloud-datastore/emulator]
    (let [lock1 (semaphore/global-lock {:namespace \"animal\"
                                        :lock-name \"cats\"})
          lock2 2]
      ))" "(with-redefs [cloud-datastore/service cloud-datastore/emulator]
    (let [lock1 (semaphore/global-lock {:namespace \"animal\"
                                        :lock-name \"cats\"})
          lock2 2]
      ))" "(with-redefs [gcp.bucket.cloud-datastore/service gcp.bucket.cloud-datastore/emulator] (concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"b\"}))" "l" "(def l [(concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"b\"})
              (concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"c\"})])" "(.unlock l)" "(.lock l)" "(lock l)" "(def l (concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"b\"}))" "(lock (concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"b\"}))" "(concurrent.semaphore/global-lock {:namespace \"a\" :lock-name \"b\"})" "(max [1 2] 3)" "(max 1 2)" "()" "a" "detect.explainer.model.subanomaly-test/mini-trimmed-subanomaly-sample" "(repeatedly 10 rand)" "(rand 10)" "(rand 5)" "(repeat 5 (rand))" "(-> res3 first :detected-jobs first :anomalies)" "(-> res3 first :detected-jobs first keys)" "(-> res3 first :detected-jobs first type)" "(-> res3 first :detected-jobs count)" "(-> res3 first :internal-anomalies)" "(-> res3 first keys)" "(-> res3 count)" "(-> @v (nth 4))" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v (nth 3))" "(-> @v (nth 4))" "(-> @v (nth 2))" "(-> @v (nth 4))" "(-> @v count)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v)" "(-> @v count)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v count)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v count)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v count)" "(-> @v (nth 0))" "(-> @v (nth 2))" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v (nth 0))" "(-> @v (nth 2))" "(apply max (map (fn [[property-value segment-anomaly]] (-> segment-anomaly :queried-job :timeseries count)) sss))" "(max (map (fn [[property-value segment-anomaly]] (-> segment-anomaly :queried-job :timeseries count)) sss))" "(map (fn [[property-value segment-anomaly]] (-> segment-anomaly :queried-job :timeseries count)) sss)" "(count nil)" "(map (fn [[property-value segment-anomaly]] (-> segment-anomaly :queried-job :timeseries count)) sss)" "(map (fn [[property-value segment-anomaly]] (keys segment-anomaly)) sss)" "(map (fn [[property-value segment-anomaly]] (count (:timeseries segment-anomaly))) sss)" "(map (fn [property-value segment-anomaly] segment-anomaly) sss)" "(map (fn [property-value segment-anomaly] (count (:timeseries segment-anomaly))) sss)" "(-> sss first)" "(-> sss type)" "(some #(not (nil? %)) [nil 1 nil 3])" "or" "(some not-nil? 123)" "(max 1 2 3 nil)" "(max 1 2 3)" "(def sss (-> @v (nth 3)))" "(-> @v (nth 3) (nth 10) second keys)" "(-> @v (nth 3) (nth 10))" "(-> @v (nth 2) (nth 10))" "(-> @v (nth 2) (nth 10) type)" "(-> @w :anomalies)" "(-> @w :queried-job :timeseries count)" "(-> @w :queried-job :timeseries)" "(-> @w keys)" "(-> @w type)" "(-> w type)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v (nth 1) first keys)" "(-> @v (nth 1) count)" "(-> @v (nth 1) type)" "(-> @v count)" "(-> @v (nth 1) keys)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v (nth 2) (nth 10) second :anomalies)" "(-> @v (nth 2) (nth 10) second :queried-job :timeseries count)" "(-> @v (nth 2) (nth 10) second :queried-job :timeseries)" "(-> @v (nth 2) (nth 10) second :queried-job)" "(-> @v (nth 2) (nth 10) second keys)" "(-> @v (nth 2) (nth 10) second type)" "(-> @v (nth 2) (nth 10) second)" "(-> @v (nth 2) (nth 10))" "(-> @v (nth 2) (nth 2))" "(-> @v (nth 2) first)" "(-> @v (nth 2) type)" "(-> @v (nth 2) first val)" "(-> @v)" "(-> @v count)" "(-> @v (nth 2))" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v (nth 2))" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(map (fn [x] (binding [tt 3] (tfn x))) (range 3))" "(map (fn [x] (tfn x)) (range 3))" "(binding [tt 3] (map (fn [x] (tfn x)) (range 3)))" "(map (fn [x] (tfn x)) (range 3))" "(defn tfn [x] tt)" "(map (fn [x] tt) (range 3))" "(def ^:dynamic tt 1)" "(-> @v (nth 2))" "(-> @v (nth 2) type)" "(-> @v next next type)" "({:1 \"a\" :2 \"b\"} :1)" "(-> @v second)" "(-> @v count)" "(-> @v first)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "(-> @v first)" "(count @v)" "(count v)" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "v" "(reset! v 1)" "(def v (atom nil))" "(def v (atom))" "(-> res3 first :detected-jobs count)" "(def res3 (sequence pl3 res2))" "asd" "(-> res3 first :detected-jobs count)" "(-> res3 first keys)" "(def res3 (sequence pl3 res2))" "(-> res3 first keys)" "(def res3 (sequence pl3 res2))" "(-> res3 first keys)" "(def res3 (sequence pl3 res2))" "(-> res3 first keys)" "(-> res3 count)" "(-> res3 type)" "(def res3 (sequence pl3 res2))" "asd" "(def res3 (sequence pl2 res2))" "(-> res2 first :segmented-queried-jobs first val first val first :timeseries count)" "(-> res2 first :segmented-queried-jobs first val first val first :timeseries)" "(-> res2 first :segmented-queried-jobs first val first val first :query)" "(-> res2 first :segmented-queried-jobs first val first val first keys)" "(-> res2 first :segmented-queried-jobs first val first val first type)" "(-> res2 first :segmented-queried-jobs first val first val count)" "(-> res2 first :segmented-queried-jobs first val first val type)" "(-> res2 first :segmented-queried-jobs first val keys)" "(-> res2 first :segmented-queried-jobs first val type)" "(-> res2 first :segmented-queried-jobs keys)" "(-> res2 count)" "(-> res2 first keys)" "(-> res2 first type)" "(-> res2 type)" "qwe" "asd" "c" "a" "res2" "(def res2 (sequence pl2 res))" "(def res (sequence pl1 ids))" "(def res2 (sequence pl2 res))" "res" "(def res (sequence pl1 ids))" "(def res2 (sequence pl2 res))" "(in-ns 'detect.explainer.env)" "(clojure.walk/stringify-keys {\"asd\" 1 :qwe 2})" "keywordize-map" "(clojure.walk/keywordize-keys {\"asd\" {\"sdf\" \"asd\"}})" "(-> {\"qwe1\" 1} (#(or (get % :qwe) (get % \"qwe\"))))" "(-> {\"qwe\" 1} (#(or (get % :qwe) (get % \"qwe\"))))" "(-> {\"qwe\" 1} (#(get % :qwe (get % \"qwe\"))))" "(-> {\"qwe\" 1} #(get % :qwe (get % \"qwe\")))" "(:qwe {\"qwe\" 1})" "(def res2 (sequence pl2 res))" "(-> res2 first :group-by-properties)" "(-> res2 first keys)" "(def res2 (sequence pl2 res))" "(-> res first keys)" "(def res2 (sequence pl2 res))" "(-> res first :explain-model-types)" "(-> res first keys)" "a" "(def res (sequence pl1 ids))" "(-> res first keys)" "ids" "(def res (sequence pl1 ids))" "(-> res second keys)" "(def res (sequence pl1 ids))" "(-> res second keys)" "(-> res first keys)" "(count res)" "(def res (sequence pl1 ids))" "ids" "(def res (sequence pl1 ids))" "(-> res first keys)" "(def res (sequence pl1 ids))" "(-> res first keys)" "(def res (sequence pl1 ids))" "(-> res first keys)" "(-> res count)" "(def res (sequence pl1 ids))" "res" "(def res (sequence pl1 ids))" "res" "(def res (sequence pl1 ids))" "(in-ns 'detect.explainer.env)" "(* 24 7 4)" "or" "-" "+" "and" "or" "(t 0.1 :b :a :c :d)" "(defn t [a & {:keys [b c] :or {b 0.1 c 0.2}}] (prn a b c))" "(incanter.core/dataset [{:n 1000 :property-type :string :property-value \"prop-val1\" :k 100 :exp-n 110
                                 :property-name \"prop1\" :b 1000 :exp-k 909.090909090909 :p 0.9090909090909091}
                                {:n 1000 :property-type :string :property-value \"prop-val2\" :k 900 :exp-n 110
                                 :property-name \"prop1\" :b 1000 :exp-k 90.9090909090909 :p 0.09090909090909091}])" "(incanter.core/->Dataset [{:n 1000 :property-type :string :property-value \"prop-val1\" :k 100 :exp-n 110
                                 :property-name \"prop1\" :b 1000 :exp-k 909.090909090909 :p 0.9090909090909091}
                                {:n 1000 :property-type :string :property-value \"prop-val2\" :k 900 :exp-n 110
                                 :property-name \"prop1\" :b 1000 :exp-k 90.9090909090909 :p 0.09090909090909091}])" "(type (name :qwe))" "(type (name \"qwe\"))" "(name \"qwe\")" "(for [x [1 2 3]
            :let [_ (prn x)]
            y [4 5 6]] [x y])" "(update {:a 1 :b 2} :a (fn [x] nil))" "(extend-type :x
        Easy
        (easy [this x] (prn x)))" "(defprotocol Easy (easy [this x]))" "(type :qwe)" "(type nil)" "(apply assoc-when {} [:a 1 :b 2])" "(def stats-eager (graph/compile stats-graph))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
        {:kk {:a (fnk [xs] xs) :b (fnk [n] n) :c (fnk [m] m)}
         :n  (fnk [xs]   (count xs))
         :m  (fnk [xs n] (/ (sum identity xs) n))
         :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
         :v  (fnk [m m2] (- m2 (* m m)))})" "(def stats-eager (graph/compile stats-graph))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
        {:kk [(fnk [xs] xs) (fnk [n] n) (fnk [m] m)]
         :n  (fnk [xs]   (count xs))
         :m  (fnk [xs n] (/ (sum identity xs) n))
   :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
   :v  (fnk [m m2] (- m2 (* m m)))})" "(def stats-eager (graph/compile stats-graph))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
        {:kk [(fnk [xs] xs) (fnk [n] n) (fnk [m] m)]
   :n  (fnk [xs]   (count xs))
   :m  (fnk [xs n] (/ (sum identity xs) n))
   :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
   :v  (fnk [m m2] (- m2 (* m m)))})" "(def stats-eager (graph/compile stats-graph))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
  {:kk [1 2 3 4]
   :n  (fnk [xs]   (count xs))
   :m  (fnk [xs n] (/ (sum identity xs) n))
   :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
   :v  (fnk [m m2] (- m2 (* m m)))})" "(stats-eager {:xs [1 2 3]})" "(def stats-eager (graph/compile stats-graph))" "(require '[plumbing.graph :as graph])" "(require [plumbing.graph :as graph])" "(def stats-eager (graph/compile stats-graph))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
  {:n  (fnk [xs]   (count xs))
   :m  (fnk [xs n] (/ (sum identity xs) n))
   :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
   :v  (fnk [m m2] (- m2 (* m m)))})" "map?" "(all? [true false])" "(apply and [true false])
" "Protocol" "(assoc-in {} [:a 0] 1)" "(assoc-in {} [:a :b] 1)" "(tfn {:a 1 :b 2 :c 3})" "(defnk tfn [a b c {d nil} {e 1} :as x] (prn \"d\" d \"e\" e) (prn x))" "(tfn {:a 1 :b 2 :c 3})" "(tfn {})" "(defnk tfn [a b c {d nil} {e 1} :as x] (prn x))" "(defk tfn [a b c {d nil} {e 1} :as x] (prn x))" "(use 'plumbing.core)
" "a" "(last (assoc (vec (repeat 120 10))
                  119
                  1000))" "(last (assoc (vec (repeat 120 10))
                  119
                  1000) 119)" "(nth (assoc (vec (repeat 120 10))
                  119
                  1000) 119)" "(assoc (vec (repeat 120 10))
                                                                              119
                                                                              1000)" "(repeat 1 10)" "(def r (mp-client.public/query-insights {:public-api-client *pac*
                                                               :insights-query prm2
                                                               :keywordize-keys? true}))" "(in-ns 'detect.explainer.env)" "(org.apache.commons.math3.special.Beta/regularizedBeta (- 1 1.0) (- 0 0) (inc 0))" "(Beta/regularizedBeta (- 1 1.0) (- 0 0) (inc 0))" "(Beta/regularizedBeta (- 1 p) (- n k) (inc k))" "(<= 0.0 Double/NaN)" "(<= 0 Double/NaN)" "Double/NaN" "Double/POSITIVE_INFINITY" "Double" "(.-POSITIVE_INFINITY Double)" "(.POSITIVE_INFINITY Double)" "Double.POSITIVE_INFINITY" "Double" "(/ 1 0)" "Infinity" "(s/conform ::probability (/ 1 3))" "(s/conform ::probability 1.0)" "(s/def ::probability (s/double-in :min 0.0 :max 1.0))" "(require '[clojure.spec.alpha :as s])" "(s/def ::probability (s/double-in :min 0.0 :max 1.0))" "(<= 0.0 0)" "'asd" "`asd" "(s/conform ::name-or-id 1.1)" "(s/conform ::name-or-id \"abc\")" "(s/def ::name-or-id (s/or :name string?
                          :id   int?))" "(s/conform even? \"1000\")" "(s/conform even? 1001)" "(s/conform even? 1000)" "(require '[clojure.spec.alpha :as s])" "(.read (safe-get @v :body))" "(read (safe-get @v :body))" "(read (clojure.java.io/reader (safe-get @v :body)))" "(prn (clojure.java.io/reader (safe-get @v :body)))" "(clojure.java.io/reader (safe-get @v :body))" "(reader (safe-get @v :body))" "(read (safe-get @v :body))" "(safe-get @v :body)" "v" "(def r (mp-client.public/query-insights {:public-api-client *pac*
                                                               :insights-query prm2
                                                               :keywordize-keys? true}))" "(-> r :series first val keys count)" "(def r (mp-client.public/query-insights {:public-api-client *pac*
                                                               :insights-query prm2
                                                               :keywordize-keys? true}))" "(def r (mp-client.public/query-insights {:public-api-client *pac*
                                                               :insights-query prm
                                                               :keywordize-keys? true}))" "(def prm2 (-> prm
                                    (dissoc :limit)
                                    (assoc :global-limit 100)))" "(-> r :series first val keys count)" "(-> r :series first val keys)" "(-> r keys)" "(-> r type)" "(def prm2 (-> prm
                                    (dissoc :limit)
                                    (assoc :global-limit 100)))" "prm" "param" "(def r (mp-client.public/query-insights {:public-api-client *pac*
                                                               :insights-query prm
                                                               :keywordize-keys? true}))" "(def prm {:limit 100,
 :time-range
 {:from-date \"2018-04-29 19:00:00\",
  :to-date \"2018-05-29 19:00:00\",
  :time-range-type :absolute,
  :unit :hour},
 :unit :hour,
 :display-options {:chart-type :line},
 :type :insights,
 :plan-type :web,
 :property-filters [],
 :model-type :explain,
 :property-filter-operator :and,
 :group-by-properties
 [{:name \"accountId\", :source :properties, :type :string}],
 :saved-report-info
 {:saved-report-id 3021255, :saved-report-name \"Get personalization\"},
 :project-id 743359,
 :show-clauses
 [{:event \"Get personalization\",
   :action :total,
   :resource-type :events}]})" "(def res (sequence pl1 ids))" "(def r (mp-client.impl.public/safely-slurp-url {:public-api-client *pac* :url \"http://api-server-internal.query-api:8080/api/2.0/insights?expire=1528138732&params=%7B%22sections%22%3A%7B%22time%22%3A%5B%7B%22unit%22%3A%22hour%22%2C%22value%22%3A%5B%222018-04-29+19%3A00%3A00%22%2C%222018-05-29+19%3A00%3A00%22%5D%7D%5D%2C%22group%22%3A%5B%7B%22value%22%3A%22accountId%22%2C%22resourceType%22%3A%22events%22%2C%22propertyType%22%3A%22string%22%7D%5D%2C%22show%22%3A%5B%7B%22resourceType%22%3A%22events%22%2C%22value%22%3A%7B%22name%22%3A%22Get+personalization%22%7D%2C%22math%22%3A%22unique%22%7D%5D%7D%2C%22displayOptions%22%3A%7B%22chartType%22%3A%22line%22%7D%2C%22globalLimit%22%3A100%7D\"}))" "(-> (:series r) first val keys count)" "(-> (:series r) first val keys)" "(-> (:series r) keys)" "(-> (:series r) type)" "(keys r)" "(type r)" "r" "(def r (mp-client.impl.public/safely-slurp-url {:public-api-client *pac* :url \"http://api-server-internal.query-api:8080/api/2.0/insights?expire=1528138732&params=%7B%22sections%22%3A%7B%22time%22%3A%5B%7B%22unit%22%3A%22hour%22%2C%22value%22%3A%5B%222018-04-29+19%3A00%3A00%22%2C%222018-05-29+19%3A00%3A00%22%5D%7D%5D%2C%22group%22%3A%5B%7B%22value%22%3A%22accountId%22%2C%22resourceType%22%3A%22events%22%2C%22propertyType%22%3A%22string%22%7D%5D%2C%22show%22%3A%5B%7B%22resourceType%22%3A%22events%22%2C%22value%22%3A%7B%22name%22%3A%22Get+personalization%22%7D%2C%22math%22%3A%22unique%22%7D%5D%7D%2C%22displayOptions%22%3A%7B%22chartType%22%3A%22line%22%7D%7D&project_id=743359\"}))" "(def res (sequence pl1 ids))" "(def param {:sections
 {:time
  [{:unit :hour,
    :value [\"2018-04-29 19:00:00\" \"2018-05-29 19:00:00\"]}],
  :group
  [{:value \"accountId\", :resourceType :events, :propertyType :string}],
  :show
  [{:resourceType :events,
    :value {:name \"Get personalization\"},
    :math :total}]},
 :displayOptions {:chartType :line}})" "(def param {:sections
 {:time
  [{:unit :hour,
    :value [\"2018-04-29 19:00:00\" \"2018-05-29 19:00:00\"]}],
  :group
  ({:value \"accountId\", :resourceType :events, :propertyType :string}),
  :show
  ({:resourceType :events,
    :value {:name \"Get personalization\"},
    :math :total})},
 :displayOptions {:chartType :line}})" "(-> res first :segmented-queried-jobs first val keys)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs first val first)" "(-> res first :detected-jobs first :anomalies first keys)" "(-> res first :detected-jobs first :anomalies)" "(-> res first :detected-jobs first :anomalies first :model-name->explains-info)" "(def res (sequence pl1 ids))" "(in-ns 'detect.explainer.env)" "(gcp.pubsub.core/pull-and-ack (:to-inform-subscriber svc-graph) true)" "(gcp.pubsub.core/pull-and-ack (:to-inform-subscriber svc-graph))" "(:to-inform-subscriber svc-graph)" "('+ 1 2 )" "(+ 1 2 )" "((symbol \"+\") 1 2)" "(symbol \"+\")" "'+" "(eval (symbol \"+\"))" "(type (first '(+ 1 2)))" "(first '(+ 1 2))" "'(+ 1 2)" "(symbol \"+\")" "test" "(symbol \"test\")" "(find-keyword \"aa\")" "(find-keyword \"ee\")" "{:ee 1}" "(find-keyword \"qw\")" "(find-keyword \"qwe\")" ":qwe" "(find-keyword \"qwe\")" "(find-keyword :a)" "(-> res first :detected-jobs first :anomalies first :model-name->explains-info)" "(-> res first :detected-jobs first :anomalies first :explains)" "(-> res first :detected-jobs first :anomalies first keys)" "(-> res first :detected-jobs first :anomalies count)" "(-> res first :detected-jobs first :anomalies keys)" "(-> res first :detected-jobs first keys)" "(def res (sequence pl1 ids))" "(-> res first :internal-anomalies count)" "(-> res first :internal-anomalies)" "(-> res first keys)" "(def res (sequence pl1 ids))" "(-> res first :detected-jobs first :queried-job :query :job-plan :plan :unit)" "(-> res first :detected-jobs first :queried-job :query)" "(-> res first :detected-jobs first :queried-job keys)" "(-> res first :detected-jobs first :queried-job :keys)" "(-> res first :detected-jobs first :queried-job )" "(-> res first :detected-jobs first :query)" "(-> res first :detected-jobs first keys)" "(-> res first :detected-jobs count)" "(-> res first keys)" "(-> res first :segmented-queried-jobs first val first)" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(in-ns 'detect.explainer.env)" "(->> @v :timeseries count)" "(->> @v :timeseries)" "(->> @v keys)" "(->> @v type)" "(def res (sequence pl1 ids))" "(for [x [1 2] y nil] {:x x :y y})" "(->> @v :series vals singleton)" "(->> @v :series vals)" "(->> @v :series first val (map (fn-> val count)))" "(-> @v :series first val first val count)" "(-> @v :series first val first val)" "(-> @v :series first val keys count)" "(-> @v :series first val keys)" "(-> @v :series first val type)" "(-> @v :series keys first name)" "(-> @v :series keys first)" "(-> @v :series keys)" "(-> @v :series)" "(-> @v :date_range)" "(-> @v :headers)" "(-> @v keys)" "(-> @v type)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "v" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(in-ns 'detect.explainer.env)" "asd" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "res" "v" "(def res (sequence pl1 ids))" "v" "(def res (sequence pl1 ids))" "v" "(reset! v 1)" "(swap! v 1)" "(set! v 1)" "v" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "res" "(def res (sequence pl1 ids))" "res" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(-> res first :segmented-queried-jobs keys)" "(def res (sequence pl1 ids))" "(in-ns 'detect.explainer.env)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs type)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs type)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs type)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs type)" "(-> res first :segmented-queried-jobs first val type)" "(-> res first :segmented-queried-jobs first val keys)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val keys)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs first val keys)" "(def res (sequence pl1 ids))" "res" "(def res (sequence pl1 ids))" "(shuffle [1 2 3])" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first :timeseries (->> (take-last 100)))" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first :timeseries (->> (apply +)))" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first :timeseries)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first)" "(in-ns 'detect.explainer.env)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") second)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") first)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") count)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\") keys)" "(-> res first :segmented-queried-jobs first val (safe-get \"eu-west-1\"))" "(-> res first :segmented-queried-jobs first val (safe-get \"null\"))" "(-> res first :segmented-queried-jobs first val \"null\")" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs first val type)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs first type)" "(-> res first :segmented-queried-jobs count)" "(-> res first :segmented-queried-jobs first val)" "(-> res first :segmented-queried-jobs first val first second)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val first second)" "(-> res first :segmented-queried-jobs first val first count)" "(-> res first :segmented-queried-jobs first val first)" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs first keys)" "(-> res first :segmented-queried-jobs first val )" "(-> res first :segmented-queried-jobs first val first val first :timeseries count)" "(def res (sequence pl1 ids))" "(-> res first :segmented-queried-jobs first val first val first :timeseries count)" "(-> res first :segmented-queried-jobs first val first val first :timeseries)" "(-> res first :segmented-queried-jobs first val first val :timeseries)" "(-> res first :segmented-queried-jobs first val first val)" "(-> res first :segmented-queried-jobs first val keys first val)" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs first val type)" "(-> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs type)" "(-> res first keys)" "(def res (sequence pl1 ids))" "((fn [project-id] (safe-get (projects/project-details *ac* project-id) :timezone)) 3)" "((fn [project-id] (safe-get (projects/project-details *ac* project-id) :timezone)) 1332792)" "(def res (sequence pl1 ids))" "(partial properties/load-event-properties-map *pb*)" "(partial properties/load-event-properties-map properties-bucket)" "(-> (sequence pl1 ids) first)" "(-> (sequence pl1 ids) first keys)" "(sequence pl1 ids)" "(-> x :grouped-jobs)" "(keys (-> x :grouped-jobs))" "(keys x)" "x" "(def x (bucket/get *adb* \"bbd37cb9-318b-494b-948a-1820151fc564\"))" "(in-ns 'detect.explainer.env)" "(use 'plumbing.core)
(require '[gcp.bucket.cloud-storage :as cloud-storage]
           '[gcp.bucket.cloud-datastore :as cloud-datastore]
           '[detect.domain.data :as domain-data]
           '[gcp.bucket.core :as bucket]
           '[clj-time.coerce :as clj-time-coerce]
           '[clj-time.core :as clj-time]
           '[gcp.serialize.json :as serialize-json]
           '[detect.explainer.properties :as properties]
           '[core.cache :as cache]
           '[core.time :as time]
           '[gcp.bucket.memory :as bucket-memory]
           '[mp-client.appdb.projects :as projects])" "(use 'plumbing.core)
(require '[gcp.bucket.cloud-storage :as cloud-storage]
           '[gcp.bucket.cloud-datastore :as cloud-datastore]
           '[detect.domain.data :as data]
           '[gcp.bucket.core :as bucket]
           '[clj-time.coerce :as clj-time-coerce]
           '[clj-time.core :as clj-time]
           '[gcp.serialize.json :as serialize-json]
           '[detect.explainer.properties :as properties]
           '[core.cache :as cache]
           '[core.time :as time]
           '[gcp.bucket.memory :as bucket-memory]
           '[mp-client.appdb.projects :as projects])" "(use 'plumbing.core)
(require '[gcp.bucket.cloud-storage :as cloud-storage]
           '[gcp.bucket.cloud-datastore :as cloud-datastore]
           '[detect.domain.data :as detect-domain-data]
           '[smart-hub.api.data :as data]
           '[gcp.bucket.core :as bucket]
           '[clj-time.coerce :as clj-time-coerce]
           '[clj-time.core :as clj-time]
           '[detect.explainer.manual :as manual]
           '[detect.domain.data :as detect-domain-data]
           '[gcp.serialize.json :as serialize-json]
           '[detect.explainer.properties :as properties]
           '[core.cache :as cache]
           '[core.time :as time]
           '[gcp.bucket.memory :as bucket-memory]
           '[mp-client.appdb.projects :as projects])" "asd" "detect.explainer.mock-data/detected-ret-job" "asd" "detect.explainer.mock-data/detected-insights-job-day-1" "detect.explainer.mock-data/detected-seg-job-hour" "(dissoc m nil)" "(sort-by key m)" "(def m {0 \"x\" nil 1 2 :a})" "(sort-by key m)" "(apply min-key key m)" "(def m {nil 1 2 :a})" "(apply min-key key m)" "(min-key key m)" "(def m {0 1 2 :a})" "m" "(def m {nil 1 2 :a})" "(max-key :idx nil)" "(max-key :idx)" "(apply max-key :idx)" "(apply min-key key {nil 1 2 :a})" "(min-key key {nil 1 2 :a})" "(apply max-key :idx als)" "(def als [{:idx 1 :b 2} {:idx 2 :a 1}])" "(def als [{:idx 1} {idx 2 :a 1}])" "#:person{:first \"Han\"
         :last \"Solo\"
         :ship #:ship{:name \"Millenium Falcon\"
                      :model \"YT-1300f light freighter\"}}" "x" "(def x #:b{::a 1})" "#:b{::a 1}" "#::b{:a 1}" "#:b{:a 1}" "#:a{:a 1}" "#:a" "explain-model-type->needed-data-keys" "(def explain-model-type->all-data-keys
  {:property-segments [:segmented-queried-jobs :timezone :group-by-properties]
   :anomalous-users [:user-counts]})

(def explain-model-type->needed-data-keys
  (map-vals (fn [data-keys] (keep (fn [data-key] (#{:segmented-queried-jobs :user-counts} data-key)) data-keys))
            explain-model-type->all-data-keys))
" "explain-model-type->needed-data-keys" "(def explain-model-type->all-data-keys
  {:property-segments [:segmented-queried-jobs :timezone :group-by-properties]
   :anomalous-users [:user-counts]})

(def explain-model-type->needed-data-keys
  (map-vals (fn [data-keys] (map (fn [data-key] (#{:segmented-queried-jobs :user-counts} data-key)) data-keys))
            explain-model-type->all-data-keys))
" "explain-model-type->needed-data-keys" "(def explain-model-type->all-data-keys
  {:property-segments [:segmented-queried-jobs :timezone :group-by-properties]
   :anomalous-users [:user-counts]})

(def explain-model-type->needed-data-keys
  (map-vals (fn [data-keys] (map (fn [data-key] (#{:segmented-queried-jobs :user-counts})) data-keys)) explain-model-type->all-data-keys))
" "explain-model-type->needed-data-keys" "(def explain-model-type->all-data-keys
  {:property-segments [:segmented-queried-jobs :timezone :group-by-properties]
   :anomalous-users [:user-counts]})

(def explain-model-type->needed-data-keys
  (map-vals (fn [data-keys] (map (fn [data-key] (#{:segmented-queried-jobs :user-counts})) data-keys))
            explain-model-type->all-data-keys))
" "(use '[plumbing.core])" "(def explain-model-type->all-data-keys
  {:property-segments [:segmented-queried-jobs :timezone :group-by-properties]
   :anomalous-users [:user-counts]})

(def explain-model-type->needed-data-keys
  (map-vals (fn [data-keys] (map (fn [data-key] (#{:segmented-queried-jobs :user-counts})) data-keys))
            explain-model-type->all-data-keys))
" "(mapcat (fn [x]) [1 2 3])" "(b2)" "(b1)" "(def b2 (core.util/create-fn-with-latch a1 2))" "(def b1 (core.util/create-fn-with-latch a1 2))" "(def a1 (core.util/create-fn-with-latch f 2))" "(a2)" "(def a2 (core.util/create-fn-with-latch a1 2))" "(def a1 (core.util/create-fn-with-latch f 2))" "(a1)" "(a2)" "(def a2 (core.util/create-fn-with-latch a1 2))" "(def a1 (core.util/create-fn-with-latch f 2))" "(f)" "(defn f [] (prn \"1\"))" "(seq nil)" "(seq [])" "(set [])" "(for [x nil] x)" "(core.log/infof \"test log\")" "(prn \"test\")" "(type (map identity))" "(map identity)" "(def a 1)" "(def- a 1)" "(empty? {})" "(set [1 2 3])" "(assoc-when {:a 1 :b 2} :a 3)" "(assoc-when {:a 1 :b 2} :a nil)" "(use '[plumbing.core])" "(hash-map :a 1 :b 2)" "
(def g (plumbing.graph/graph {:x (fnk [a b c d e f g h i j k l m n o p q r s t u v w y z] :here)}))" "(use '[plumbing.core])" "
(def g (plumbing.graph/graph {:x (fnk [a b c d e f g h i j k l m n o p q r s t u v w y z] :here)}))" "(clojure.core.async/closed? c)" "(clojure.core.async.impl.protocols/closed? c)" "(clojure.core.async.impl.protocols/close? c)" "(clojure.core.async.impl.protocals/close? c)" "(clojure.core.async/close? c)" "(clojure.core.async/<!! c)" "(clojure.core.async/close! c)" "(clojure.core.async/put! c \"1\")" "(clojure.core.async/put!! c \"1\")" "(def c (clojure.core.async/chan))" "(clojure.core.async/chan)" "(clojure.core.async/chan (clojure.core.async/buffer 1))" "(clojure.core.async/chan 1)" "(clojure.core.async/chan)" "(x)" "x" "(def x #(let [a 1] a))" "#(let [a 1] a)" "(clojure.pprint/pprint [\"asd\" \"B\"])" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-8)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-7)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-6)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-5)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-4)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-3)" "(clojure.spec.alpha/explain :detect.domain.data/counts (-> detect.explainer.mock-data/detected-job-3 :queried-job :counts))" "(type (rand-int 10))" "(rand-int 10)" "(rand-int 1)" "(rand-long 0)" "(clojure.spec.alpha/explain :detect.domain.data/counts (-> detect.explainer.mock-data/detected-job-3 :queried-job :counts))" "(-> detect.explainer.mock-data/detected-job-3 :queried-job :counts first type)" "(-> (range 2) first type)" "(type (range 2))" "(type (read-string \"123\"))" "(-> (read-string \"[1 2 3 5 4 2 1]\") last type)" "(-> (read-string \"(1 2 3 5 4 2 1)\") last type)" "(-> (read-string \"(1 2 3 5 4 2 1)\") first type)" "(-> (read-string \"(1 2 3)\") first type)" "(read-string \"(1 2 3)\")" "(-> detect.explainer.mock-data/detected-job-3 :queried-job :counts first type)" "(-> detect.explainer.mock-data/detected-job-3 :queried-job :counts first)" "(clojure.spec.alpha/explain :detect.domain.data/counts (-> detect.explainer.mock-data/detected-job-3 :queried-job :counts))" "(-> detect.explainer.mock-data/detected-job-3 :queried-job :counts)" "(instance? java.lang.Long 0.0)" "(instance? java.lang.Long 0)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-3)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-2)" "(set! *print-length* 5000)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-2)" "(clojure.spec.alpha/explain :detect.domain.data/detected-job detect.explainer.mock-data/detected-job-1)" "(clojure.spec.alpha/explain :detect.domain.data/detected-jobs detect.explainer.mock-data/detected-jobs)" "(require '[plumbing.core :as plumbing])" "(core.error/warn \"test\" nil)" "(core.error/warn \"test\" 1)" "@(:queue-stats-ref (:arb (:queue-checkers svc-graph)))" "(map (fn-> second :conn clojurewerkz.spyglass.client/get-stats) @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))))" "(use '[plumbing.core])" "(map (fn-> second :conn clojurewerkz.spyglass.client/get-stats) @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))))" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats)" "(set! *print-length* 200)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats)" "@(:queue-stats-ref (:arb (:queue-checkers svc-graph)))" "res" "(def res (sequence (map (fn [x] (try (if (< 40 x) (throw (Exception. \"exp!\")) x)
                                           (catch Exception e
                                             nil)))) (range 50)))" "res" "(def res (sequence (map (fn [x] (try (if (< 40 x) (throw (Exception. \"exp!\")) x)
                                           (catch Exception e
                                             (prn e))))) (range 50)))" "(use '[plumbing.core])" "(c-g {})" "(def c-g (plumbing.graph/eager-compile g))" "(c-g {})" "
(def g (plumbing.graph/graph {:x (fnk [a] [a \"x\"])
                              :y (fnk [] \"y\")
                              :z {:z1 (fnk [x] [\"z1\" x])
                                  :z2 (fnk [x z1] [\"z2\" x z1])}}))" "(hash-map :detected-jobs 1 :2 2)" "(c-g {})" "(def c-g (plumbing.graph/eager-compile g))" "
(def g (plumbing.graph/graph {:x (fnk [] \"x\")
                              :z {:z1 (fnk [x] [\"z1\" x])
                                  :z2 (fnk [x z1] [\"z2\" x z1])}}))" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [] \"x\")
                              :z {:z1 (fnk [x] [\"z1\" x])
                                  :z2 (fnk [x z1] [\"z2\" x z1])}}))" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z 1
                              :y (plumbing.graph/instance ff [b [:z w]] {:d b :w w})}))" "(use '[plumbing.core])" "(set! *print-length* 200)" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z 1
                              :y (plumbing.graph/instance ff [b [:z w]] {:d b :w w})}))" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w (fnk [] \"w\") :v (fnk [] \"v\")}
                                    
                              :y (plumbing.graph/instance ff
                                     [b [:z w]]
                                   {:d b})}))" "(:req :core.spec/number)" ":core.spec/number" "(macroexpand-1 '(core.spec/fdefnk t-fnk {:req any?} any?))" "(plumbing.core/defnk t-fnk [a b] [1 2])" "(use '[plumbing.core])" "(plumbing.core/defnk t-fnk [a b] [1 2])" "(defnk t-fnk [a b] [1 2])" "(c-g {:a \"a\" :b \"b\" :kk \"kk\"})" "(c-g {:a \"a\" :b \"b\"})" "(def c-g (plumbing.graph/eager-compile g))" "(c-g {:a \"a\" :b \"b\"})" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w (fnk [] \"w\") :v (fnk [] \"v\")}
                              :y (plumbing.graph/instance ff
                                     [b [:z w]]
                                   {:d b})}))" "(c-g {:a \"a\" :b \"b\"})" "(def c-g (plumbing.graph/eager-compile g))" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w (fnk [] \"w\") :v (fnk [] \"v\")}
                              :y (plumbing.graph/instance ff
                                     [b [:z w]]
                                   {:a 1 :d b})}))" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff
                                     [b [:z w]]
                                   {:a 1 :d b})}))" "{:w \"w\" :v \"v\"}" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z 1
                              :y (plumbing.graph/instance ff [b [:z w]] {:d b :w w})}))" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff [b [:z w]] {:d b :w w})}))" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff [b [:z w]] {:d b})}))" "(defnk ff [a d {w :not-set} {e :ee} :as m] [a d e w m])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff [b w] {:d b})}))" "(defnk ff [a d {w :not-set} {e :ee}] [a d e w])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff [b] {:d b})}))" "(defnk ff [a d {e :ee} w] [a d e w])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :z {:w \"w\" :v \"v\"}
                              :y (plumbing.graph/instance ff [b] {:d b})}))" "(c-g {:a \"a\" :b \"b\"})" "(def c-g (plumbing.graph/eager-compile g))" "(defnk ff [a d {e :ee}] [a d e])
(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])
                              :y (plumbing.graph/instance ff [b] {:d b})}))" "(when false :a)" "(c-g {:1 1 :b 2 :a 3 :c :k})" "(c-g {:1 1 :b 2 :a 3 :c :x})" "(c-g {:1 1 :b 2 :a 3})" "(c-g {:1 1 :b 2})" "(c-g {:1 1})" "c-g" "c-d" "(def c-g (plumbing.graph/eager-compile g))" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])}))" "(use '[plumbing.core])" "(def g (plumbing.graph/graph {:x (fnk [a b {c 1}] [a b c])}))" "asd" "(tfn 1)" "(tfn 1 2)" "(tfn 1 2 3 5)" "(defn tfn [a & [b c]] (prn a b c))" "(tfn 1 2 3 5)" "(tfn 1 2 3)" "(defn tfn [a & [b]] (prn a b))" "(defn t-fn [a & [b] c] (prn a b c))" "(-> h->s first val :stats keys sort)" "(-> h->s first val :stats keys)" "(-> h->s first val :stats)" "(-> h->s first val keys)" "(-> h->s first val)" "(first h->s)" "(keys h->s)" "@(:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph)))" "(-> h->s first val :stats type)" "(-> h->s first val :stats)" "(-> h->s first val :stata)" "(-> h->s first val keys)" "(-> h->s first val type)" "(-> h->s first val)" "(-> h->s first)" "(keys h->s)" "(type h->s)" "(def h->s (-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) mp-client.kestrel-queue-checker/get-stats)) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) mp-client.kestrel-queue-checker/get-stats) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats first val vals) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats first val keys) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats first val type) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats first val) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats count) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats keys) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats type) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first :conn clojurewerkz.spyglass.client/get-stats) " "(-> @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))) vals first) " "(keys @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) " "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys sort)" "arb-kqcc" "arb-pool" "(def arb-pool (mp-client.kestrel-queue-checker/construct-pool arb-kqcc))" "(def arb-pool )" "arb-kqcc" "(def arb-kqcc (mp-client.kestrel-queue-checker/kestrel-queue-checker-config (:config svc-graph) :arb))" "@(:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph)))" "@(:queue-stats-ref (:arb (:queue-checkers svc-graph))) " "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys sort)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys)" "(set! *print-length* 200)" "(binding [*print-length* 200] (-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys prn))" "(binding [*print-length* 200] (-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys))" "(binding [*print-length* 200] (-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys count))" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys count)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second keys)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second type)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats first second)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats keys)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats type)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn client/get-stats)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second)" "(first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))))" "(keys @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))))" "(type @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph))))" "@(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))" "(:keys @(:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph))))" "(type (:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph))))" "(:keys (:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph))))" "(keys (:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph))))" "(:kestrel-queue-checker-config (:arb (:queue-checkers svc-graph)))" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats)" "(keys (:queue-checkers svc-graph))" "(type (:queue-checkers svc-graph))" "(type (:queue-checkers svc-graph)) #_@(:kestrel-pool-ref (:arb ))" "@(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerkz.spyglass.client/get-stats)" "(-> (first @(:kestrel-pool-ref (:arb (:queue-checkers svc-graph)))) second :conn clojurewerz.spyglass.client/get-stats)" "(+ 1 nil)" "(+ nil)" "(doseq [x nil] (prn \"a\" x))" "(doseq [x nil] (prn x))" "( #(hash-map :detected-jobs %) 1)" "(some identity [1 nil nil])" "(some identity [false nil nil])" "(some identity [nil nil nil])" "(some [nil nil nil])" "(any? [nil nil nil])" "(any? [1 2 3])" "(some? [nil nil])" "(some? [1 nil])" "(some? [1 2 3])" "(boolean (seq [1]))" "(boolean (seq []))" "(seq [])" "(seq nil)" "(count nil)" "({:a :b} [:a :b])" "(#(hash-map :detected-jobs %) 1)" "#(hash-map :detected-jobs %)" "(clojure.data/diff #{:a} #{:b})" "(clojure.data.diff #{:a} #{:b})" "(transduce (mapcat (fn [x] (repeat x x))) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) 0 (range 5))" "(transduce (mapcat (fn [x] (repeat x x))) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) [] (range 5))" "(repeat 3 3)" "(transduce (mapcat (fn [x] (repeat x x))) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) nil (range 5))" "(transduce (map inc) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) nil (range 5))" "(transduce (map inc) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) (range 5))" "qwe" "((fn test-fn ([x] (inc x)) ([_ x] (test-fn x))) \"a\" 2)" "(fn test-fn ([x] (inc x)) ([_ x] (test-fn x)))" "(transduce (map inc) (fn ([] (prn \"0args\")) ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) (range 5))" "(transduce (map inc) (fn ([x] (prn \"1args\" x) x) ([r x] (prn \"2args:\" r x) x)) nil (range 5))" "(transduce (map inc) (fn [r x] (prn \"r\" r) x) (range 5))" "(for [x nil] x)" "(doseq [x (range 5)
              y (range x)] (prn [x y]))" "(doseq [x nil] (prn x))" "(doseq [x (range 5)
              :let [z (* x 2)]
              y [z (inc z)]] (prn [x y z]))" "(mapcat (fnk [x :as m] []))" "(mapcat (fnk [x] []))" "(mapcat (fnk [x] x))" "(use '[plumbing.core])" "(mapcat (fnk [x] x))" "(mapcat (fn [x] x))" "t" "(deliver (:a t) \"x\")" "(def t {:a (promise) :b 2})" "(deliver (:a t) \"x\")" "t" "(def t {:a (promise) :b 2})" "(smart-hub.api.data/parse-boolean \"truE\")" "(smart-hub.api.data/parse-boolean \"true\")" "(smart-hub.api.data/parse-boolean \"False\")" "(smart-hub.api.data/parse-boolean \":false\")" "(smart-hub.api.data/parse-boolean \"false\")" "(gcp.test-util/with-storage-emulator
        (let [b (gcp.bucket.cloud-storage/bucket {:bucket-name \"test\"})])
        )" "(def di (.getDefaultInstance so))" "so" "(def so (.getOptions rsh))" "rsh" "(def rsh (RemoteStorageHelper/create))" "(in-ns 'gcp.test-util)" "(gcp.test-util/with-storage-emulator
        (let [b (gcp.bucket.cloud-storage/bucket {:bucket-name \"test\"})])
        )" "(case \"test\"
        c1 1)" "(def c1 \"test\")" "(gcp.bucket.core/copy b1 \"latest3\" \"latest2\")" "(gcp.bucket.core/copy b1 \"latest\" \"latest2\")" "(bucket/copy b1 \"latest\" \"latest2\")" "(gcp.bucket.core/key-prefix b1)" "(bucket/key-prefix b1)" "(key-prefix b1)" "(def b1 (gcp.bucket.core/sub-bucket b0 \"inverted-index/\"))" "(def b0 (gcp.bucket.cloud-storage/bucket {:bucket-name (System/getenv \"ML_DETECT_BUCKET_NAME\")}))" "(def b0 (gcp.bucket.cloud-storage {:bucket-name (System/getenv \"ML_DETECT_BUCKET_NAME\")}))" "(System/getenv \"ML_DETECT_BUCKET_NAME\")" "(System/getenv ml-detect-bucket-env-var)" "(def b (gcp.bucket.core/sub-bucket (safe-get svc-graph :sma-bucket) \"inverted-index/\"))" "(safe-get svc-graph :sma-bucket)" "(def b (gcp.bucket.core/sub-bucket (safe-get svc-graph :sma-bucket) \"inverted-index/\"))" "(def b (gcp.bucket.cloud-storage/sub-bucket (safe-get svc-graph :sma-bucket) \"inverted-index/\"))" "(use '[plumbing.core])" "(sort-by first < [[1 2] [1 3] [2 1] [2 2]])" "(sort-by first > [[1 2] [1 3] [2 1] [2 2]])" "(distinct-by first [[1 2] [1 3] [2 1] [2 2]])" "(use '[plumbing.core])" "(def anomaly-bucket (gcp.bucket.cloud-storage/bucket {:bucket-name \"mixpanel-dev-1-stage-1-detect\"
                                                      :key-prefix \"anomaly-details/\"
                                                      :serializer (detect.domain.data/grouped-plans-anomaly-serializer)}))
" "ts" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (mapv (fn [x] (double (inc x))))))" "(gcp.pubsub.core/publish publ mock-msg)" "(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (mapv (fn [x] (double (inc x))))))" "(mapv inc [1 2 3])" "
(gcp.pubsub.core/publish publ mock-msg)" "(def publ (gcp.pubsub.core/publisher (:pubsub-broker svc-graph)
                                  \"stage.detect.jobs-to-explain\"
                                  (detect.domain.data/informer-callback-and-payload-serializer)))" "


(def mock-msg {:detected-jobs (:grouped-jobs dj)
               :payload payload
               :callback \"smart-hub\"})
" "(count ts)" "ts" "
(gcp.pubsub.core/publish publ mock-msg)" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] (range 99))]
               :payload payload
               :callback \"smart-hub\"})
" "
(gcp.pubsub.core/publish publ mock-msg)" "(def publ (gcp.pubsub.core/publisher (:pubsub-broker svc-graph)
                                  \"stage.detect.jobs-to-explain\"
                                  (detect.domain.data/informer-callback-and-payload-serializer)))" "
(gcp.pubsub.core/publish publ mock-msg)" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] (range 120))]
               :payload payload
               :callback \"smart-hub\"})
" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] [1.0 2 \"a\"])]
               :payload payload
               :callback \"smart-hub\"})
" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] [1.0 2 \"a\" ...])]
               :payload payload
               :callback \"smart-hub\"})
" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] [1.0 2 3])]
               :payload payload
               :callback \"smart-hub\"})
" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] [1 2 3])]
               :payload payload
               :callback \"smart-hub\"})
" "
(gcp.pubsub.core/publish publ mock-msg)" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (double (inc x))))))


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})
" "
(gcp.pubsub.core/publish publ mock-msg)" "(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)
" "(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})
" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (double x)))))" "(gcp.pubsub.core/publish publ mock-msg)" "(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)" "(def mock-msg {:detected-jobs (:grouped-jobs dj)
               :payload payload
               :callback \"smart-hub\"})
" "(def dj (gcp.bucket.core/get anomaly-bucket \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"))

(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (double x)))))
" "mock-msg" "(gcp.pubsub.core/publish publ mock-msg)" "long" "long?" "(gcp.pubsub.core/publish publ mock-msg)" "(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})
" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (double x)))))" "double?" "(gcp.pubsub.core/publish publ mock-msg)" "(def publ (gcp.pubsub.core/publisher (:pubsub-broker svc-graph)
                                  \"stage.detect.jobs-to-explain\"
                                  (detect.domain.data/informer-callback-and-payload-serializer)))" "(:pubsub-config svc-graph)" "(:from-informer-topic svc-graph)" "#_(def publ (gcp.pubsub.core/publisher (:pubsub-broker svc-graph)
                                  \"\"
                                  (detect.domain.data/informer-callback-and-payload-serializer)))" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "
(def o (detect.domain.data/informer-callback-and-payload->data mock-msg))
(def i (detect.domain.data/data->informer-callback-and-payload o))
(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "
(def o (detect.domain.data/informer-callback-and-payload->data mock-msg))
(def i (detect.domain.data/data->informer-callback-and-payload o))
(s/explain :detect.domain.data/informer-callback-and-payload i)" "(require '[clojure.spec.alpha :as s])

(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  :web
                    :project-id  805695
                    :property-filter-operator  :and
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  :total
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  :events}]
                    :type  :insights
                    :unit  :day}
             :show-idx 0
             :type  :insights}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})

(def anomaly-bucket (gcp.bucket.cloud-storage/bucket {:bucket-name \"mixpanel-dev-1-stage-1-detect\"
                                                      :key-prefix \"anomaly-details/\"
                                                      :serializer (detect.domain.data/grouped-plans-anomaly-serializer)}))

(def dj (gcp.bucket.core/get anomaly-bucket \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"))

(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (long x)))))


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})
" "(s/explain :detect.domain.data/informer-callback-and-payload i)" "(require '[clojure.spec.alpha :as s])" "(s/explain :detect.domain.data/informer-callback-and-payload i)" "i" "(def i (detect.domain.data/data->informer-callback-and-payload o))" "o" "(def o (detect.domain.data/informer-callback-and-payload->data mock-msg))" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (long x)))))


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})

(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)
" "(->> (first (:grouped-jobs dj)) :queried-job :timeseries count)" "dj" "(nth ts 99)" "(nth ts 101)" "(nth ts 100)" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (double (+ 1.0 x))))))


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})

(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)
" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (+ 1.0 x)))))


(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})

(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)
" "(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)" "(gcp.pubsub/publish (:payload-publisher svc-graph) mock-msg)" "mock-msg" "(def mock-msg {:detected-jobs [(assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts)]
               :payload payload
               :callback \"smart-hub\"})" "dj2" "(def dj2 (assoc-in (first (:grouped-jobs dj)) [:queried-job :timeseries] ts))" "(def ts (->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (long (inc x))))))" "(->> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (long (inc x)))))" "(-> (first (:grouped-jobs dj)) :queried-job :timeseries (map (fn [x] (long (inc x)))))" "(-> (first (:grouped-jobs dj)) :queried-job :timeseries (nth 100))" "(-> (first (:grouped-jobs dj)) :queried-job :timeseries)" "(-> (first (:grouped-jobs dj)) :queried-job)" "(first (:grouped-jobs dj))" "(first (:grouped-job dj))" "dj" "(first dj)" "(get-in (first dj) [:queried-job])" "(get-in mock-msg [:detected-jobs])" "(get-in mock-msg [:detected-jobs 0 ])" "(get-in mock-msg [:detected-jobs 0 :queried-job :timeseries])" "(get-in mock-msg [:detected-jobs 0 :qeuried-job :timeseries])" "(gcp.pubsub.core/publish (:payload-publisher svc-graph) mock-msg)" "(gcp.pubsub/publish (:payload-publisher svc-graph) mock-msg)" "(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  :web
                    :project-id  805695
                    :property-filter-operator  :and
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  :total
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  :events}]
                    :type  :insights
                    :unit  :day}
             :show-idx 0
             :type  :insights}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})

(def anomaly-bucket (gcp.bucket.cloud-storage/bucket {:bucket-name \"mixpanel-dev-1-stage-1-detect\"
                                                      :key-prefix \"anomaly-details/\"
                                                      :serializer (detect.domain.data/grouped-plans-anomaly-serializer)}))

(def dj (gcp.bucket.core/get anomaly-bucket \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"))

(def mock-msg {:detected-jobs (:grouped-jobs dj)
               :payload payload
               :callback \"smart-hub\"})
" "(:payload-publisher svc-graph)" "(s/explain :detect.domain.data/informer-callback-and-payload mock-msg)" "(s/explain :detect.domain.data/informer-callback-payload mock-msg)" "mock-msg" "(def mock-msg {:detected-jobs (:grouped-jobs dj)
               :payload payload
               :callback \"smart-hub\"})" "dj" "(def dj (gcp.bucket.core/get anomaly-bucket \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"))" "(def dj (gcp.core/get anomaly-bucket \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"))" "(def anomaly-bucket (gcp.bucket.cloud-storage/bucket {:bucket-name \"mixpanel-dev-1-stage-1-detect\"
                                                            :key-prefix \"anomaly-details/\"
                                                            :serializer (detect.domain.data/grouped-plans-anomaly-serializer)}))" "(def anomaly-bucket (gcp.bucket.cloud-storage/bucket {:bucket-name \"mixpanel-dev-1-stage-1-detect\"
                                                      :key-prefix \"anomaly-details/\"
                                                      :serializer (detect.domain.data/grouped-plans-anomaly-serializer)}))" "(s/explain :detect.domain.data/internal-anomaly payload)" "(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  :web
                    :project-id  805695
                    :property-filter-operator  :and
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  :total
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  :events}]
                    :type  :insights
                    :unit  :day}
             :show-idx 0
             :type  :insights}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})" "(s/explain :detect.domain.data/internal-anomaly payload)" "(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  :web
                    :project-id  805695
                    :property-filter-operator  :and
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  :total
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  :events}]
                    :type  :insights
                    :unit  :day}
             :show-idx 0
             :type  \"insights\"}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})" "(s/explain :detect.domain.data/internal-anomaly payload)" "(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  :web
                    :project-id  805695
                    :property-filter-operator  \"and\"
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  :total
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  :events}]
                    :type  :insights
                    :unit  \"day\"}
             :show-idx 0
             :type  \"insights\"}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})" "(s/explain :detect.domain.data/internal-anomaly payload)" "(s/valid? :detect.domain.data/internal-anomaly payload)" "
(def payload
  {:anomaly-timestamp \"2018-04-17\"
   :details {:actions {:total {:direction \"+\"
                               :expected-value 80.4920924379704
                               :priority 4.7251637824386
                               :residual-sign  \"+\"
                               :value-at-timestamp  178}
                       :unique nil}
             :plan {:plan-type  \"web\"
                    :project-id  805695
                    :property-filter-operator  \"and\"
                    :saved-report-info {:saved-report-id  2875815
                                        :saved-report-name  \"FanBuilder Actions - Last 30 Days\"}
                    :show-clauses [{:action  \"total\"
                                    :event  \"Fb: Cfc Save\"
                                    :resource-type  \"events\"}]
                    :type  \"insights\"
                    :unit  \"day\"}
             :show-idx 0
             :type  \"insights\"}
   :id  \"1b5141ba-3b9d-4448-934e-2c7d0b5c07c6\"
   :plan-id  \"623d19cb-281a-4721-bd20-745787aeb334\"
   :project-id  805695
   :user-id  0})
" "(require '[clojure.spec.alpha :as s])" "(gcp.bucket.cloud-storage/copy-blob! (gcp.bucket.cloud-storage/service) (gcp.bucket.core/bucket-name iib) \"inverted-index/latest\" \"inverted-index/previous2\")" "(gcp.bucket.cloud-storage/copy-blob! (gcp.bucket.cloud-storage/service) (bucket-name iib) \"inverted-index/latest\" \"inverted-index/previous2\")" "(.getName iib)" "iib" "(gcp.bucket.cloud-storage/copy-blob! (gcp.bucket.cloud-storage/service) iib \"inverted-index/latest\" \"inverted-index/previous2\")" "(gcp.bucket.cloud-storage/copy-blob! iib \"inverted-index/latest\" \"inverted-index/previous2\")" "(gcp.bucket.core/bucket-name iib)" "(gcp.core/bucket-name iib)" "(bucket-name iib)" "(def iib (gcp.bucket.core/sub-bucket (:sma-bucket svc-graph) \"inverted-index/\"))" "GoogleJsonResponseException" "(.getResult cw)" "(def cw (.copy sv cr))" "(.getResult cw)" "(def cw (.copy sv cr))" "(def cr (com.google.cloud.storage.Storage$CopyRequest/of  \"mixpanel-dev-1-stage-1-detect\" \"inverted-index/latest\" \"inverted-index/latest2\"))" "(def cw (.copy sv cr))" "(def sv (gcp.bucket.cloud-storage/service))" "(gcp.bucket.cloud-storage/service)" "(def cr (com.google.cloud.storage.Storage$CopyRequest/of  \"mixpanel-dev-1-stage-1-detect\" \"inverted-index/lastest\" \"inverted-index/lastest2\"))" "(com.google.cloud.storage.Storage$CopyRequest/of  \"mixpanel-dev-1-stage-1-detect\" \"inverted-index/lastest\" \"inverted-index/lastest2\")" "(import [com.google.cloud.storage Storage$CopyRequest])" "com.google.cloud.storage/Storage$CopyRequest" "(. com.google.cloud.storage.Storage.CopyRequest of \"mixpanel-dev-1-stage-1-detect\" \"inverted-index/lastest\" \"inverted-index/lastest2\")" "(com.google.cloud.storage.Storage.CopyRequest/of \"mixpanel-dev-1-stage-1-detect\" \"inverted-index/lastest\" \"inverted-index/lastest2\")" "CopyRequest/of" "(import [com.google.cloud.storage.Storage.CopyRequest])" "(import [com.google.cloud.storage.Storage CopyRequest])" "(com.google.cloud.storage.Storage/CopyRequest)" "iib" "(def iib (gcp.bucket.core/sub-bucket (:sma-bucket svc-graph) \"inverted-index/\"))" "(in-ns 'user)" "(def iib (bucket/sub-bucket (:sma-bucket svc-graph) \"inverted-index/\"))" "(in-ns 'detect.scheduler.service)" "(def iib (bucket/sub-bucket (:sma-bucket svc-graph) \"inverted-index/\"))" "(take-last 30 (sort (map (fn [x] [(.getName x) (.isInterrupted x)]) (.keySet (Thread/getAllStackTraces)))))" "(prn (sort (map (fn [x] [(.getName x) (.isInterrupted x)]) (.keySet (Thread/getAllStackTraces)))))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) (.keySet (Thread/getAllStackTraces))))" "(count (.keySet (Thread/getAllStackTraces)))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) (.keySet (Thread/getAllStackTraces))))" "(count (.keySet (Thread/getAllStackTraces))) #_(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) ))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) (.keySet (Thread/getAllStackTraces))))" "(.getName (Thread/currentThread))" "(.setName (Thread/currentThread) \"test\")" "(.Name (Thread/currentThread) \"test\")" "(.getName (Thread/currentThread))" "(.activeCount tg)" "(.availableProcessors (Runtime/getRuntime))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) ths-new))" "(clojure.set/difference ths ths-new)" "(def ths-new (.keySet (Thread/getAllStackTraces)))" "ths" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) ths))" "(.activeCount tg)" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) ths))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x) (.getParent x)]) ths))" "(.getParent (first ths))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x) (.getParent x)]) ths))" "(sort (map (fn [x] [(.getName x) (.isInterrupted x)]) ths))" "(.isInterrupted (first ths))" "(sort (map (fn [x] (.getName x)) ths))" "(map (fn [x] (.getName x)) ths)" "(.getName (first ths))" "(first ths)" "(count ths)" "(.activeCount tg)" "(count ths)" "(.activeCount tg)" "(count ths)" "(def ths (.keySet (Thread/getAllStackTraces)))" "(.keySet (Thread/getAllStackTraces))" "(Thread/getAllStackTraces)" "Thread/getAllStackTraces" "(.getThreads tg)" "(.activeCount tg)" "(.getParent tg)" "(def tg (.getThreadGroup (Thread/currentThread)))" "(.getThreadGroup (Thread/currentThread))" "(.getName (Thread/currentThread))" "(.getname (Thread/currentThread))" "(do 1 2 3)" "do" "(apply do (1 2 3))" "(singleton ((xf-m conj) nil 1))" "(use '[plumbing.core])" "(singleton ((xf-m conj) nil 1))" "((xf-m conj) nil 1)" "((xf-m do) nil 1)" "(do 1 2 3)" "(last 1 2 3)" "(identity 123 32)" "((xf-m identity) nil 1)" "((xf-m second) nil 1)" "((xf-m conj) [] 1)" "((xf-m conj) [[] 1])" "((xf-m [[] 1]) conj)" "((xf-m [nil 1]) 2)" "((xf-m [nil 1]) [])" "(xf-m [[] 1])" "(xf-m [nil 1])" "((xf-m [nil 1]))" "(def xf-m (map inc))" "(Thread/activeCount)" "(.activeCount (.getThreadGroup (Thread/currentThread)))" "(.activeCount (Thread/currentThread))" "(.getName (Thread/currentThread))" "(.getName (.getThreadGroup (Thread/currentThread)))" "(.getThreadGroup (Thread/currentThread))" "(.getThreadGroup Thread/currentThread)" "(fn [x] (throw (RuntimeException.)))" "qwe" "(Thread/activeCount)" "asd" "InterruptedException" "(clojure.core.async/thread (throw (RuntimeException.)))" "(clojure.core.async/close! a)" "(clojure.core.async/put! a \"123\")" "(def a (clojure.core.async/chan))" "(clojure.core.async/close! a)" "a" "(clojure.core.async/close! a)" "(def a (clojure.core.async/chan))" "(clojure.core.async/close! (clojure.core.async/chan))" "(clojure.async/close! (clojure.core.async/chan))" "(clojure.async/chan)" "(clojure.async/close! (clojure.async/chan))" "(clojure.async/close! p)" "qwe" "sad" "asd" "qwe" "asd" "sad" "asd" "(sequence (filter (fn [x] (when (< 5 (last x)) (Thread/sleep (* 2 1))) true)) [[0 1] [2 3 4] [5 6] [7 8 9]])" "(sequence (filter (fn [x] (when (< 5 (last x)) (Thread/sleep (* 2 expiring-timeout))) true)) [[0 1] [2 3 4] [5 6] [7 8 9]])" "(< 5 [1 2])" "(deliver x 20)" "(deliver x 10)" "(def x (promise))" "(core.async/receive-all p)" "(clojure.core.async/close! p)" "(clojure.core.async/put! p 2)" "(clojure.core.async/put! p 1)" "(def p (clojure.core.async/chan 3))" "(core.async/receive-all p)" "p" "qwe" "asd" "p" "(clojure.core.async/into [] p)" "(clojure.core.async/close! p)" "(clojure.core.async/put! p 1)" "(clojure.core.async/into [] p)" "(into [] (map identity) p)" "(clojure.core.async/into [] (map identity) p)" "(def p (clojure.core.async/chan 3))" "(clojure.core.async/into [] p)" "(into [] p)" "(clojure.core.async/close! p)" "(into [] (map identity) p)" "(into [] p)" "(clojure.core.async/put! p 2)" "(clojure.core.async/put! p 1)" "(def p (clojure.core.async/chan 3))" "(def p (clojure.coe.async/chan 3))" "(.keySet (Thread/getAllStackTraces))" "(type (.keySet (Thread/getAllStackTraces)))" "(clojure.core.async/thread (.setName (Thread/currentThread) \"my-name-is-xxx\") (Thread/sleep 10000))" "(clojure.async/thread (.setName (Thread/currentThread) \"my-name-is-xxx\") (Thread/sleep 10000))" "(type (.keySet (Thread/getAllStackTraces)))" "(.keySet (Thread/getAllStackTraces))" "(.ketSet (Thread/getAllStackTraces))" "(.keySet (Thread/getAllStackTraces))" "(Thread/getAllStackTraces)" "(clojure.core.async/thread (.getName (Thread/currentThread)))" "(clojure.async/thread (.getName (Thread/currentThread)))" "(async/thread (.getName (Thread/currentThread)))" "(format \"%s-%d\" \"qwe\" 1)" "(.getName (Thread/currentThread))" "(.setName (Thread/currentThread) \"Thread[nREPL-worker-17,5,main]-2\")" "(.getName (Thread/currentThread))" "(Thread/currentThread)" "(into [] (core.async/timeout-map (fn [x] (prn x) (Thread/sleep x) (inc x)) 3000) [100 200 300 1000 2000 3000 4000 5000 1000 200 4000])" "(future-cancel f)" "f" "(into [] (core.async/timeout-map (fn [x] (prn x) (Thread/sleep x) (* 2 x)) 3000) [100 200 300 1000 2000 3000 4000 5000 1000 200 4000])" "@f" "(future-cancel f)" "(future-cancelled? f)" "(def f (future (apply + (range 400000000))))" "(apply + (range 300000000))" "(apply + (range 200000000))" "(apply + (range 100000000))" "(apply + (range 1000000000))" "(apply + (range 100000000))" "(apply * (map inc (range 1000000)))" "(apply * (inc (range 1000000)))" "(apply * (range 1000000))" "(apply + (range 1000000))" "(+ (range 1000000))" "@f" "f" "(future-cancel f)" "(future-cancelled? f)" "(future-canceled? f)" "(future-called? f)" "f" "(def f (future (Thread/sleep 50000) (inc 0)))" "(type b)" "(def b (into [] tr (range 10)))" "(type a)" "a" "(def a (transduce tr conj (range 10)))" "(def tr (map inc))" "   (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :blocking
                }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               #_{:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               #_{:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "asd" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "  (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" " (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               #_{:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :blocking}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" " (let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :blocking}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async)" "(def b (mp-client.public/funnel {:public-api-client (:public-api-client svc-graph) :project-id 3 :funnel-id 2509304 :from-date \"2018-03-01\" :to-date \"2018-03-07\"}))" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "(def b (mp-client.public/funnel {:public-api-client (:public-api-client svc-graph) :project-id 3 :funnel-id 2509304 :from-date \"2018-03-01\" :to-date \"2018-03-07\"}))" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "asd" "a" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "(def b (mp-client.public/funnel {:public-api-client (:public-api-client svc-graph) :project-id 3 :funnel-id 2509304 :from-date \"2018-03-01\" :to-date \"2018-03-07\"}))" "(System/getenv \"MP_APP_API_HOST\")" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "mp-client.public/base-funnel-url" "(mp-client.public/base-funnel-url)" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "b" "(def b (mp-client.public/funnel {:public-api-client (:public-api-client svc-graph) :project-id 3 :funnel-id 2509304 :from-date \"2018-03-01\" :to-date \"2018-03-07\"}))" "(System/getenv \"MP_APP_API_HOST\")" "(def a (mp-client.public/get-jql-results (:public-api-client svc-graph) js 3 {:from_date \"2018-03-01\" :to_date \"2018-03-02\" :project_id 3}))" "(def js \"function main() {
    var event_params = {
        from_date: params.from_date,
        to_date: params.to_date,
        event_selectors: [{\\\"event\\\": \\\"Anomaly Detected\\\",
                           \\\"selector\\\": '(properties[\\\"alert_type\\\"] == params.project_id)'}]
    };

    return Events(event_params);
}
\")" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :expected-value 13
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
(gcp.pubsub.core/publish (:payload-publisher svc-graph) {:callback \"smart-hub\"
                                                         :payload payload
                                                         :detected-jobs (:detected-jobs dj)})
" "(with-redefs [core.log/do-log-fn (constantly nil)] (detect.integration-test.core-test/scheduler-test-service (plumbing.core/fnk [] (gcp.bucket.memory/bucket {}))))" "asd" "(with-redefs [core.log/do-log (constantly nil)] (detect.integration-test.core-test/scheduler-test-service (plumbing.core/fnk [] (gcp.bucket.memory/bucket {}))))" "(binding [core.log/*log-level* :fatal] (detect.integration-test.core-test/scheduler-test-service (plumbing.core/fnk [] (gcp.bucket.memory/bucket {}))))" "(binding [core.log/*log-level* :fatal] (detect.integration-test.core-test/scheduler-test-service (fnk [] (gcp.bucket.memory/bucket {}))))" "(binding [core.log/*log-level* :fatal] (detect.integration-test.core-test/scheduler-test-service (gcp.bucket.memory/bucket {})))" "(binding [core.log/*log-level* :fatal] detect.integration-test.core-test/scheduler-test-service (gcp.bucket.memory/bucket {}))" "(binding [core.log/*log-level* :fatal] detect.integration-test.core-test/scheduler-test-service (gcp.bucket.bucket-memory/bucket {}))" "(binding [core.log/*log-level* :fatal] detect.integration-test.core-test/scheduler-test-service (bucket-memory/bucket {}))" "(binding [core.log/*log-level* :all] (f1))" "(binding [core.log/*log-level* :all](f1))" "(f1)" "(defn f1 [] (binding [core.log/*log-level* :error] (core.log/warnf \"123123\")))" "(def f1 [] (binding [core.log/*log-level* :error] (core.log/warnf \"123123\")))" "(binding [core.log/*log-level* :error] (core.log/warnf \"123123\"))" "(binding [*log-level* :error] (core.log/warnf \"123123\"))" "(with-bindings [*log-level* :error] (core.log/warnf \"123123\"))" "(core.log/warnf \"123123\")" "(core.log/warnf \"qwe\")" "(detect.integration-test.core-test/small-smart-hub-test-service (atom []))" "qwe" "(service.core/start-service (plumbing.graph/graph :config core.config/config) {:service-name \"smart-hub.api\"
                                                                                     :swank-port 123456})" "(service.core/start-service (plumbing.graph/graph :config core.config/config) {:service-name \"smart-hub.api\"
    :swank-port  (net/free-port)})" "(plumbing.graph/graph :config core.config/test-config)" "(plumbing.graph/graph :config core.config/config)" "(in-ns 'user)" "(graph/graph :config config/config)" "service-graph" "(in-ns 'detect.alerter.service)" "(plumbing.graph/graph {:config core.config/test-config})" "(detect.integration-test.core-test/small-smart-hub-test-service (atom []))" "qwe" "(service.core/start-service (plumbing.graph/graph :config core.config/config) {:service-name \"smart-hub.api\"
                                                                                     :swank-port 123456})" "(service.core/start-service (plumbing.graph/graph :config core.config/config) {:service-name \"smart-hub.api\"
    :swank-port  (net/free-port)})" "(plumbing.graph/graph :config core.config/test-config)" "(plumbing.graph/graph :config core.config/config)" "(in-ns 'user)" "(graph/graph :config config/config)" "service-graph" "(in-ns 'detect.alerter.service)" "(plumbing.graph/graph {:config core.config/test-config})" "(detect.integration-test.core-test/small-smart-hub-test-service (atom []))" "(letk [[y] (tmp)] (prn \"res\" y))" "(defn tmp []
        (let [x (do (prn \"x\") :x)
              y (do (prn \"y\") :y)] {:x x :y y}))" "(letk [[y] (tmp)] (prn \"res\" y))" "(letk [[y] (tmp)] y)" "(use '[plumbing.core])" "(letk [[y] (tmp)] y)" "(defn tmp []
        (let [x (do (prn \"x\" :x))
              y (do (prn \"y\" :y))] {:x x :y y}))" "(defn tmp []
        (let [x (do (prn \"x\" :x))
              y (do (prn \"y\" :y))] {:x x :y y}))))" "(defn tmp []
        (let [x (do (prn \"x\" :x))
              y (do (prn \"y\" :y))]))" "qwe" "asd" "(test-fn \"qwe\")" "(schema.core/defn test-fn :- schema.core/Str [a :- schema.core/Num] \"qwe\")" "(schema.core/defn test-fn :- schema.core/Str [a :- schema.core//Num] \"qwe\")" "(cond msg-id 1 :else 2)" "(def msg-id nil)" "(cond msg-id 1 :else 2)" "msg-id" "(def msg-id)" "(name :qwe)" ":qwe" "(clojure.core/keyword \"error\")" "(macroexpand-1 '(with-logging-exception statsd \"error\" (some body)))" "(defmacro with-logging-exception [statsd error & body]
  `(try
     ~@body
     (catch Exception e
       (log/exception (format \"Unexpected error running job : %s\" ~error) e))
     (catch Throwable t
       (statsd/incr statsd (keyword ~error))
       (log/exception (format \"Unexpected error running job : %s\" ~error) t)
       (throw t))))" "(= :detect.informer.core/a ::a)" "::a" "(prn (incanter.core/dataset [:b :a] (-> a :rows)))" "(incanter.core/dataset [:b :a] (-> a :rows))" "(incanter.core/dataset [:a :b] (-> a :rows))" "(-> a :rows incanter.core/->Dataset)" "(-> a :rows incanter.core/->dataset)" "(-> a :rows incanter.core/dataset)" "(-> a :rows incanter.core/->dataset)" "(-> a :rows)" "a" "(def a (->> (incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}])
                                  (incanter.core/add-derived-column :score [:a] normalize-to-unit)))" "(->> (incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}])
                           (incanter.core/add-derived-column :score [:a] normalize-to-unit))" "(defn normalize-to-unit [v]
  (Math/tanh (double v)))
" "(->> (incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}])
                           (incanter.core/add-derived-column :score [:a] (fn [R] (Math/tanh (double R)))))" "(->> (incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}])
                           (add-derived-column :score [:a] (fn [R] (Math/tanh (double R)))))" "(-> (incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}]))" "(incanter.core/dataset [:a :b] [{:a 1 :b 2} {:a 1 :b 2}])" "(java.lang.Math/tanh 1)" "(core.clj-time.utils/datetime->formatted-date (clj-time/with-time-at-start-of-day (clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Amman\"))))" "(core.clj-time.utils/datetime->formatted-date (clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Amman\")))" "(core.clj-time.utils/datetime->formatted-date (clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"US/Pacific\")))" "core.clj-time.utils/datetime->formatted-date" "(core.clj-time.utils/datetime->formatted-date (clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"US/Pacific\")))" "(clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"US/Pacific\"))" "(clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Seoul\"))" "(clj-time.core/from-time-zone (clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Amman\"))" "(in-ns 'detect.informer.core)
" "(clj-time.core/from-time-zone (format/parse (format/with-zone (format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Amman\"))
" "(clj-time.core/from-time-zone (format/parse (format/with-zone (format/formatters :date-parser) (DateTimeZone/forID \"UTC\")) \"2018-03-30\") (DateTimeZone/forID \"Asia/Amman\"))
#object[org.joda.time.DateTime 0x2ef7b6c \"2018-03-30T01:00:00.000+03:00\"]" "(print-str (doall a))" "(str (doall a))" "(str a)" "(def a (map inc (range 10)))" "(letk [d 1 [{a nil} :as b] {:a 2 :c 1}] (prn a b d) b)" "(letk [[{a nil} :as b] {:a 2 :c 1}] (prn a b) b)" "(letk [[{a nil} :as b] {:c 1}] (prn a b) b)" "(letk [[{a nil} :as b] {:c 1}] b)" "(use '[plumbing.core])" "(letk [[{a nil} :as b] {:c 1}] b)" "(zero? nil)" "(zero? 0)" "(clj-time.format/parse (clj-time.format/formatter \"YYYY-MM-dd\") \"2018-03-30\")" "(clj-time.format/formatter \"YYYY-MM-dd\")" "(org.joda.time.DateTimeZone/forID \"Asia/Amman\")" "(clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatter \"YYYY-MM-dd\") (org.joda.time.DateTimeZone/forID \"Asia/Amman\")) \"2018-03-30\")" "(clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatter \"YYYY-MM-dd\") (org.joda.time.DateTimeZone/forID \"Asia/Seoul\")) \"2018-03-30\")" "(clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatter \"YYYY-MM-dd\") (org.joda.time.DateTimeZone/forID \"US/Pacific\")) \"2018-03-30\")" "(org.joda.time.DateTimeZone/forID \"US/Pacific\")" "(org.joda.time.DateTimeZone \"US/Pacific\")" "(org.joda.time.DateTimeZone. \"US/Pacific\")" "(clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatter \"YYYY-MM-dd\") \"US/Pacific\") \"2018-03-30\")" "(clj-time.format/parse (clj-time.format/with-zone (clj-time.format/formatter \"YYYY-MM-dd\")) \"2018-03-30\" \"US/Pacific\")" "(clj-time.format/parse (clj-time.format/formatter \"YYYY-MM-dd\") \"2018-03-30\")" "(clj-time.format/parse \"YYYY-MM-dd\" \"2018-03-30\")" "(f1 nil)" "(defnk f1 [{a 1}] a)" "(use '[plumbing.core])" "(inc 1 2)" "(get-in smart-hub.api.data-test/mock-web-insights-publish [:web-alert :anomaly :id])" "(get-in smart-hub.api.data-test/mock-web-insights-publish [:anomaly :id])" "smart-hub.api.data-test/mock-web-insights-publish" "(= (long 3) (double 3))" "(= (long 3) (int 3))" "3" "(gcp.bucket.core/put unread-count-bucket \"a\" 1)" "(def unread-count-bucket (gcp.bucket.memory/bucket {}))" "(gcp.bucket.core/keys unread-count-bucket)" "(gcp.bucket.core/put unread-count-bucket \"a\" 1)" "(put unread-count-bucket \"a\" 1)" "(gcp.bucket.core/put unread-count-bucket \"a\" 1)" "(def unread-count-bucket (gcp.bucket.memory/bucket {}))" "(def unread-count-bucket (gcp.bucket-memory.core/bucket {}))" "(def unread-count-bucket (bucket-memory/bucket {}))" "(map (fn [[[c d e] v]] c) a)" "(map (fn [[k v]] k) a)" "(map (fn [k v] k) a)" "a" "(def a {[1 2 3] :a})" "(doseq [x (range 5)] (prn x) (prn x))" "(type (str (format \"123\")))" "(type (format \"123\"))" "(format \"123\")" "(reify (i [_ x] (inc x)))" "(def k (reify (i [_ x] (inc x))))" "(concat nil 1)" "(concat nil [1 2 3])" "(concat nil [])" "(concat [] nil)" "(concat [] [])" "(concat nil nil)" "(conj [1 2 3] [1 2 3])" "(conj nil [1 2 3])" "(cons nil [1 2 3])" "(conj nil [1 2 3])" "(repeat 3 (rand))" "(repeat 3 (millis))" "(repeat 3 (mills))" "(repeat 3 \"a\")" "(gcp.test-util/with-pubsub-emulator
        (let [pb (gcp.pubsub.cloud-pubsub/pubsub-broker {})
              pub (gcp.pubsub.core/publisher pb \"ctst\")
              sub (gcp.pubsub.core/subscriber pb \"ctst\" \"ctst-sub\" 600 contour.domain.data/contours-to-publish-serializer)]))" "(gcp.test-util/with-pubsub-emulator
        (let [pb (gcp.pubsub.cloud-pubsub/pubsub-broker {})
              sub (gcp.pubsub.core/subscriber pb \"ctst\" \"ctst-sub\" 600 contour.domain.data/contours-to-publish-serializer)]))" "(gcp.test-util/with-pubsub-emulator
        (let [pb (gcp.pubsub.cloud-pubsub/pubsub-broker {})])
        )" "(ss)" "(with-redefs [fn-a (fn [] 1)]
        (ss))" "(defn ss []
        (let [r (fn-a)]
          r))" "(defn fn-a [] 0)" "(defn ss []
        (let [r (fn-a)]
          r))" "(smart_hub.grpc.AlertsReply/getDescriptor)" "smart_hub.grpc.AlertsReply/getDescriptor" "smart_hub.grpc.AlertsReply" "(def t (service.core/start-service detect.informer.service/service-graph))" "t" "(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-4\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
(gcp.pubsub.core/publish (:payload-publisher svc-graph) {:callback \"smart-hub\"
                                                         :payload payload
                                                         :detected-jobs (:detected-jobs dj)})
" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :expected-value 13
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :property-segments,
                              :property \"some string property\",
                              :property-type :string
                              :property-value \"string property value\"
                              :priority 0.9}
                             {:explain-type :property-segments,
                              :property \"some bool property\",
                              :property-type :boolean
                              :property-value \"true\"
                              :priority 0.8}
                             {:explain-type :property-segments,
                              :property \"some num property\",
                              :property-type :number
                              :property-value \"123\"
                              :priority 0.7}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})" "(def t (service.core/start-service detect.informer.service/service-graph))" "(meta t)" "t" "(def t (service.core/start-service detect.informer.service/service-graph))" "(service.core/start-service detect.informer.service/service-graph)" "(eager-compile t)" "(graph/eager-compile t)" "t" "(def t (plumbing.graph/graph :a (fnk [z] 2)
                                   :b (fnk [a] 2)
                                   :c (fnk [a] 2)
                                   :d {:da (fnk [c] 3) :db (fnk [d] 3)}))" "t" "(def t (plumbing.graph/graph :a (fnk [z] 2)
                                   :b (fnk [a] 2)
                                   :c (fnk [a] 2)
                                   :d {:da (fnk [c] 3) :db (fnk [d] 3)}))" "(meta (plumbing.graph/graph :a (fnk [z] 2)
                                         :b (fnk [a] 2)
                                         :c (fnk [a] 2)
                                         :d {:da (fnk [c] 3) :db (fnk [d] 3)}))" "&t" "defn" "(meta :'defnk)" "(meta 'defnk)" "(meta 'fnk)" "(meta 't)" "(meta t)" "(t {:a 1})" "(defn t [x] (prn (meta x)))" "(fn? {:a 1})" "(macroexpand (plumbing.graph/graph :a (fnk [z] 2)
                                         :b (fnk [a] 2)
                                         :c (fnk [a] 2)
                                         :d {:da (fnk [c] 3) :db (fnk [d] 3)}))" "(macroexpand (plumbing.graph/graph :a (fnk [z] 2)
                                         :b (fnk [a] 2)
                                         :c (fnk [a] 2)))" "(plumbing.graph/graph :a (fnk [z] 2)
                            :b (fnk [a] 2)
                            :c (fnk [a] 2))" "(fnk [a] 2)" "fnk" "(plumbing.graph/graph :a 1
                            :b (fnk [a] 2)
                            :c (fnk [a] 2))" "(pluming.graph/graph :a 1
                           :b (fnk [a] 2)
                           :c (fnk [a] 2))" "(graph/graph :a 1
                   :b (fnk [a] 2)
                   :c (fnk [a] 2))" "(use '[plumbing.core] '[ plumbing.graph])" "(use [plumbing.core plumbing.graph])" "(use '[plumbing.core plumbing.graph])" "(use 'plumbing.core 'plumbing.graph)" "(use 'plumbing.core)" "
(gcp.pubsub.core/publish (:payload-publisher svc-graph) {:callback \"smart-hub\"
                                            :payload payload
                                            :detected-jobs (:detected-jobs dj)})
" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :expected-value 13
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))" "t4" "(-> (safe-get-in t4 [:alert-contents 0 :alert :anomaly :anomaly]) keys)" "(-> (safe-get-in t4 [:alert-contents 0 :alert :anomaly]) keys)" "(-> (safe-get-in t4 [:alert-contents 0 :alert]) keys)" "(-> (safe-get-in t4 [:alert-contents 0]) keys)" "(spec-tools.core/spec :data.internal/alert)" "(spec-tools.core/spec :smart-hub.api.data/saved-alert-content)" "(clojure.spec.alpha/explain :smart-hub.api.data/service-info (safe-get-in t4 [:alert-contents 0 :service-info]))" "(clojure.spec.alpha/explain :smart-hub.api.data/service-info (safe-get-in t4 [:alert-contents 0 ::service-info]))" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert-content (safe-get-in t4 [:alert-contents 0]))" "(safe-get-in t4 [:alert-contents 0])" "(safe-get-in t4 [:alert-contents])" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (safe-get-in t4 [:alert-contents]))" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-id (safe-get-in t4 [:alert-id]))" "(safe-get-in t4 :alert-id)" "(keys t4)" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-id (safe-get-in t4 :alert-id))" "(use 'plumbing.core)" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert t4)" "(clojure.spec.alpha/explain :smarthub.api.data/saved-alert t4)" "(def t4 {:ingested-at-ms 1522019808187,
         :plan-id \"plan-2\",
         :alert-id \"anomaly-id-3_0_2\",
         :user-id 2,
         :alert-contents
         [{:alert
           {:anomaly
            {:message
             \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday, March 13th.\",
             :global-message
             \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\",
             :within-group-priority 1.3,
             :insights-query
             {:property-filters-operator :or,
              :time-unit :day,
              :show-clauses
              [{:show-event
                {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}],
              :property-filters
              [{:list-filter
                {:operator :does-not-contain, :operand \"i85brM2rJUq115J\"},
                :property {:type :number, :name \"6D808LN\", :source :people}}
               {:string-filter
                {:operator :contains,
                 :operands
                 [\"9VsB7a\"
                  \"XXN6W4jRK5g8j\"
                  \"oT10tx4\"
                  \"t568fk\"
                  \"0X4\"
                  \"Q51gipcJYKJ9n\"
                  \"y1ifmiolPzqfNhB0B102sD\"]},
                :property
                {:type :string,

                 :name \"FLaCEs3CMjL6hImjk0JiIx\",
                 :source :people}}
               {:number-filter
                {:operator :less-than, :operand1 0.019940271973609924},
                :property {:type :boolean, :name \"ZZ9uM\", :source :events}}],
              :group-by-properties
              [{:property
                {:type :date, :name \"UGEI18aV0bGJi7287H9yf\", :source :people}}
               {:property
                {:type :date,
                 :name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                 :source :people,
                 :typecast :list}}
               {:property
                {:type :list, :name \"48JHan0L5NocWSoJ\", :source :people}}
               {:property
                {:type :list,
                 :name \"6551IS\",
                 :source :people,
                 :typecast :number}}
               {:property
                {:type :string,
                 :name \"Hn316QwA41BrEMS912aR97eIe9\",
                 :source :people,
                 :typecast :boolean}}],
              :date-range {:to \"2016-03-13\", :from \"2016-02-12\"}},
             :anomaly
             {:anomaly-id \"anomaly-id-3\",
              :anomaly-timestamp 1457856000000,
              :value-at-timestamp 1,
              :direction :positive
              ,
              :insights-details
              {:show-clause-idx 0,
               :property-vals [],
               :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"},
              :explains-score 1.0,
              :explains []}}},
           :alert-content-id \"anomaly-id-3_0\",
           :service-info {:service :detect}}],
         :project-id 3,
         :alert-metadata
         {:alert-type :user,
          :grouped-message
          \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\"},
         :event \"9T1135Dew97003UJF0q54t4k138f\"})" "xxx" "(spec-tools.core/spec (clojure.spec.alpha/keys :req-un [::test]))" "(spec-tools/spec (clojure.spec.alpha/keys :req-un [::test]))" "(clojure.spec.alpha/keys :req-un [::test])" "
(gcp.pubsub.core/publish (:payload-publisher svc-graph) {:callback \"smart-hub\"
                                            :payload payload
                                            :detected-jobs (:detected-jobs dj)})
" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
" "payload" "(gcp.pubsub.core/publish payload-publisher {:callback \"smart-hub\"
                                            :payload payload
                                            :detected-jobs (:detected-jobs dj)})
" "k" "asd" "(spec-tools.core/explain :smart-hub.api.data/alerts-reply t3 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t3 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t3 {:alerts
         [{:anomaly
           {:anomalyId \"A9J3b3sFmMLZuj3O-insights\",
            :insightsQuery
            {:dateRange {:from \"2017-03-06\", :to \"2017-04-05\"},
             :timeUnit :DAY,
             :showClauses [{:showEvent {:event \"login\", :action :TOTAL}}],
             :propertyFilters
             [{:booleanFilter {:operand true},
               :property {:name \"bool prop\", :source :PEOPLE, :type :BOOLEAN}}
              {:stringFilter {:operator :EQUALS, :operands [\"strings stuff\"]},
               :property {:name \"yoyo\", :source :EVENTS, :type :BOOLEAN}}
              {:listFilter {:operand \"lots\", :operator :DOES_NOT_CONTAIN},
               :property {:name \"another one\", :source :EVENTS, :type :NUMBER}}
              {:numberFilter {:operator :GREATER_THAN, :operand1 10.0},
               :property {:name \"numba\", :source :EVENTS, :type :BOOLEAN}}
              {:stringFilter
               {:operator :DOES_NOT_EQUAL, :operands [\"hey there\"]},
               :property {:name \"string\", :source :EVENTS, :type :BOOLEAN}}],
             :propertyFiltersOperator :AND,
             :groupByProperties
             [{:property
               {:name \"special-prop\"
                :source :EVENTS,
                :type :STRING,
                :typecast :BOOLEAN}}],
             :eventDisplayName \"login\",
             :propertySegments []},
            :anomalyDetails
            [{:anomalyTimestamp 1491375600000,
              :valueAtTimestamp -1.47269387E8,
              :direction :NEGATIVE,
              :insightsDetails {:showAction :TOTAL},
              :expectedValue 22.0,
              :anomalyDetailId \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :explains []}]},
           :alertId \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :reportId 13500302,
           :ingestedAtMs 1522008472352,
           :isAlertOwner true,
           :detectionReason :USER}
          {:anomaly
           {:anomalyId \"A9J3b3sFmMLZuj3O-insights\",
            :insightsQuery
            {:dateRange {:from \"2017-03-06\", :to \"2017-04-05\"},
             :timeUnit :DAY,
             :showClauses [{:showEvent {:event \"login\", :action :UNIQUE}}],
             :propertyFilters
             [{:booleanFilter {:operand true},
               :property {:name \"bool prop\", :source :PEOPLE, :type :BOOLEAN}}
              {:stringFilter {:operator :EQUALS, :operands [\"strings stuff\"]},
               :property {:name \"yoyo
\", :source :EVENTS, :type :BOOLEAN}}
              {:listFilter {:operand \"lots\", :operator :DOES_NOT_CONTAIN},
               :property {:name \"another one\", :source :EVENTS, :type :NUMBER}}
              {:numberFilter {:operator :GREATER_THAN, :operand1 10.0},
               :property {:name \"numba\", :source :EVENTS, :type :BOOLEAN}}
              {:stringFilter
               {:operator :DOES_NOT_EQUAL, :operands [\"hey there\"]},
               :property {:name \"string\", :source :EVENTS, :type :BOOLEAN}}],
             :propertyFiltersOperator :AND,
             :groupByProperties
             [{:property
               {:name \"special-prop\",
                :source :EVENTS,
                :type :STRING,
                :typecast :BOOLEAN}}],
             :eventDisplayName \"login\",
             :propertySegments []},
            :anomalyDetails
            [{:anomalyTimestamp 1491375600000,
              :valueAtTimestamp 1.0,
              :direction :UNCHANGED,
              :insightsDetails {:showAction :UNIQUE},
              :expectedValue 99.0,
              :anomalyDetailId \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :explainsScore 1.0,
              :explains
              [{:priority 1.0,
                :anomalousUsersDetail
                {:distinctId \"u-id1\", :uniqueCount 123},
                :explainType :ANOMALOUS_USERS}]}]},
           :alertId \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :reportId 13500302,
           :ingestedAtMs 1522008472352,
           :isAlertOwner true,
           :detectionReason :USER}]}
  )" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t3 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/valid :smart-hub.api.data/alerts-reply t3 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/explain :smart-hub.api.data/alerts-reply t3 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t3 {:alerts
         [{:anomaly
           {:anomalyId \"A9J3b3sFmMLZuj3O-insights\",
            :insightsQuery
            {:dateRange {:from \"2017-03-06\", :to \"2017-04-05\"},
             :timeUnit :DAY,
             :showClauses [{:showEvent {:event \"login\", :action :TOTAL}}],
             :propertyFilters
             [{:booleanFilter {:operand true},
               :property {:name \"bool prop\", :source :PEOPLE, :type :BOOLEAN}}
              {:stringFilter {:operator :EQUALS, :operands [\"strings stuff\"]},
               :property {:name \"yoyo\", :source :EVENTS, :type :BOOLEAN}}
              {:listFilter {:operand \"lots\", :operator :DOES_NOT_CONTAIN},
               :property {:name \"another one\", :source :EVENTS, :type :NUMBER}}
              {:numberFilter {:operator :GREATER_THAN, :operand1 10.0},
               :property {:name \"numba\", :source :EVENTS, :type :BOOLEAN}}
              {:stringFilter
               {:operator :DOES_NOT_EQUAL, :operands [\"hey there\"]},
               :property {:name \"string\", :source :EVENTS, :type :BOOLEAN}}],
             :propertyFiltersOperator :AND,
             :groupByProperties
             [{:property
               {:name \"special-prop\"
                :source :EVENTS,
                :type :STRING,
                :typecast :BOOLEAN}}],
             :eventDisplayName \"login\",
             :propertySegments []},
            :anomalyDetails
            [{:anomalyTimestamp 1491375600000,
              :valueAtTimestamp -1.47269387E8,
              :direction :NEGATIVE,
              :insightsDetails {:showAction :TOTAL},
              :expectedValue 22.0,
              :anomalyDetailId \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :explains []}]},
           :alertId \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :reportId 13500302,
           :ingestedAtMs 1522008472352,
           :isAlertOwner true,
           :detectionReason :USER}
          {:anomaly
           {:anomalyId \"A9J3b3sFmMLZuj3O-insights\",
            :insightsQuery
            {:dateRange {:from \"2017-03-06\", :to \"2017-04-05\"},
             :timeUnit :DAY,
             :showClauses [{:showEvent {:event \"login\", :action :UNIQUE}}],
             :propertyFilters
             [{:booleanFilter {:operand true},
               :property {:name \"bool prop\", :source :PEOPLE, :type :BOOLEAN}}
              {:stringFilter {:operator :EQUALS, :operands [\"strings stuff\"]},
               :property {:name \"yoyo
\", :source :EVENTS, :type :BOOLEAN}}
              {:listFilter {:operand \"lots\", :operator :DOES_NOT_CONTAIN},
               :property {:name \"another one\", :source :EVENTS, :type :NUMBER}}
              {:numberFilter {:operator :GREATER_THAN, :operand1 10.0},
               :property {:name \"numba\", :source :EVENTS, :type :BOOLEAN}}
              {:stringFilter
               {:operator :DOES_NOT_EQUAL, :operands [\"hey there\"]},
               :property {:name \"string\", :source :EVENTS, :type :BOOLEAN}}],
             :propertyFiltersOperator :AND,
             :groupByProperties
             [{:property
               {:name \"special-prop\",
                :source :EVENTS,
                :type :STRING,
                :typecast :BOOLEAN}}],
             :eventDisplayName \"login\",
             :propertySegments []},
            :anomalyDetails
            [{:anomalyTimestamp 1491375600000,
              :valueAtTimestamp 1.0,
              :direction :UNCHANGED,
              :insightsDetails {:showAction :UNIQUE},
              :expectedValue 99.0,
              :anomalyDetailId \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :explainsScore 1.0,
              :explains
              [{:anomalousUsersDetail
                {:distinctId \"u-id1\", :uniqueCount 123},
                :explainType :ANOMALOUS_USERS}]}]},
           :alertId \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :reportId 13500302,
           :ingestedAtMs 1522008472352,
           :isAlertOwner true,
           :detectionReason :USER}]}
  )" "(spec-tools.core/explain :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t2 {:alerts
         [{:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type
                :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}]})" "(spec-tools.core/explain :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t2 {:alerts
         [{:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type
                :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}]})" "(def t2 {:alerts
         [{:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             ({:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}),
             :group-by-properties
             ({:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}),
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1522006231511,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type
                :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             ({:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}),
             :group-by-properties
             ({:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}),
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user,
           :is-alert-owner true}]})" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t1 [{:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"glorious, jealousy inducing\",
               :global-message \"group message here\",
               :within-group-priority 2,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses [{:show-event {:event \"login\", :action :total}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator
                                  :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp -1.47269387E8,
                :direction :negative,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 22.0}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_1\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert

          {:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}
         {:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"lovely wonderful\",
               :global-message \"group message here\",
               :within-group-priority 1,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses
                [{:show-event {:event \"l
ogin\", :action :unique}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-
06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp 1.0,
                :direction :unchanged,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 99.0,
                :explains-score 1.0,
                :explains
                [{:explain-type :anomalous-users,
                  :priority 0.1,
                  :distinct-id \"u-id1\",
                  :unique-count 123}]}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_0\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator
                :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}])
" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t1 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/explain-data :smart-hub.api.data/alerts-reply t1 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/explain :smart-hub.api.data/alerts-reply t1 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t1 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.core/conform :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools/conform :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(spec-tools.conform :smart-hub.api.data/alerts-reply t2 gcp.serialize.protobuf/protobuf-spec-conforming)" "(def t1 [{:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"glorious, jealousy inducing\",
               :global-message \"group message here\",
               :within-group-priority 2,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses [{:show-event {:event \"login\", :action :total}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator
                                  :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp -1.47269387E8,
                :direction :negative,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 22.0}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_1\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert

          {:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}
         {:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"lovely wonderful\",
               :global-message \"group message here\",
               :within-group-priority 1,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses
                [{:show-event {:event \"l
ogin\", :action :unique}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-
06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp 1.0,
                :direction :unchanged,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 99.0,
                :explains-score 1.0,
                :explains
                [{:explain-type :anomalous-users,
                  :priority 0.1,
                  :distinct-id \"u-id1\",
                  :unique-count 123}]}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_0\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator
                :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}])
" "(s/explain :smart-hub.api.data/alerts-reply
                 {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                      (assoc :is-alert-owner true))
                                t1)})" "(s/explain :smart-hub.api.data/alerts-reply
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              ))" "(s/explain :smart-hub.api.data/alert
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1]))" "(s/explain :smart-hub.api.data/anomaly-detail
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0]))" "(s/explain :smart-hub.api.data/anomaly-detail
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 1]))" "(s/explain :data.anomaly/explain
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains 0]))" "(s/explain :data.anomaly.explain/priority
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains 0 :priority]))" "(s/explain :data.anomaly.explain/explain-priority
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains 0 :priority]))" "(s/explain :data.anomaly.explain/explain-type
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains 0 :explain-type]))" "(s/explain :data.anomaly/explain
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains 0]))" "(safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                   [:alerts 1 :anomaly :anomaly-details 0 :explains 0])" "(safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                   [:alerts 1 :anomaly :anomaly-details 0 :explains])" "(s/explain :data.anomaly/explains
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains]))" "(s/explain :data.anomaly/explains-score
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :explains-score]))" "(s/explain :smart-hub.api.data/anomaly-detail-id
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0 :anomaly-detail-id]))" "(s/explain :smart-hub.api.data/anomaly-detail
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0]))" "(safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                   [:alerts 1 :anomaly :anomaly-details 0])" "(safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                   [:alerts 1 :anomaly :anomaly-details 1])" "(s/explain :smart-hub.api.data/anomaly-detail
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 1]))" "(s/explain :smart-hub.api.data/anomaly-detail
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details 0]))" "(s/explain :smart-hub.api.data/anomaly-id
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-id]))" "(s/explain :smart-hub.api.data/anomaly-details
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly :anomaly-details]))" "                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                                    [:alerts 1 :anomaly])" "(s/explain :smart-hub.api.data/anomaly
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly]))" "(s/explain :smart-hub.api.data/alert
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1 :anomaly]))" "(s/explain :smart-hub.api.data/alert
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 1]))" "(s/valid? :smart-hub.api.data/alerts-reply
                {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                    (assoc :is-alert-owner true))
                               t1)})" "(s/explain :smart-hub.api.data/alert
                 (safe-get-in {:alerts (mapv (fn-> (safe-get :protobuf-alert)
                                                   (assoc :is-alert-owner true))
                                             t1)}
                              [:alerts 0]))" "(s/explain :smart-hub.api.data/alert
                 (safe-get-in {:alerts (map (fn-> (safe-get :protobuf-alert)
                                              (assoc :is-alert-owner true))
                                            t1)}
                              [:alerts 0]))" "(s/valid? :smart-hub.api.data/alerts-reply
                {:alerts (map (fn-> (safe-get :protobuf-alert)
                                    (assoc :is-alert-owner true))
                               t1)})" "(s/explain :smart-hub.api.data/alerts-reply
                 {:alerts (map (fn-> (safe-get :protobuf-alert)
                                     (assoc :is-alert-owner true))
                               t1)})" "                 {:alerts (map (fn-> (safe-get :protobuf-alert)
                                     (assoc :is-alert-owner true))
                                     t1)}" "(type t1)" "(s/explain :smart-hub.api.data/alerts-reply
                 {:alerts (map (fn-> (safe-get :protobuf-alert)
                                     (assoc :is-alert-owner true))
                               t1)})" "(use 'plumbing.core)" "(s/explain :smart-hub.api.data/alerts-reply
                 {:alerts (map (fn-> (safe-get :protobuf-alert)
                                     (assoc :is-alert-owner true))
                               t1)})" "(require '[clojure.spec.alpha :as s])" "(def t1 [{:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"glorious, jealousy inducing\",
               :global-message \"group message here\",
               :within-group-priority 2,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses [{:show-event {:event \"login\", :action :total}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator
                                  :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp -1.47269387E8,
                :direction :negative,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 22.0}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_1\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert

          {:alert-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :total},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_1_676\",
              :expected-value 22.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp -1.47269387E8,
              :direction :negative}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :total}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator
                               :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}
         {:alert
          {:report-id 13500302,
           :ingested-at-ms 1521853044213,
           :plan-id \"plan-id\",
           :alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :user-id 676,
           :alert-contents
           [{:service-info {:service :detect},
             :alert
             {:anomaly
              {:message \"lovely wonderful\",
               :global-message \"group message here\",
               :within-group-priority 1,
               :insights-query
               {:property-filters-operator :and,
                :time-unit :day,
                :show-clauses
                [{:show-event {:event \"l
ogin\", :action :unique}}],
                :property-filters
                [{:boolean-filter {:operand true},
                  :property
                  {:type :boolean, :name \"bool prop\", :source :people}}
                 {:string-filter
                  {:operator :equals, :operands [\"strings stuff\"]},
                  :property {:type :boolean, :name \"yoyo\", :source :events}}
                 {:list-filter {:operator :does-not-contain, :operand \"lots\"},
                  :property
                  {:type :number, :name \"another one\", :source :events}}
                 {:number-filter {:operator :greater-than, :operand1 10.0},
                  :property {:type :boolean, :name \"numba\", :source :events}}
                 {:string-filter
                  {:operator :does-not-equal, :operands [\"hey there\"]},
                  :property
                  {:type :boolean, :name \"string\", :source :events}}],
                :group-by-properties
                [{:property
                  {:type :string,
                   :name \"special-prop\",
                   :source :events,
                   :typecast :boolean}}],
                :date-range {:to \"2017-04-05\", :from \"2017-03-
06\"}},
               :anomaly
               {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
                :anomaly-timestamp 1491375600000,
                :value-at-timestamp 1.0,
                :direction :unchanged,
                :insights-details
                {:show-clause-idx 0,
                 :property-vals [],
                 :event-display-name \"login\"},
                :expected-value 99.0,
                :explains-score 1.0,
                :explains
                [{:explain-type :anomalous-users,
                  :priority 0.1,
                  :distinct-id \"u-id1\",
                  :unique-count 123}]}}},
             :alert-content-id \"A9J3b3sFmMLZuj3O-insights_0\"}],
           :event \"login\",
           :project-id 1,
           :alert-metadata
           {:grouped-message \"group message here\", :alert-type :user}},
          :protobuf-alert
          {:alert-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
           :report-id 13500302,
           :ingested-at-ms 1521853044213,
           :anomaly
           {:anomaly-id \"A9J3b3sFmMLZuj3O-insights\",
            :anomaly-details
            [{:insights-details {:show-action :unique},
              :anomaly-detail-id \"A9J3b3sFmMLZuj3O-insights_0_676\",
              :expected-value 99.0,
              :anomaly-timestamp 1491375600000,
              :value-at-timestamp 1.0,
              :direction :unchanged,
              :explains-score 1.0,
              :explains
              [{:explain-type :anomalous-users,
                :priority 0.1,
                :anomalous-users-detail
                {:distinct-id \"u-id1\", :unique-count 123}}]}],
            :insights-query
            {:property-filters-operator :and,
             :time-unit :day,
             :show-clauses [{:show-event {:event \"login\", :action :unique}}],
             :property-filters
             [{:boolean-filter {:operand true},
               :property {:type :boolean, :name \"bool prop\", :source :people}}
              {:string-filter {:operator :equals, :operands [\"strings stuff\"]},
               :property {:type :boolean, :name \"yoyo\", :source :events}}
              {:list-filter {:operator :does-not-contain, :operand \"lots\"},
               :property {:type :number, :name \"another one\", :source :events}}
              {:number-filter {:operator :greater-than, :operand1 10.0},
               :property {:type :boolean, :name \"numba\", :source :events}}
              {:string-filter
               {:operator
                :does-not-equal, :operands [\"hey there\"]},
               :property {:type :boolean, :name \"string\", :source :events}}],
             :group-by-properties
             [{:property
               {:type :string,
                :name \"special-prop\",
                :source :events,
                :typecast :boolean}}],
             :date-range {:to \"2017-04-05\", :from \"2017-03-06\"},
             :event-display-name \"login\"}},
           :detection-reason :user}}])" "(schema.core/validate detect.alerter.web.data/PublishAlertRequest (-> smart-hub.api.data-test/mock-web-insights-publish
                                                                            ))" "k" "(schema.core/validate detect.alerter.web.data/PublishAlertRequest (-> smart-hub.api.data-test/mock-web-insights-publish
                                                                            ))" "(schema.core/validate detect.alerter.web.data/PublishAlertRequest (-> smart-hub.api.data-test/mock-web-insights-publish
                                                                                                                                                                                (assoc-in [:web-alert :anomaly :details :actions :unique :explains]
                                                                   explains)
(assoc-in [:web-alert :anomaly :details :actions :unique :explains-score]
                                                                   1.0)))" "(def explains [{:explain-type :anomalous-users :distinct-id \"u-id1\" :unique-count 123 :priority 0.1}])" "(def explains explains [{:explain-type :anomalous-users :distinct-id \"u-id1\" :unique-count 123 :priority 0.1}])" "(schema.core/validate schema.core/Num \"qwe\")" "(schema.core/validate schema.core/Num 123)" "(schema.core/validate detect.alerter.web.data/PublishAlertRequest smart-hub.api.data-test/mock-web-insights-publish)" "smart-hub.api.data-test/mock-web-insights-publish" "(-> smart-hub.api.data-test/mock-web-insights-publish
          (assoc-in [:web-alert :anomaly :details :actions :unique :explains]
                                                                   nil))" "smart-hub.api.data-test/mock-web-insights-publish" "(gcp.pubsub.core/publish (:payload-publisher svc-graph) {:callback \"smart-hub\"
                                         :payload payload
                                   :detected-jobs (:detected-jobs dj)})" "(gcp.pubsub.core/publish payload-publisher {:callback \"smart-hub\"
                                         :payload payload
                                   :detected-jobs (:detected-jobs dj)})" "(pubsub/publish payload-publisher {:callback \"smart-hub\"
                                         :payload payload
                                   :detected-jobs (:detected-jobs dj)})
" "(pubsub/publish payload-publisher {:callback callback
                                   :payload internal-anomaly
                                   :detected-jobs (:detected-jobs dj)})
" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(clojure.spec.alpha/explain :smart-hub.api.data/expected-value (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :expected-value]))" "(def msg {:ingested-at-ms 1521839772901,
 :plan-id \"plan-2\",
 :alert-id \"anomaly-id-3_0_2\",
 :user-id 2,
 :alert-contents
 [{:alert
   {:anomaly
    {:message
     \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\",
     :global-message
     \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\",
     :within-group-priority 1.3,
     :insights-query
     {:property-filters-operator :or,
      :time-unit :day,
      :show-clauses
      [{:show-event
        {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}],
      :property-filters
      [{:list-filter
        {:operator :does-not-contain, :operand \"i85brM2rJUq115J\"},
        :property {:type :number, :name \"6D808LN\", :source :people}}
       {:string-filter
        {:operator :contains,
         :operands
         [\"9VsB7a\"
          \"XXN6W4jRK5g8j\"
          \"oT10tx4\"
          \"t568fk\"
          \"0X4\"
          \"Q51gipcJYKJ9n\"
          \"y1ifmiolPzqfNhB0B102sD\"]},
        :property
        {:type :string,
         
         :name \"FLaCEs3CMjL6hImjk0JiIx\",
         :source :people}}
       {:number-filter
        {:operator :less-than, :operand1 0.019940271973609924},
        :property {:type :boolean, :name \"ZZ9uM\", :source :events}}],
      :group-by-properties
      [{:property
        {:type :date, :name \"UGEI18aV0bGJi7287H9yf\", :source :people}}
       {:property
        {:type :date,
         :name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
         :source :people,
         :typecast :list}}
       {:property
        {:type :list, :name \"48JHan0L5NocWSoJ\", :source :people}}
       {:property
        {:type :list,
         :name \"6551IS\",
         :source :people,
         :typecast :number}}
       {:property
        {:type :string,
         :name \"Hn316QwA41BrEMS912aR97eIe9\",
         :source :people,
         :typecast :boolean}}],
      :date-range {:to \"2016-03-13\", :from \"2016-02-12\"}},
     :anomaly
     {:anomaly-id \"anomaly-id-3\",
      :anomaly-timestamp 1457856000000,
      :value-at-timestamp 1,
      :direction :positive
      :expected-value 3
      :insights-details
      {:show-clause-idx 0,
       :property-vals [],
       :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"},
      :explains-score 1.0,
      :explains
      [{:explain-type :anomalous-users,
        :distinct-id \"u-id1\",
        :unique-count 123,
        :priority 0.1}]}}},
   :alert-content-id \"anomaly-id-3_0\",
   :service-info {:service :detect}}],
 :project-id 3,
 :alert-metadata
 {:alert-type :user,
  :grouped-message
  \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\"},
 :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :smart-hub.api.data/expected-value (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :expected-value]))" "(clojure.spec.alpha/explain :data.anomaly/insights-details (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :insights-details]))" "(clojure.spec.alpha/explain :detect.domain.data/explains-score (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains-score]))" "(clojure.spec.alpha/explain :detect.domain.data/explains (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(clojure.spec.alpha/explain :domain-data/explains (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (safe-get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(safe-get-in msg [:alert-contents 0])" "(clojure.spec.alpha/explain :data.internal/alert (safe-get-in msg [:alert-contents 0 :alert]))" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (safe-get-in msg [:alert-contents 0]))" "(use 'plumbing.core)" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (get-in msg [:alert-contents]))" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert msg)" "(def msg {:ingested-at-ms 1521839772901,
 :plan-id \"plan-2\",
 :alert-id \"anomaly-id-3_0_2\",
 :user-id 2,
 :alert-contents
 [{:alert
   {:anomaly
    {:message
     \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\",
     :global-message
     \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\",
     :within-group-priority 1.3,
     :insights-query
     {:property-filters-operator :or,
      :time-unit :day,
      :show-clauses
      [{:show-event
        {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}],
      :property-filters
      [{:list-filter
        {:operator :does-not-contain, :operand \"i85brM2rJUq115J\"},
        :property {:type :number, :name \"6D808LN\", :source :people}}
       {:string-filter
        {:operator :contains,
         :operands
         [\"9VsB7a\"
          \"XXN6W4jRK5g8j\"
          \"oT10tx4\"
          \"t568fk\"
          \"0X4\"
          \"Q51gipcJYKJ9n\"
          \"y1ifmiolPzqfNhB0B102sD\"]},
        :property
        {:type :string,
         
         :name \"FLaCEs3CMjL6hImjk0JiIx\",
         :source :people}}
       {:number-filter
        {:operator :less-than, :operand1 0.019940271973609924},
        :property {:type :boolean, :name \"ZZ9uM\", :source :events}}],
      :group-by-properties
      [{:property
        {:type :date, :name \"UGEI18aV0bGJi7287H9yf\", :source :people}}
       {:property
        {:type :date,
         :name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
         :source :people,
         :typecast :list}}
       {:property
        {:type :list, :name \"48JHan0L5NocWSoJ\", :source :people}}
       {:property
        {:type :list,
         :name \"6551IS\",
         :source :people,
         :typecast :number}}
       {:property
        {:type :string,
         :name \"Hn316QwA41BrEMS912aR97eIe9\",
         :source :people,
         :typecast :boolean}}],
      :date-range {:to \"2016-03-13\", :from \"2016-02-12\"}},
     :anomaly
     {:anomaly-id \"anomaly-id-3\",
      :anomaly-timestamp 1457856000000,
      :value-at-timestamp 1,
      :direction :positive
,
      :insights-details
      {:show-clause-idx 0,
       :property-vals [],
       :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"},
      :explains-score 1.0,
      :explains
      [{:explain-type :anomalous-users,
        :distinct-id \"u-id1\",
        :unique-count 123,
        :priority 0.1}]}}},
   :alert-content-id \"anomaly-id-3_0\",
   :service-info {:service :detect}}],
 :project-id 3,
 :alert-metadata
 {:alert-type :user,
  :grouped-message
  \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\"},
 :event \"9T1135Dew97003UJF0q54t4k138f\"})" "msg" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert msg)" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :expected-value 3, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type :anomalous-users, :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :detect.domain.data/explains (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert msg)" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :expected-value 3, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type :anomalous-users, :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :detect.domain.data/explains (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :expected-value 3, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type :anomalous-users, :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :detect.domain.data/explains (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(clojure.spec.alpha/explain :data.anomaly/explain (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains 0]))" "(get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains 0])" "(get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains])" "(clojure.spec.alpha/explain :data.anomaly/explains (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :explains]))" "(clojure.spec.alpha/explain :data.anomaly/insights-details (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :insights-details]))" "(clojure.spec.alpha/explain :data.anomaly/direction (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :direction]))" "(clojure.spec.alpha/explain :smart-hub.api.data/expected-value (get-in msg [:alert-contents 0 :alert :anomaly :anomaly :expected-value]))" "(get-in msg [:alert-contents 0 :alert :anomaly :anomaly :expected-value])" "(get-in msg [:alert-contents 0 :alert :anomaly :anomaly])" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(clojure.spec.alpha/explain :smart-hub.api.data/insights-query (get-in msg [:alert-contents 0 :alert :anomaly :insights-query]))" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :expected-value 3, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type \"anomalous-users\", :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :expected-value 3, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type \"anomalous-users\", :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(get-in msg [:alert-contents 0 :alert :anomaly :anomaly])" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(clojure.spec.alpha/explain :smart-hub.api.data/insights-query (get-in msg [:alert-contents 0 :alert :anomaly :insights-query]))" "(get-in msg [:alert-contents 0 :alert :anomaly :insights-query])" "(get-in msg [:alert-contents 0 :alert :anomaly :insight-query])" "(clojure.spec.alpha/explain :data.internal.inner/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :anomaly]))" "(clojure.spec.alpha/explain :smart-hub.api.data/message (get-in msg [:alert-contents 0 :alert :anomaly :message]))" "(clojure.spec.alpha/explain :data.internal/anomaly (get-in msg [:alert-contents 0 :alert :anomaly :message]))" "(get-in msg [:alert-contents 0 :alert :anomaly])" "(get-in msg [:alert-contents 0 :alert :anomaly ::message])" "(clojure.spec.alpha/explain :data.internal/anomaly (get-in msg [:alert-contents 0 :alert :anomaly]))" "(get-in msg [:alert-contents 0 :alert])" "(clojure.spec.alpha/explain :data.internal/alert (get-in msg [:alert-contents 0 :alert]))" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-content-id (get-in msg [:alert-contents 0 :alert-content-id]))" "(clojure.spec.alpha/explain :smart-hub.api.data/service-info (get-in msg [:alert-contents 0 :service-info]))" "(get-in msg [:alert-contents 0])" "::smart-hub.api.data/saved-alert-content" ":smart-hub.api.data/saved-alert-content" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert-content (get-in msg [:alert-contents 0]))" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (get-in msg [:alert-contents 0]))" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (get-in msg [:alert-contents]))" "(get-in msg [:alert-contents])" "(get-in msg :alert-contents)" "(clojure.spec.alpha/explain :smart-hub.api.data/alert-contents (get-in msg :alert-contents))" "(def msg2 {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert msg2)" "(def msg2 {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
{:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(-> msg (dissoc-in [:alert-contents 0 :alert :anomaly :anomaly]))" "(:alert-contents msg)" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert (assoc msg :alert-contents []))" "msg" "(-> msg keys)" "(type msg)" "(clojure.spec.alpha/explain :smart-hub.api.data/saved-alert msg)" "(def msg {:alert-contents [{:service-info {:service :detect}, :alert {:anomaly {:anomaly {:anomaly-id \"anomaly-id-3\", :value-at-timestamp 1, :anomaly-timestamp 1457856000000, :insights-details {:show-clause-idx 0, :property-vals [], :event-display-name \"9T1135Dew97003UJF0q54t4k138f\"}, :direction :positive, :explains-score 1.0, :explains [{:explain-type \"anomalous-users\", :distinct-id \"u-id1\", :unique-count 123, :priority 0.1}]}, :global-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :within-group-priority 1.3, :insights-query {:time-unit :day, :property-filters [{:property {:name \"6D808LN\", :type :number, :source :people}, :list-filter {:operand \"i85brM2rJUq115J\", :operator :does-not-contain}} {:property {:name \"FLaCEs3CMjL6hImjk0JiIx\", :type :string, :source :people}, :string-filter {:operands [\"9VsB7a\" \"XXN6W4jRK5g8j\" \"oT10tx4\" \"t568fk\" \"0X4\" \"Q51gipcJYKJ9n\" \"y1ifmiolPzqfNhB0B102sD\"], :operator :contains}} {:property {:name \"ZZ9uM\", :type :boolean, :source :events}, :number-filter
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {:operator :less-than, :operand1 0.019940271973609924}}], :group-by-properties [{:property {:name \"UGEI18aV0bGJi7287H9yf\", :type :date, :source :people}} {:property {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\", :type :date, :source :people, :typecast :list}} {:property {:name \"48JHan0L5NocWSoJ\", :type :list, :source :people}} {:property {:name \"6551IS\", :type :list, :source :people, :typecast :number}} {:property {:name \"Hn316QwA41BrEMS912aR97eIe9\", :type :string, :source :people, :typecast :boolean}}], :property-filters-operator :or, :show-clauses [{:show-event {:event \"9T1135Dew97003UJF0q54t4k138f\", :action :unique}}], :date-range {:from \"2016-02-12\", :to \"2016-03-13\"}}, :message \"9T1135Dew97003UJF0q54t4k138f has increased to %s users on Sunday March 13th.\"}}, :alert-content-id \"anomaly-id-3_0\"}], :alert-id \"anomaly-id-3_0_2\", :user-id 2, :project-id 3, :ingested-at-ms 1521837115710, :plan-id \"plan-2\", :alert-metadata {:grouped-message \"9T1135Dew97003UJF0q54t4k138f increased to %s users in the last 24 hours.\", :alert-type
 :user}, :event \"9T1135Dew97003UJF0q54t4k138f\"})" "(gcp.pubsub.core/publish (:payload-publisher svc-graph)
                               {:callback \"smart-hub\"
                                :payload payload
                                :detected-jobs (:detected-jobs dj)})" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
" "payload" "(def x (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "((:ack x))" "x" "(def x (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "((:ack x))" "x" "(def x (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "((:ack x))" "(:ack x)" "x" "(def x (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(detect.alerter.web.core/smart-hub-callback-url)" "(gcp.pubsub.core/publish (:payload-publisher svc-graph)
                               {:callback \"smart-hub\"
                                :payload payload
                                :detected-jobs (:detected-jobs dj)})" "(def dj {:detected-jobs [{:anomalies
                          [{:idx 1,
                            :score 1.3,
                            :id \"5ApC5L9DbVzLsFP7\",
                            :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                            :model-name->explains-info
                            {\"my-model\"
                             {:model-detail {:param \"something\", :version \"1.0\"},
                              :explains
                              [{:explain-type :property-segments,
                                :property \"prop 1\",
                                :property-value \"prop val 1\",
                                :property-type :string,
                                :priority 0.2}]},
                             \"your-model\"
                             {:model-detail {:param2 \"something\", :version \"1.2\"},
                              :explains
                              [{:explain-type :anomalous-users,
                                :distinct-id \"u-id1\",
                                :unique-count 123,
                                :priority 0.1}]}},
                            :explains
                            [{:explain-type :anomalous-users,
                              :distinct-id \"u-id1\",
                              :unique-count 123,
                              :priority 0.1}],
                            :explains-score 1.0}],
                          :queried-job
                          {:query
                           {:job-plan
                            {:plan
                             {:project-id 3,
                              :saved-report-info nil,
                              :show-clauses
                              [{:event \"9T1135Dew97003UJF0q54t4k138f\",
                                :action :unique,
                                :resource-type :events}
                               {:event \"vUfW61F3wu8zwySB8pWy\",
                                :action :unique,
                                :resource-type :events}
                               {:event \"r5Ksh23w\", :action :unique, :resource-type :events}
                               {:event \"u3\", :action :unique, :resource-type :events}
                               {:event \"Xma1SyMHt6PnZLKw\",
                                :action :unique,
                                :resource-type :events}],
                              :type :insights,
                              :unit :day,
                              :property-filters
                              [{:property {:name \"6D808LN\", :source :user, :type :number},
                                :filter-type :list,
                                :operator \"not in\",
                                :operands [\"i85brM2rJUq115J\"]}
                               {:property
                                {:name \"FLaCEs3CMjL6hImjk0JiIx\",
                                 :source :user,
                                 :type :string},
                                :filter-type :string,
                                :operator \"in\",
                                :operands
                                [\"9VsB7a\"
                                 \"XXN6W4jRK5g8j\"
                                 \"oT10tx4\"
                                 \"t568fk\"
                                 \"0X4\"
                                 \"Q51gipcJYKJ9n\"
                                 \"y1ifmiolPzqfNhB0B102sD\"]}
                               {:property
                                {:name \"ZZ9uM\", :source :properties, :type :boolean},
                                :filter-type :number,
                                :operator \"<\",
                                :operands [0.019940271973609924]}],
                              :property-filter-operator :or,
                              :group-by-properties
                              [{:name \"UGEI18aV0bGJi7287H9yf\", :source :user, :type :datetime}
                               {:name \"rJ5bFIWz07a5hs2B5XI59R8RZbLrZ\",
                                :source :user,
                                :type :datetime,
                                :typecast :list}
                               {:name \"48JHan0L5NocWSoJ\", :source :user, :type :list}
                               {:name \"6551IS\", :source :user, :type :list, :typecast :number}
                               {:name \"Hn316QwA41BrEMS912aR97eIe9\",
                                :source :user,
                                :type :string,
                                :typecast :boolean}],
                              :plan-type :mobile},
                             :user-id->plan-id {1 \"plan-1\", 2 \"plan-2\"},
                             :user-id->saved-report-info
                             {5827337
                              {:saved-report-id 823547,
                               :saved-report-name \"GIeLz06oVHzud4V8QA6AirD\"},
                              10217
                              {:saved-report-id 5517595,
                               :saved-report-name \"0iLpG0K2lemPO1g3L1\"},
                              98 {:saved-report-id 2966679, :saved-report-name \"32mb\"}}},
                            :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                            :retrieved-at 2151146,
                            :query-specs {:action :unique, :show-idx 0}},
                           :timeseries
                           (range 100)}}
                         ]})

(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))
" "detect.informer.core-test/detected-insights-job-day-1" "(gcp.pubsub.core/publish (:payload-publisher svc-graph)
                               {:callback \"smart-hub\"
                                :payload payload
                                :detected-jobs (:detected-jobs dj)})" "(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))" "(def dj {:detected-jobs [{:anomalies
                  [{:idx 1,
                    :score 1.3,
                    :id \"5ApC5L9DbVzLsFP7\",
                    :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                    :model-name->explains-info
                    {\"my-model\"
                     {:model-detail {:param \"something\", :version \"1.0\"},
                      :explains
                      [{:explain-type :property-segments,
                        :property \"prop 1\",
                        :property-value \"prop val 1\",
                        :property-type :string,
                        :priority 0.2}]},
                     \"your-model\"
                     {:model-detail {:param2 \"something\", :version \"1.2\"},
                      :explains
                      [{:explain-type :anomalous-users,
                        :distinct-id \"u-id1\",
                        :unique-count 123,
                        :priority 0.1}]}},
                    :explains
                    [{:explain-type :anomalous-users,
                      :distinct-id \"u-id1\",
                      :unique-count 123,
                      :priority 0.1}],
                    :explains-score 1.0}],
                  :queried-job
                  {:query
                   {:job-plan
                    {:plan
                     {:project-id 3,
                      :saved-report-info
                      {:saved-report-id 12,
                       :saved-report-name \"d4wDyK4Gpv35sQj37FiNH2gB5Nj\"},
                      :model-type :explain,
                      :event
                      \"Gl12Vdul4KpaKQ2ENjCso\",
                      :subtype :segmentation,
                      :type :segmentation,
                      :unit :day,
                      :plan-type :web,
                      :property-filters
                      [{:property
                        {:name \"gHNvvLvlAv0gB5po6c3B\", :source :user, :type :list},
                        :filter-type :boolean,
                        :operands [true]}
                       {:property
                        {:name \"LuSVLLynmFmXBvh043y1a0e1jXJ6\",
                         :source :properties,
                         :type :number},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [812]}
                       {:property
                        {:name \"h4568jp8gp7N0skG5jpKB8HQL5dsd3\",
                         :source :properties,
                         :type :list},
                        :filter-type :list,
                        :operator \"in\",
                        :operands [\"8mfxTPlvlOg42Q\"]}
                       {:property
                        {:name \"y5ABYb85NbWqf\", :source :user, :type :boolean},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [-4.321746826171875]}
                       {:property {:name \"43ay4Zf8\", :source :user, :type :datetime},
                        :filter-type :string,
                        :operator \"!=\",
                        :operands [nil \"gV
8ev\" \"R5QobFrRjRb4hw\" \"09KkyUy\"]}
                       {:property {:name \"EN0uZRM3\", :source :user, :type :boolean},
                        :filter-type :string,
                        :operator \"not set\",
                        :operands
                        [\"291Fs23h6\"
                         \"XM0wahdh8R4YBKd19Hv0Ssf8w71\"
                         nil
                         \"5qZ73MgDTzyZ3Qx5j0UNV54b182N0f\"]}
                       {:property {:name \"e44JGcnC\", :source :user, :type :list},
                        :filter-type :number,
                        :operator \"><\",
                        :operands [1951035 0.5873565673828125]}]},
                     :user-id->plan-id {2 \"plan-2\"},
                     :user-id->saved-report-info
                     {2634437
                      {:saved-report-id 195,
                       :saved-report-name \"7UFpBX4dUr8HY2P50A2zRV\"},
                      9 {:saved-report-id 12477, :saved-report-name \"803ac2\"},
                      421480145
                      {:saved-report-id 28974,
                       :saved-report-name \"y39Vm255FM0M2hkmsqRo0Y5mK7\"},
                      4075 {:saved-report-id 22, :saved-report-name \"447rlpMXmp\"},
                      6
                      {:saved-report-id 79948,
                       :saved-report-name \"xOW5Nj1F15OXS31erx5cZ6Rxhw633O\"},
                      36045
                      {:saved-report-id 127, :saved-report-name
                       \"uT371NINs7sBAeDWVjf\"},
                      1304 nil,
                      38549 {:saved-report-id 11796, :saved-report-name \"Ko89i7tdn\"}}},
                    :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                    :retrieved-at 466,
                    :query-specs {:count-type :unique}},
                   :timeseries
                   (range 99)}}]})" "(gcp.pubsub.core/publish (:payload-publisher svc-graph)
                               {:callback \"smart-hub\"
                                :payload payload
                                :detected-jobs (:detected-jobs dj)})" "(gcp.pubsub.core/publish (safe-get svc-graph :payload-publisher)
                               {:callback \"smart-hub\"
                                :payload payload
                                :detected-jobs (:detected-jobs dj)})" "(def payload (-> (:detected-jobs dj)
                 detect.informer.core/format-anomaly-payload
                 (assoc :id \"anomaly-id-3\"
                        :anomaly-timestamp \"2016-03-13\"
                        :user-id 2
                        :plan-id \"plan-2\")))" "(def dj {:detected-jobs [{:anomalies
                  [{:idx 1,
                    :score 1.3,
                    :id \"5ApC5L9DbVzLsFP7\",
                    :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                    :model-name->explains-info
                    {\"my-model\"
                     {:model-detail {:param \"something\", :version \"1.0\"},
                      :explains
                      [{:explain-type :property-segments,
                        :property \"prop 1\",
                        :property-value \"prop val 1\",
                        :property-type :string,
                        :priority 0.2}]},
                     \"your-model\"
                     {:model-detail {:param2 \"something\", :version \"1.2\"},
                      :explains
                      [{:explain-type :anomalous-users,
                        :distinct-id \"u-id1\",
                        :unique-count 123,
                        :priority 0.1}]}},
                    :explains
                    [{:explain-type :anomalous-users,
                      :distinct-id \"u-id1\",
                      :unique-count 123,
                      :priority 0.1}],
                    :explains-score 1.0}],
                  :queried-job
                  {:query
                   {:job-plan
                    {:plan
                     {:project-id 3456786,
                      :saved-report-info
                      {:saved-report-id 12,
                       :saved-report-name \"d4wDyK4Gpv35sQj37FiNH2gB5Nj\"},
                      :model-type :explain,
                      :event
                      \"Gl12Vdul4KpaKQ2ENjCso\",
                      :subtype :segmentation,
                      :type :segmentation,
                      :unit :day,
                      :plan-type :web,
                      :property-filters
                      [{:property
                        {:name \"gHNvvLvlAv0gB5po6c3B\", :source :user, :type :list},
                        :filter-type :boolean,
                        :operands [true]}
                       {:property
                        {:name \"LuSVLLynmFmXBvh043y1a0e1jXJ6\",
                         :source :properties,
                         :type :number},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [812]}
                       {:property
                        {:name \"h4568jp8gp7N0skG5jpKB8HQL5dsd3\",
                         :source :properties,
                         :type :list},
                        :filter-type :list,
                        :operator \"in\",
                        :operands [\"8mfxTPlvlOg42Q\"]}
                       {:property
                        {:name \"y5ABYb85NbWqf\", :source :user, :type :boolean},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [-4.321746826171875]}
                       {:property {:name \"43ay4Zf8\", :source :user, :type :datetime},
                        :filter-type :string,
                        :operator \"!=\",
                        :operands [nil \"gV
8ev\" \"R5QobFrRjRb4hw\" \"09KkyUy\"]}
                       {:property {:name \"EN0uZRM3\", :source :user, :type :boolean},
                        :filter-type :string,
                        :operator \"not set\",
                        :operands
                        [\"291Fs23h6\"
                         \"XM0wahdh8R4YBKd19Hv0Ssf8w71\"
                         nil
                         \"5qZ73MgDTzyZ3Qx5j0UNV54b182N0f\"]}
                       {:property {:name \"e44JGcnC\", :source :user, :type :list},
                        :filter-type :number,
                        :operator \"><\",
                        :operands [1951035 0.5873565673828125]}]},
                     :user-id->plan-id {2 \"plan-2\"},
                     :user-id->saved-report-info
                     {2634437
                      {:saved-report-id 195,
                       :saved-report-name \"7UFpBX4dUr8HY2P50A2zRV\"},
                      9 {:saved-report-id 12477, :saved-report-name \"803ac2\"},
                      421480145
                      {:saved-report-id 28974,
                       :saved-report-name \"y39Vm255FM0M2hkmsqRo0Y5mK7\"},
                      4075 {:saved-report-id 22, :saved-report-name \"447rlpMXmp\"},
                      6
                      {:saved-report-id 79948,
                       :saved-report-name \"xOW5Nj1F15OXS31erx5cZ6Rxhw633O\"},
                      36045
                      {:saved-report-id 127, :saved-report-name
                       \"uT371NINs7sBAeDWVjf\"},
                      1304 nil,
                      38549 {:saved-report-id 11796, :saved-report-name \"Ko89i7tdn\"}}},
                    :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                    :retrieved-at 466,
                    :query-specs {:count-type :unique}},
                   :timeseries
                   (range 99)}}]})" "(def payload (-> (:detected-jobs dj)
                       detect.informer.core/format-anomaly-payload
                       (assoc :id \"anomaly-id-3\"
                              :anomaly-timestamp \"2016-03-13\"
                              :user-id 2
                              :plan-id \"plan-2\")))" "(def payload (-> (:detected-jobs dj)
                       detect.informer.core/format-anomaly-payload
                       (assoc formatted-anomaly
                              :id \"anomaly-id-3\"
                              :anomaly-timestamp \"2016-03-13\"
                              :user-id 2
                              :plan-id \"plan-2\")))" "(detect.informer.core/format-anomaly-payload (:detected-jobs dj))" "(detect.informer.core/format-anomaly-payload [dj])" "(detect.informer.core/format-anomaly-payload dj)" "(def dj {:detected-jobs [{:anomalies
                  [{:idx 1,
                    :score 1.3,
                    :id \"5ApC5L9DbVzLsFP7\",
                    :prediction-details {\"08RBtG6hgH\" {[] []}, \"1MUc2e4N575uINr\" nil},
                    :model-name->explains-info
                    {\"my-model\"
                     {:model-detail {:param \"something\", :version \"1.0\"},
                      :explains
                      [{:explain-type :property-segments,
                        :property \"prop 1\",
                        :property-value \"prop val 1\",
                        :property-type :string,
                        :priority 0.2}]},
                     \"your-model\"
                     {:model-detail {:param2 \"something\", :version \"1.2\"},
                      :explains
                      [{:explain-type :anomalous-users,
                        :distinct-id \"u-id1\",
                        :unique-count 123,
                        :priority 0.1}]}},
                    :explains
                    [{:explain-type :anomalous-users,
                      :distinct-id \"u-id1\",
                      :unique-count 123,
                      :priority 0.1}],
                    :explains-score 1.0}],
                  :queried-job
                  {:query
                   {:job-plan
                    {:plan
                     {:project-id 3456786,
                      :saved-report-info
                      {:saved-report-id 12,
                       :saved-report-name \"d4wDyK4Gpv35sQj37FiNH2gB5Nj\"},
                      :model-type :explain,
                      :event
                      \"Gl12Vdul4KpaKQ2ENjCso\",
                      :subtype :segmentation,
                      :type :segmentation,
                      :unit :day,
                      :plan-type :web,
                      :property-filters
                      [{:property
                        {:name \"gHNvvLvlAv0gB5po6c3B\", :source :user, :type :list},
                        :filter-type :boolean,
                        :operands [true]}
                       {:property
                        {:name \"LuSVLLynmFmXBvh043y1a0e1jXJ6\",
                         :source :properties,
                         :type :number},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [812]}
                       {:property
                        {:name \"h4568jp8gp7N0skG5jpKB8HQL5dsd3\",
                         :source :properties,
                         :type :list},
                        :filter-type :list,
                        :operator \"in\",
                        :operands [\"8mfxTPlvlOg42Q\"]}
                       {:property
                        {:name \"y5ABYb85NbWqf\", :source :user, :type :boolean},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [-4.321746826171875]}
                       {:property {:name \"43ay4Zf8\", :source :user, :type :datetime},
                        :filter-type :string,
                        :operator \"!=\",
                        :operands [nil \"gV
8ev\" \"R5QobFrRjRb4hw\" \"09KkyUy\"]}
                       {:property {:name \"EN0uZRM3\", :source :user, :type :boolean},
                        :filter-type :string,
                        :operator \"not set\",
                        :operands
                        [\"291Fs23h6\"
                         \"XM0wahdh8R4YBKd19Hv0Ssf8w71\"
                         nil
                         \"5qZ73MgDTzyZ3Qx5j0UNV54b182N0f\"]}
                       {:property {:name \"e44JGcnC\", :source :user, :type :list},
                        :filter-type :number,
                        :operator \"><\",
                        :operands [1951035 0.5873565673828125]}]},
                     :user-id->plan-id {2 \"plan-2\"},
                     :user-id->saved-report-info
                     {2634437
                      {:saved-report-id 195,
                       :saved-report-name \"7UFpBX4dUr8HY2P50A2zRV\"},
                      9 {:saved-report-id 12477, :saved-report-name \"803ac2\"},
                      421480145
                      {:saved-report-id 28974,
                       :saved-report-name \"y39Vm255FM0M2hkmsqRo0Y5mK7\"},
                      4075 {:saved-report-id 22, :saved-report-name \"447rlpMXmp\"},
                      6
                      {:saved-report-id 79948,
                       :saved-report-name \"xOW5Nj1F15OXS31erx5cZ6Rxhw633O\"},
                      36045
                      {:saved-report-id 127, :saved-report-name
                       \"uT371NINs7sBAeDWVjf\"},
                      1304 nil,
                      38549 {:saved-report-id 11796, :saved-report-name \"Ko89i7tdn\"}}},
                    :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                    :retrieved-at 466,
                    :query-specs {:count-type :unique}},
                   :timeseries
                   (range 99)}}]})" "(def dj {:detected-jobs [{:anomalies
                  [{:idx 1,
                    :score 1.3,
                    :id \"5ApC5L9DbVzLsFP7\",
                    :prediction-details {\"08RBtG6hgH\" {[] ()}, \"1MUc2e4N575uINr\" nil},
                    :model-name->explains-info
                    {\"my-model\"
                     {:model-detail {:param \"something\", :version \"1.0\"},
                      :explains
                      [{:explain-type :property-segments,
                        :property \"prop 1\",
                        :property-value \"prop val 1\",
                        :property-type :string,
                        :priority 0.2}]},
                     \"your-model\"
                     {:model-detail {:param2 \"something\", :version \"1.2\"},
                      :explains
                      [{:explain-type :anomalous-users,
                        :distinct-id \"u-id1\",
                        :unique-count 123,
                        :priority 0.1}]}},
                    :explains
                    [{:explain-type :anomalous-users,
                      :distinct-id \"u-id1\",
                      :unique-count 123,
                      :priority 0.1}],
                    :explains-score 1.0}],
                  :queried-job
                  {:query
                   {:job-plan
                    {:plan
                     {:project-id 3456786,
                      :saved-report-info
                      {:saved-report-id 12,
                       :saved-report-name \"d4wDyK4Gpv35sQj37FiNH2gB5Nj\"},
                      :model-type :explain,
                      :event
                      \"Gl12Vdul4KpaKQ2ENjCso\",
                      :subtype :segmentation,
                      :type :segmentation,
                      :unit :day,
                      :plan-type :web,
                      :property-filters
                      [{:property
                        {:name \"gHNvvLvlAv0gB5po6c3B\", :source :user, :type :list},
                        :filter-type :boolean,
                        :operands [true]}
                       {:property
                        {:name \"LuSVLLynmFmXBvh043y1a0e1jXJ6\",
                         :source :properties,
                         :type :number},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [812]}
                       {:property
                        {:name \"h4568jp8gp7N0skG5jpKB8HQL5dsd3\",
                         :source :properties,
                         :type :list},
                        :filter-type :list,
                        :operator \"in\",
                        :operands [\"8mfxTPlvlOg42Q\"]}
                       {:property
                        {:name \"y5ABYb85NbWqf\", :source :user, :type :boolean},
                        :filter-type :number,
                        :operator \"<\",
                        :operands [-4.321746826171875]}
                       {:property {:name \"43ay4Zf8\", :source :user, :type :datetime},
                        :filter-type :string,
                        :operator \"!=\",
                        :operands [nil \"gV
8ev\" \"R5QobFrRjRb4hw\" \"09KkyUy\"]}
                       {:property {:name \"EN0uZRM3\", :source :user, :type :boolean},
                        :filter-type :string,
                        :operator \"not set\",
                        :operands
                        [\"291Fs23h6\"
                         \"XM0wahdh8R4YBKd19Hv0Ssf8w71\"
                         nil
                         \"5qZ73MgDTzyZ3Qx5j0UNV54b182N0f\"]}
                       {:property {:name \"e44JGcnC\", :source :user, :type :list},
                        :filter-type :number,
                        :operator \"><\",
                        :operands [1951035 0.5873565673828125]}]},
                     :user-id->plan-id {2 \"plan-2\"},
                     :user-id->saved-report-info
                     {2634437
                      {:saved-report-id 195,
                       :saved-report-name \"7UFpBX4dUr8HY2P50A2zRV\"},
                      9 {:saved-report-id 12477, :saved-report-name \"803ac2\"},
                      421480145
                      {:saved-report-id 28974,
                       :saved-report-name \"y39Vm255FM0M2hkmsqRo0Y5mK7\"},
                      4075 {:saved-report-id 22, :saved-report-name \"447rlpMXmp\"},
                      6
                      {:saved-report-id 79948,
                       :saved-report-name \"xOW5Nj1F15OXS31erx5cZ6Rxhw633O\"},
                      36045
                      {:saved-report-id 127, :saved-report-name
                       \"uT371NINs7sBAeDWVjf\"},
                      1304 nil,
                      38549 {:saved-report-id 11796, :saved-report-name \"Ko89i7tdn\"}}},
                    :dates {:to-date \"2016-09-26\", :from-date \"2016-08-26\"},
                    :retrieved-at 466,
                    :query-specs {:count-type :unique}},
                   :timeseries
                   (0
                    1
                    2
                    3
                    4
                    5
                    6
                    7
                    8
                    9
                    10
                    11
                    12
                    13
                    14
                    15
                    16
                    17
                    18
                    19
                    20
                    21
                    22
                    23
                    24
                    25
                    26
                    27
                    28
                    29
                    30
                    31
                    32
                    33
                    34
                    35
                    36
                    37
                    38
                    39
                    40
                    41
                    42
                    43
                    44
                    45
                    46
                    47
                    48
                    49
                    50
                    51
                    52
                    53
                    54
                    55
                    56
                    57
                    58
                    59
                    60
                    61
                    62
                    63
                    64
                    65
                    66
                    67
                    68
                    69
                    70
                    71
                    72
                    73
                    74
                    75
                    76
                    77
                    78
                    79
                    80
                    81
                    82
                    83
                    84
                    85
                    86
                    87
                    88
                    89
                    90
                    91
                    92
                    93
                    94
                    95
                    96
                    97
                    98)
                   }}]})" "keyword?" "detect.informer.service-test/web-insights-query-day" "(remove nil? nil)" "(seq (filter nil? nil))" "(filter nil? nil)" "(mapv (fn [x] (throw \"x\")) nil)" "(map (fn [x] (throw \"x\")) nil)" "(map inc nil)" "detect.alerter.data/InsightsInternalDetails" "detect.alerter.web.data/InsightsClientDetails" "detect.alerter.web.impl-test/insights-details-with-explains" "detect.alerter.web.impl-test/insigts-details-with-explains" "detect.alerter.web.impl-test/base-explains" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1000000}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :blocking, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :blocking, :timeout-ms 1000000}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :blocking 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :blocking :timeout-ms 1000000}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1000000}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1000000}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(require '[clojure.core.async :as async])" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "let" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
                          ;; this should timeout
                          {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(async/put! p q)" "(go (async/put! p q))" "(async/put!! p q)" "(async/<!! q)" "(async/<!! p)" "(async/<! p)" "p" "(async/put! p q)" "(put! p q)" "(def q (clojure.core.async/chan 1 (map inc)))" "p" "res" "(async/close! p)" "(async/close! res)" "p" "(async/>!! p 2)" "(>!! p 2)" "p" "(def p (clojure.core.async/chan 1 (map inc)))" "p" "(async/put! p \"123\")" "(put! p \"123\")" "(def p (clojure.core.async/chan 1))" "(require '[clojure.core.async :as async])" "(require [clojure.core.async :as async])" "(def p (clojure.core.async/chan 1))" "qwe" "(clojure.core.async/go-loop [] (prn \"a\") (Thread/sleep 1000) (recur))" "(go-loop [] (prn \"a\") (Thread/sleep 1000) (recur))" "@p" "p" "(deliver p 2)" "(deliver p 1)" "(def p (promise))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (reduce + (range 1000000000)) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (reduce + (range 100000000)) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (reduce + (range 10000000)) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(reduce + (range 10000000))" "(reduce + (range 100000))" "(reduce + (range 1000))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (Thread/sleep 200) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (Thread/sleep 2000) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (Thread/sleep 200) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(try
  (/ 1 2)
  (catch ArithmeticException e (str \"caught exception: \" (.getMessage e)))
  (finally (prn \"final exception.\")))" "(try
  (/ 1 0)
  (catch ArithmeticException e (str \"caught exception: \" (.getMessage e)))
  (finally (prn \"final exception.\")))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (Thread/sleep 200) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass-wrapper 1000 (fn [x] (Thread/sleep 2000) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass 1000 (fn [x] (Thread/sleep 2000) (inc x)))
                           }])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (xf-timeout-bypass 1000 (fn [x] (Thread/sleep 2000) (inc x)))
                           (map )}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (comp (xf-timeout-bypass 1000)
                                        (map (fn [x] (Thread/sleep 2000) (inc x))))}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (core.async/flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (comp (xf-timeout-bypass 1000)
                                        (map inc))}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(require '[clojure.core.async :as async])" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (comp (xf-timeout-bypass 1000)
                                        (map inc))}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(require '[clojure.core.async :as async])" "(in-ns 'my-test)" "(require '[clojure.core.async :as async])" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (comp (xf-timeout-bypass 1000)
                                        (map inc))}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(require '[core.async :as async])" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
                          {:xform (comp (filter odd?) (map inc)), :type :blocking}
                          {:xform (comp (map #(* % %)))}
                          {:xform (map #(/ % 4)), :type :pool}
                          {:xform (comp (xf-timeout-bypass 1000)
                                        (map inc))}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(conj [1] 2)" "xf-t" "(in-ns 'my-test)" "xf-t" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "asd" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(let [source (async/chan)
                       sink (async/chan 100)]
                   (flow source
                         sink
                         [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(detect.informer.core/format-anomaly-payload detect.informer.core-test/a)" "(-> detect.informer.core-test/a type)" "(detect.informer.core/format-anomaly-payload detect.informer.core-test/a)" "(detect.informer.core/format-anomaly-payload [detect.informer.core-test/detected-seg-job detect.informer.core-test/detected-seg-job-day-1])" "(detect.informer.core/format-anomaly-payload [detect.informer.core-test/detected-seg-job])" "(detect.informer.core/format-anomaly-payload detect.informer.core-test/detected-seg-job)" "detect.informer.core-test/detected-seg-job" "(->> detect.informer.core-test/a (map (fn [x] (map :anomalies x))))" "(->> detect.informer.core-test/a first count)" "(->> detect.informer.core-test/a first type)" "(->> detect.informer.core-test/a first keys)" "(->> detect.informer.core-test/a (map :anomalies))" "(->> detect.informer.core-test/a first)" "(->> detect.informer.core-test/a count)" "(->> detect.informer.core-test/a type)" "(->> detect.informer.core-test/a keys)" "(->> detect.informer.core-test/a (map :anomalies))" "(-> detect.informer.core-test/a first type)" "(->> detect.informer.core-test/a (map :anomalies))" "(-> detect.informer.core-test/a first)" "(-> detect.informer.core-test/a count)" "(-> detect.informer.core-test/a type)" "(let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(Thread/sleep 1000)" "(let [source (async/chan)
            sink (async/chan 100)]
        (flow source
              sink
              [{:xform (map inc), :type :compute}
               {:xform (comp (filter odd?) (map inc)), :type :blocking}
               {:xform (comp (map #(* % %)))}
               {:xform (map #(/ % 4)), :type :pool}
               {:xform (map inc), :type :timed-pool, :num-threads 2, :timeout-ms 1000}
               ;; this should timeout
               {:xform (map (fn [x] (Thread/sleep 500) (inc x))), :type :timed-pool, :timeout-ms 1}])
        (doseq [i (range 10)] (async/>!! source i))
        (async/close! source)
        (sort (async/<!! (async/into [] sink))))" "(in-ns 'core.async-test)" "(use 'core.async-test)" "(gen/generate (s/gen ::data/anomaly))" "(gen/generate (s/gen ::data/positive-double))" "(gen/generate (s/gen :data/positive-double))" "(gen/generate (s/gen :s/positive-double))" "(require '[clojure.spec.alpha :as s]
'[clojure.spec.gen.alpha :as gen]
'[detect.domain.core :as detect-domain]
'[detect.domain.data :as data]
)" "detect.alerter.web.test-data/segmentation-plan" "detect.alerter.web.test-data/retention-plan" "detect.alerter.web.test-data/segmentation-plan" "(gen/generate (s/gen ::data/anomalies))" "(gen/generate (s/gen ::data/anomaly))" "(gen/generate (s/gen ::pi))" "(s/def ::pi pos?)" "(gen/generate (s/gen ::data/anomaly))" "(gen/generate (s/gen ::data/explain))" "pos?" "(gen/generate (s/gen ::data/explain))" "double?" "(gen/generate (s/gen ::data/explain))" "(gen/generate (s/gen ::data/explains))" "(gen/generate (s/gen :data/explains))" "(s/generate (s/gen :data/explains))" "(gen/generate (s/gen ::pi))" "(s/def ::pi pos-int?)" "(gen/generate (s/gen ::pi))" "(gen/generate (s/gen :pi))" "(gen/generate (s/gen pi))" "(s/generate (s/gen pi))" "(s/def pi pos-int?)" "pos-int?" "(gen/generate (s/gen ::data/anomalies))" "(gen/generate (s/gen :data/anomalies))" "(gen/generate (s/gen ::data/explains))" "(gen/generate (s/gen ::data/anomalies))" "(gen/generate (s/gen :data/anomalies))" "(gen/generate (s/gen ::data/anomalies))" "(gen/generate (s/gen ::data/anomaly))" "(gen/generate (s/gen ::data/anomalies))" "
                    " "(gen/generate (s/gen ::data/explain))" "(gen/generate (s/gen :data/explain))" "(s/explain ::data/explain {:explain-type :anomalous-users :priority 123 :distinct-id \"a\" :unique-count 132})" "(require '[clojure.spec.alpha :as s]
'[clojure.spec.gen.alpha :as gen]
'[detect.domain.core :as detect-domain]
'[detect.domain.data :as data]
)" "(s/explain ::data/explain {:explain-type :anomalous-users :priority 123 :distinct-id \"a\" :unique-count 132})" "(s/explain ::data/explain {:explain-type :anomalous-users :distinct-id \"a\" :unique-count 132})" "(gen/generate (s/gen :data/explain))" "(gen/generate (s/gen ::data/explain))" "(require '[clojure.spec.alpha :as s]
'[clojure.spec.gen.alpha :as gen]
'[detect.domain.core :as detect-domain]
'[detect.domain.data :as data]
)" "(gen/generate (s/gen ::data/explain))" "(gen/generate (s/gen (s/or :explain.property-segments/explain
                                 :explain.anomalous-users/explain)))" "(gen/generate (s/gen :explain.property-segments/explain))" "(gen/generate (s/gen ::data/explain))" "(gen/generate (s/gen ::data/model-detail))" "(gen/generate (s/gen ::data/explains-info))" "((s/gen ::data/explains-info))" "(s/gen ::data/explains-info)" "(s/gen :data/explains-info)" "(require '[clojure.spec.alpha :as s]
'[clojure.spec.gen.alpha :as gen]
'[detect.domain.core :as detect-domain]
'[detect.domain.data :as data]
)" "(s/def ::b/a double?)" "(s/def ::a double?)" "(require '[clojure.spec.alpha :as s])" "(require '[clojure.alpha.spec :as s])" "::a/a" ":a/a" "::a" "(s/explain ::s2 {:a 1 :b 2 :c 3 :d 4 :e 5})" "(s/explain ::s2 {:a 1 :b 2})" "(s/def ::s2 (s/merge ::s1 (s/keys :req-un [::c ::d])))" "(s/def ::s2 (s/merge ::s1 (s/keys :req-un [::c :d])))" "(s/explain ::s2 {:a 1 :b 2})" "(s/explain ::s2 {:a 1})" "(s/valid? ::s2 {:a 1})" "(s/def ::s2 (s/merge ::s1 (s/keys :req-in [::c :d])))" "(s/def ::s1 (s/keys :req-un [::a ::b]))" "(s/def s1 (s/keys :req-un [::a ::b]))" "(require '[clojure.spec.alpha :as s])" "s" "(when-letk [[a b {c nil}] {:a 1 :b 2 :d 3}] [a b c])" "(when-letk [[a b c] {:a 1 :b 2 :d 3}] [a b c])" "(time (dotimes [x 10000] (test-fn2 {:x x :y 0 :a 0 :b 0 :c 0 :d 0 :e 0 :f 0 :g 0 :h 0 :i 0 :j 0 :k 0 :l 0 :m 0 :n 0 :o 0 :p 0 :q 0 :r 0 :s 0}) nil))" "(time (dotimes [x 100000] (test-fn1 x 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) nil))" "(time (dotimes [x 100000] (test-fn1 x 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) nil))" "(time (dotimes [x 100000] (test-fn1 x 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) nil))" "(time (dotimes [x 100000] (test-fn1 x 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) nil))" "(defnk test-fn2 [x y a b c d e f g h i  j k l m n o p q r] (inc x))" "(defn test-fn1 [x y a b c d e f g h i  j k l m n o p q r] (inc x))" "(defn test-fn1 [x y a b c d e f g h i  j k l m n o p q r s] (inc x))" "(time (dotimes [x 100000] (test-fn1 x 0) nil))" "(time (dotimes [x 100000] (test-fn2 {:x x :y 0}) nil))" "(defnk test-fn2 [x y] (inc x))" "(defn test-fn1 [x y] (inc x))" "(time (dotimes [x 100000] (test-fn2 {:x x}) nil))" "(time (dotimes [x 100000] (test-fn1 x) nil))" "(time (dotimes [x 10000] (test-fn2 {:x x}) nil))" "(time (dotimes [x 10000] (test-fn2 x) nil))" "(time (dotimes [x 10000] (test-fn1 x) nil))" "(defnk test-fn2 [x] (inc x))" "(defn test-fn1 [x] (inc x))" "(time (Thread/sleep 10))" "(defnk test-fn [a b] a)" "(use 'plumbing.core)" "(defnk test-fn [a b] a)" "(defn test-fn [a b] a)" "(defn test-fn [a b] x)" "(def test-fn [a b] x)" "(def test-fn [a b])" "m" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(loop [[a b] [1 2]]
        (if (zero? a) b (recur [(dec a) (inc b)])))" "(loop [[a b] [1 2]] a)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(sequence (xf-future (fn [x] (do (Thread/sleep 10000) \"processed\"))) [1])" "(sequence (xf-future (fn [x] (do (Thread/sleep 10) \"processed\"))) [1])" "(defn xf-future [f & {:keys [timeout] :or {timeout 1000}}] (map (fn [v] (deref (future (f v)) timeout v))))" "}}] (map (fn [v] (deref (future (f v)) timeout v))))" "(defn xf-future [f & {:keys [timeout] :or {timeout (* 10 1000)}}] (map (fn [v] (deref (future (f v)) timeout v))))" "(sequence (xf-future (fn [x] (do (Thread/sleep 10) \"processed\"))) [1])" "(sequence (xf-future (fn [x] (do (Thread/sleep 10) x))) [1])" "(sequence (xf-future (fn [x] (do (Thread/sleep 100000) x))) [1])" "(defn xf-future [f] (map (fn [v] (deref (future (f v)) 2000 v))))" "(prn (sequence (xf-future (fn [x] (do (Thread/sleep 10000) x))) [1]))" "(defn xf-future [f] (map (fn [v] (deref (future (f v)) 1000 v))))" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "((:ack m))" "(:ack m)" "(:message m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(:message m)" "(keys m)" "(type m)" "(def m (gcp.pubsub.core/pull (:payload-subscriber svc-graph) true))" "(org.joda.time.DateTimeZone/forID \"US/Pacific\")" "(org.joda.time.DateTimeZone/forID \"UTC\")" "(format/parse fmt \"2018-03-11 03:00:00\")" "(format/parse fmt \"2018-03-11 02:00:00\")" "(def fmt (format/with-zone (format/formatter \"YYYY-MM-dd HH:00:00\") (org.joda.time.DateTimeZone/forID \"US/Pacific\")))" "(org.joda.time.DateTimeZone/forID \"US/Pacific\")" "(def fmt (format/with-locale (format/formatter \"YYYY-MM-dd HH:00:00\") \"US/Pacific\"))" "(def fmt (format/with-zone (format/formatter \"YYYY-MM-dd HH:00:00\") \"US/Pacific\"))" "(.minusHours (clj-time-local/local-now) 33)" "(.minusHours (clj-time-local/local-now) 32)" "(.minusHours (clj-time-local/local-now) 30)" "(.minusHours (clj-time-local/local-now) 20)" "(.minusHours (clj-time-local/local-now) 10)" "(clj-time-local/local-now)" "(require '[clj-time.local :as clj-time-local])" "clj-time.local/local-now" "(clj-time.local/local-now)" "(clj-time/now)" "(now)" "(format/parse-local fmt \"2018-03-11 02:00:00\")" "(def fmt (format/formatter \"YYYY-MM-dd HH:00:00\"))" "fmt" "(format/parse-local-date fmt \"2018-03-11 02:00:00\")" "(require '[clj-time.core :as clj-time])" "dt" "(def dt (format/parse fmt \"2018-03-11 02:00:00\"))" "(format/parse fmt \"2018-03-11 02:00:00\")" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 24))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 23))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 22))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 21))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 20))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-12 00:00:00\") 10))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-11 00:00:00\") 1))" "(format/unparse fmt
                      (.minusHours (format/parse fmt \"2018-03-10 00:00:00\") 1))" "(def fmt (format/formatter \"YYYY-MM-dd HH:00:00\"))" "(require '[clj-time.format :as format])" "(first a)" "(map first a)" "(map first alerts)" "a" "(count a)" "(def a (alerts))" "(type alerts)" "(count alerts)" "(def alerts (gcp.bucket.core/batch-get-by-properties (safe-get svc-graph :alert-bucket) 300 [[\"ingested-at-ms\" <
                                                          (- (millis)
                                                             (* 30 24 60 60 1000))]]))" "(def alerts (gcp.bucket.core/batch-get-by-properties (safe-get svc-graph :alert-bucket) [[\"ingested-at-ms\" <
                                                          (- (millis)
                                                             (* 30 24 60 60 1000))]]))" "(use 'plumbing.core)" "(def alerts (gcp.bucket.core/batch-get-by-properties (safe-get svc-graph :alert-bucket) [[\"ingested-at-ms\" <
                                                          (- (millis)
                                                             (* days-to-keep-alerts 24 60 60 1000))]]))" "(util/parallel-run xf-test k)" "(util/parallel-run xf-test (take 1000 k))" "(util/parallel-run xf-test (take 3 k))" "(util/parallel-run xf-test (take 1 k))" "(def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          (keep (fn [p-id]
                 (when-let [hasit? (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                    (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))]
                   (prn p-id)
                   {:project-id p-id
                    :hasit? hasit?})))))" "(util/parallel-run xf-test (take 1 k))" "(def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          (map (fn [p-id]
                 (when-let [hasit? (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                    (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))]
                   (prn p-id)
                   {:project-id p-id
                    :hasit? hasit?})))))" "(util/parallel-run xf-test (take 3 k))" "(def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          #_(map (fn [p-id]
                 (when-let [hasit? (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                    (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))]
                   (prn p-id)
                   {:project-id p-id
                    :hasit? hasit?})))))" "(util/parallel-run xf-test (take 3 k))" "(def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          (map (fn [p-id]
                 (when-let [hasit? (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                    (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))]
                   (prn p-id)
                   {:project-id p-id
                    :hasit? hasit?})))))" "(def k (bucket/keys *pb*))" "(in-ns 'detect.explainer.env)" "(def res (util/parallel-run xf-test (take 10000 k)))" "(sequence xf-test (take 10 k))" "  (def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          (map (fn [p-id]
                 (when-let [hasit? (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                    (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))]
                   (prn p-id)
                   {:project-id p-id
                    :hasit? hasit?})))))
" "(sequence xf-test (take 10 k))" "(def xf-test
    (comp (map (fn [k] (-> k (clojure.string/split #\"/\") second Integer/parseInt)))
          (map (fn [p-id]
                 (when-let [res (some true? (map #(string/includes? (string/lower-case %) \"weekday\")
                                                 (keys (detect.explainer.properties/load-event-properties-map *pb* p-id))))])
                 (prn p-id)
                 {:project-id p-id
                  :hasit? res}))))" "(some true? [])" "(some true? (map #(string/includes? (string/lower-case %) \"weekday\") (keys res))) " "(some true? (map #(string/includes? (string/lower-case %)\"weekday\") (keys res))) " "(any? true true)" "(apply or [1 2 3])" "(or 1 2)" "or" "(apply or [1 2 3])" "(apply or (map #(string/includes? (string/lower-case %)\"weekday\") (keys res))) " "(map #(string/includes? (string/lower-case %)\"weekday\") (keys res)) " "(-> res keys)" "(def res (detect.explainer.properties/load-event-properties-map *pb* 3))" "res" "(-> res keys)" "(type res)" "(def res (detect.explainer.properties/load-event-properties-map *pb* 1000))" "(def res (detect.explainer.properties *pb* 1000))" "(-> k first (clojure.string/split #\"/\") second Integer/parseInt)" "(-> k first (clojure.string/split #\"/\") second java.lang.Integer/ParseInt)" "(-> k first (clojure.string/split #\"/\") second java.lang.Integer/PartseInt)" "(-> k first (clojure.string/split #\"/\") second int)" "(-> k first (clojure.string/split #\"/\") second)" "(-> k first (clojure.string/split #\"/\"))" "(-> k first (clojure.string/split \"/\"))" "(take 10 k)" "(count k)" "(def k (bucket/keys *pb*))" "(in-ns 'detect.explainer.env)" "(clojure.string/join \"_\" 1 2 3)" "(clojure.string/join \"_\" 1 2 )" "(filter (fn [x] x) (set [1 2 3]))" "(format \"%s_%s\" 1 \"qwe\")" "(format \"{}\" 1)" "java.io.Var" "(binding [clojure.core/*loading-verbosely* true]
                        (compile 'detect.explainer.env))" "(binding [*loading-verbosely* true]
                        (compile 'detect.explainer.env))" "(root-resource 'detect.explainer.env)" "(compile 'detect.explainer.env)" "(deref f 120000 :test)" "(deref f 1000 :test)" "(def f (future (Thread/sleep 120000) (println \"done2\") 100))" "(def f (future (Thread/sleep 120000) (println \"done\") 100))" "(.get f 1 java.util.concurrent.TimeUnit/SECONDS)" "(def f (future (Thread/sleep 120000) (println \"done\") 100))" "(.get f)" "(java.util.concurrent.Future/get f)" "(get f)" "(realized? f)" "f" "(def f (future (Thread/sleep 120000) (println \"done\") 100))" "(def r (sequence xf1 [msg]))" "\"\\\\\"" "(def r (sequence xf1 [msg]))" "(def msg {:message {:report {:project-id 163820, :events [\"Open Notifications\" \"$custom_event:830669\"], :report-type :funnel, :report-detail {:funnel-id 3270085, :window-days 29}, :event-display-names [\"Open Notifications\" \"Posted Comment\"], :original-events [\"Created Announcement Comment\" \"Created Comment Reply\" \"Created Discussion Comment\" \"Created Project Comment\"]}
                                          :user-infos [{:user-id 596639,
                                                        :report-id 3270085,
                                                        :report-name \"9.  Overall Mixpanel Funnel\"
                                                        :is-on-user-dashboard? :true,
                                                        :is-user-favorite? true}]}})
" "(def msg {:message {:report {:project-id 163820, :events [\"Open Notifications\" \"$custom_event:830669\"], :report-type :funnel, :report-detail {:funnel-id 3270085, :window-days 29}, :event-display-names (\"Open Notifications\" \"Posted Comment\"), :original-events (\"Created Announcement Comment\" \"Created Comment Reply\" \"Created Discussion Comment\" \"Created Project Comment\")}
                                          :user-infos [{:user-id 596639,
                                                        :report-id 3270085,
                                                        :report-name \"9.  Overall Mixpanel Funnel\"
                                                        :is-on-user-dashboard? :true,
                                                        :is-user-favorite? true}]}})
" "(def msg {:message {:report {:project-id 163820, :events (\"Open Notifications\" \"$custom_event:830669\"), :report-type :funnel, :report-detail {:funnel-id 3270085, :window-days 29}, :event-display-names (\"Open Notifications\" \"Posted Comment\"), :original-events (\"Created Announcement Comment\" \"Created Comment Reply\" \"Created Discussion Comment\" \"Created Project Comment\")}
                                          :user-infos [{:user-id 596639,
                                                        :report-id 3270085,
                                                        :report-name \"9.  Overall Mixpanel Funnel\"
                                                        :is-on-user-dashboard? :true,
                                                        :is-user-favorite? true}]}})
" "(def r (sequence xf1 [msg]))" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}
                                          :user-infos [{:user-id 596639,
                                                        :report-id 3251281,
                                                        :report-name \"9.  Overall Mixpanel Funnel\"
                                                        :is-on-user-dashboard? :true,
                                                        :is-user-favorite? true}]}})
" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}
                                          :user-infos [{:user-id 596639,
                                                        :report-id 3251281,
                                                        :report-name \"9.  Overall Mixpanel Funnel\"
                                                        :is-on-user-dashboard?:true,
                                                        :is-user-favorite? true}]}})
" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}    :user-infos [{:user-id 596639,
                                                                                                                                                                                                                                                                               :report-id 3251281
                 :report-name \"9.  Overall Mixpanel Funnel\"
                 :is-on-user-dashboard?:true,
                                                                                                                                                                                                                                                                               :is-user-favorite? true}]}})
" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}    :user-infos [{:user-id 596639,
                 :report-id 3251281
                 :report-name \"9.  Overall Mixpanel Funnel\"
                 :is-on-user-dashboard?:true,
                                                                                                                                                                                                                                                                               :is-user-favorite? true}]}})
" "(def r (sequence xf1 [msg]))" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}    :user-infos [{:user-id 596639,
                 :report-id:2312548
                 :report-name \"9.  Overall Mixpanel Funnel\"
                 :is-on-user-dashboard?:true,
                                                                                                                                                                                                                                                                               :is-user-favorite? true}]}})
" "(def r (sequence xf1 [msg]))" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}} :user-infos []}})
" "(def r (sequence xf1 [msg]))" "  (def xf1 (comp
            (map (fnk [[:message :as worker-task]]
                   (letk [[[:report project-id]] worker-task]
                     {:task worker-task
                      :event->best-properties-and-details (or (contour.worker.core/get-event->best-properties-and-details
                                                               *pb*
                                                               project-id)
                                                              (prn \"No properties found for %d\" project-id))})))
            (map (fnk [event->best-properties-and-details [:task report :as task]]
                   (let [report (assoc-when report
                                            :report-detail (contour.worker.querier/task->report-detail task))
                         queried-segments (->> (contour.worker.querier/report->maybe-queried-segments
                                                *pac*
                                                report
                                                event->best-properties-and-details)
                                               (filter seq))]
                     queried-segments)))))" "  (def xf1 (comp
            (map (fnk [[:message :as worker-task]]
                   (letk [[[:report project-id]] worker-task]
                     {:task worker-task
                      :event->best-properties-and-details (or (contour.worker.core/get-event->best-properties-and-details
                                                               *pb*
                                                               project-id)
                                                              (prn \"No properties found for %d\" project-id))})))
            (map (fnk [event->best-properties-and-details [:task report :as task]]
                   (let [report (assoc-when report
                                            :report-detail (contour.worker.querier/task->report-detail task))
                         queried-segments (->> (contour.worker.querier/report->maybe-queried-segments
                                                (safe-get svc-graph :public-api-client)
                                                report
                                                event->best-properties-and-details)
                                               (filter seq))]
                     queried-segments)))))" "  (def xf1 (comp
            (map (fnk [[:message :as worker-task]]
                   (letk [[[:report project-id]] worker-task]
                     {:task worker-task
                      :event->best-properties-and-details (or (contour.worker.core/get-event->best-properties-and-details
                                                               *pb*
                                                               project-id)
                                                              (prn \"No properties found for %d\" project-id))})))
            (map (fnk [event->best-properties-and-details [:task report :as task]]
                   (let [report (assoc-when report
                                            :report-detail (querier/task->report-detail task))
                         queried-segments (->> (querier/report->maybe-queried-segments
                                                (safe-get svc-graph :public-api-client)
                                                report
                                                event->best-properties-and-details)
                                               (filter seq))]
                     queried-segments)))))" "  (def xf1 (comp
            (map (fnk [[:message :as worker-task]]
                   (letk [[[:report project-id]] worker-task]
                     {:task worker-task
                      :event->best-properties-and-details (or (contour.worker.core/get-event->best-properties-and-details
                                                               properties-bucket
                                                               project-id)
                                                              (prn \"No properties found for %d\" project-id))})))
            (map (fnk [event->best-properties-and-details [:task report :as task]]
                   (let [report (assoc-when report
                                            :report-detail (querier/task->report-detail task))
                         queried-segments (->> (querier/report->maybe-queried-segments
                                                (safe-get svc-graph :public-api-client)
                                                report
                                                event->best-properties-and-details)
                                               (filter seq))]
                     queried-segments)))))" "(def msg {:message {:report {:project-id 1108868, :events [\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"], :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}}})
" "(def msg {:message {:report {:project-id 1108868, :events (\"App Open\" \"Grownups Gate Verification\" \"User Registration\" \"Free Trial Initiated\" \"Subscribe\"), :report-type :funnel, :report-detail {:funnel-id 3251281, :window-days 28}}}})
" "prs" "(def prs (contour.domain.data/get-properties-data *pb* 1108868))" "(in-ns 'detect.explainer.env)" "(map-indexed (fn [idx x] {:idx idx :x x :id (core.util/generate-UUID)}) [1 2 3])" "(map (fn [x] {:x x :id (core.util/generate-UUID)}) [1 2 3])" "(prn (i/dataset [:anomaly-id,
                                                :anomaly-details-id,
                                                :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2)
                                    \"20180227_insights_1w.csv\")" "(dataset/save (i/dataset [:anomaly-id,
                                                :anomaly-details-id,
                                                :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2)
                                    \"20180227_insights_1w.csv\")" "(count res2)" "(def res2 (apply concat res1))" "(first res1)" "(count res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                         (explainer/xf--bind-properties *ac* *pb*)
                                                         (explainer/xf--bind-timezone *ac*)
                                                         (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                         (explainer/xf--explains))
                                                   ids))" "(def res0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--explains))
                                          [(second ids)]))" "(count res0)" "(def res0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--explains))
                                          ids))" "(def ids (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle da))))" "(first res0)" "(def res0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--explains))
                                          [(first ids)]))" "res0" "(def res0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--explains))
                                          [(first ids)]))" "(first res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                         (explainer/xf--bind-properties *ac* *pb*)
                                                         (explainer/xf--bind-timezone *ac*)
                                                         (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                         (explainer/xf--explains))
                                                   ids))" "(def ids (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 5 (shuffle da))))" "(def ids (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 20 (shuffle da))))" "(second res1)" "(first res2)" "(first res1)" "(count res2)" "(def res2 (apply concat res1))" "(count res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 20 (shuffle da)))))" "(count res2)" "(def res2 (apply concat res1))" "(count res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle da)))))" "
" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle da)))))" "(-> res1 count)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 10 (shuffle da)))))" "(first res2)" "(dataset/save (i/dataset [:anomaly-id,
                                                :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2)
                                    \"20180227_insights_1w.csv\")" "(type (i/dataset [:anomaly-id,
                                                                           :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2))" "(dataset/save \"20180227_insights_1w.csv\" (i/dataset [:anomaly-id,
                                                                           :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2))" "(prn (i/dataset [:anomaly-id,
                                       :property,
                                       :n,
                                       :property-value,
                                       :k,
                                       :exp-n,
                                       :g,
                                       :score,
                                       :R>g,
                                       :b,
                                       :exp-k,
                                       :p,
                                       :p-val] res2))" "(i/dataset [:anomaly-id,
                                  :property,
                                  :n,
                                  :property-value,
                                  :k,
                                  :exp-n,
                                  :g,
                                  :score,
                                  :R>g,
                                  :b,
                                  :exp-k,
                                  :p,
                                  :p-val] res2)" "(apply i/map->Dataset res2)" "(i/map->Dataset res2)" "res2" "(i/map->Dataset res2)" "(prn (i/map->Dataset res2))" "(prn (i/map->dataset res2))" "(first res2)" "(i/dataset res2)" "(prn (i/dataset res2))" "(i/dataset res2)" "(i/->Dataset res2)" "(->> (map count res1) (map #(if (= % 0) 1 0)) (apply +))" "(->> (map count res1) (map #(if (= % 0) 1 0)))" "(map count res1)" "(-> res1 second)" "(-> res2 count)" "(-> res1 second count)" "(-> res1 first count)" "(count res2)" "(def res2 (apply concat res1))" "(first res1)" "(count res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle da)))))" "res1" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 1 (shuffle da)))))" "(first da)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (take 1 (shuffle da))))" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   (take 100 (shuffle da))))" "(first da)" "(def da (jql/detected-anomalies *pac* \"2018-02-20\" \"2018-02-26\"))" "(-> res1 first)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first vals first detect.explainer.model/filter-explains)" "(-> res1 first vals first model/filter-explains)" "(-> res1 first vals first)" "(-> res1 first vals first filter-explains)" "(-> res1 first vals )" "(-> res1 first count)" "(-> res1 first)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "res1" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first count)" "(-> res1 first first)" "(-> res1 first type)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(in-ns 'detect.explainer.env)" "asd" "qwe" "asd" "res1" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first first)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first first)" "(-> res1 first first first)" "(-> res1 first first count)" "(-> res1 first first type)" "(-> res1 first count)" "(-> res1 first type)" "(count res1)" "(type res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first type)" "(type res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(type res1)" "(first res1)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (explainer/xf--explains))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(def da (jql/detected-anomalies *pac* \"2018-02-20\" \"2018-02-26\"))" "(conj {})" "(apply max-key :score [])" "(apply max-key :score [{:score 1} {:score 2}])" "(max-key :score [{:score 1} {:score 2}])" "(max-key :score {:score 1} {:score 2})" "(apply max-key :score {:score 1} {:score 2})" "(conj [:b] :a :c)" "(conj [:b] :a)" "(conj [] :a)" "(conj :a [])" "(or false nil false)" "(#{\"1\" \"2\"} \"123\")" "(s/valid? ::person {:first-name \"a\" :last-name \"b\" :email \"e\" :a \"a\"})" "(s/valid? ::person {:first-name \"a\" :last-name \"b\" :email \"e\"})" "(s/def ::person (s/keys :req-un [::first-name ::last-name ::email]
                        :opt-un [::phone]))" "(s/def ::person (s/keys :req [::first-name ::last-name ::email]
                        :opt [::phone]))" "(require '[clojure.spec.alpha :as s])" "(require '[clojure.alpha.spec :as s])" "(s/def ::person (s/keys :req [::first-name ::last-name ::email]
                        :opt [::phone]))" "(i/rename-cols {:a :r} (i/dataset [:a :b] [{:a 1 :b 2} {:a \\a :b \\b}]))" "(i/dataset [:a :b] [{:a 1 :b 2} {:a \\a :b \\b}])" "(max-key :a {:a 1} {:a 2} {})" "(max-key :a {:a 1} {:a 2})" "(first [])" "(apply max [[1 2] [3 4] [1 4] [1 1]])" "(max [[1 2] [3 4] [1 4] [1 1]])" "(sort [[1 2] [3 4] [1 4] [1 1]])" "(sort [[1 2] [3 4] [1 4]])" "(sort [[1 2] [3 4]])" "(Character/isLetter \\=)" "(Character/isLetter \\')" "(Character/isLetter \\-)" "(Character/isLetter \\a)" "(first \"asd\")" "(Character/isLetter ^char \\a)" "(Character/isLetter ^char c)" "(clojure.Character/isLetter \"a\")" "(Character/isLetter \"a\")" "(-> res1 first :rows first type)" "(-> res1 first :rows type)" "(-> res1 first :rows)" "res1" "(remove #(or (nil? %)
                                   (#{\"\" \"null\" \"not set\"} (string/lower-case %)))
                              [\"qwe\" \"qe\"])" "(remove #(or (nil? %)
                                   #_({\"\" \"null\" \"not set\"} (string/lower-case %)))
                              [\"qwe\" \"qe\"])" "(remove #(or (nil? %)
                                                                       ({\"\" \"null\" \"not set\"} (string/lower-case %)))
                              [\"qwe\" \"qe\"])" "(-> res1 first prn)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(clojure.string/includes? \"qwe\" nil)" "(-> res1 first prn)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                   [\"7a982105-1110-46fd-8a49-5ce56af61c7a\"]))" "(-> res1 first prn)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(-> res1 first)" "(-> res1 first prn)" "(-> res1 first i/nrow)" "(-> res1 first type)" "(def res1 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                   [\"3ccd3b55-f3a1-482c-ac69-b830b88d307e\"]))" "(dataset/save tds \"20180226_tmp.csv\")" "(i/save tds \"20180226_tmp.csv\")" "(i/save \"20180226_tmp.csv\" tds)" "(-> (i/head 10 tds) prn)" "(i/nrow tds)" "(def tds (apply dataset/safely-conj-rows res))" "(-> res type)" "(count res)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                              (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle da)))))" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                              (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 1000 (shuffle da)))))" "(first da)" "(count da)" "(def da (jql/detected-anomalies *pac* \"2018-02-22\" \"2018-02-28\"))" "(count da)" "da" "(def da (jql/detected-anomalies *pac* \"2018-02-20\" \"2018-02-27\"))" "(def da (jql/detected-anomalies *pac* \"2018-02-10\" \"2018-02-16\"))" "(def da (jql/detected-anomalies *pac* \"2018-02-20\" \"2018-02-27\"))" "(def da (jql/detected-anomalies *pac* \"2018-02-21\" \"2018-02-28\"))" "da" "(count da)" "(def da (jql/detected-anomalies *pac* \"2018-02-21\" \"2018-02-28\"))" "(in-ns 'detect.explainer.env)" "(def da (jql/detected-anomalies *pac* \"2018-02-21\" \"2018-02-28\"))" "(def res0 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    )
                                                   [\"002355cb-df68-46c8-b5c7-1569793b8bb0\" \"24089495-aa7e-4bcc-b6b9-f66f7f2b9424\"]))" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                  (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 1000 (shuffle x)))))" "res" "(def res (public/get-jql-results *pac* jql/jql-body--insights 620015 {:from_date \"2017-11-07\" :to_date \"2017-11-08\" :event_selectors [{:event \"public account\" :selector \"\\\"follow public account\\\" in properties[\\\"action\\\"]\"}]
                                                                                            :time_unit \"day\" :count_type \"total\"}))" "(-> res first :detected-jobs)" "(-> res first keys)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)) [\"199d8d67-5db8-4c39-b2b3-548e12106b23\"]))" "(in-ns 'detect.explainer.env)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                  (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 1000 (shuffle x)))))" "(count x)" "(dataset/save (->> (apply dataset/safely-conj-rows res)
                                           (i/add-derived-column :customer [:project-id] jql/project-id->customer)
                                           (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id)) \"20180215_viber.csv\")" "(count res)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                  (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x)))))" "(count x)" "(def x (filter #((set detect.explainer.jql/benchmark-viper) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(dataset/save (->> (apply dataset/safely-conj-rows res)
                                           (i/add-derived-column :customer [:project-id] jql/project-id->customer)
                                           (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id)) \"20180215_zepto.csv\")" "(def tds-total3 (->> (apply dataset/safely-conj-rows res)
                                           (i/add-derived-column :customer [:project-id] jql/project-id->customer)
                                           (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id)))" "(count x)" "(count res)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                                  (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) x)))" "(count x)" "(def x (filter #((set detect.explainer.jql/benchmark-zepto) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(def da (jql/detected-anomalies *pac* \"2018-01-15\" \"2018-02-15\"))" "(/ (double 1645.0) (double 0.05))" "(/ (double 32900) 20)" "(/ (double 32900) (double 0.05))" "(double 32900)" "(double 32899.99951)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                                         [\"075a02b3-5d98-41f6-b678-4c72f55499dc\"]))" ";\"\"\"
]

" "(dataset/save tds-total2 \"20180214_benchmark4.csv\")" "(def tds-total2 (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id tds-total2))" "(def tds-total2 (i/add-derived-column :customer [:project-id] jql/project-id->customer tds-total))" "(-> tmp first :detected-jobs count)" "(-> tmp first :detected-jobs first :anomalies)" "(->> tmp first :detected-jobs first :queried-job :query :query-specs)" "(->> tmp first :detected-jobs first :queried-job :query :dates)" "(->> tmp first :detected-jobs first :queried-job :query keys)" "(->> tmp first :detected-jobs first :queried-job keys)" "(->> tmp first :detected-jobs first :queried-job :uncorrected-timeseries (take-last 100))" "(->> tmp first :detected-jobs first :queried-job :uncorrected-timeseries (take-last 20))" "(->> tmp first :detected-jobs first :queried-job :timeseries (take-last 20))" "(-> tmp first :detected-jobs first :queried-job :timeseries)" "(-> tmp first :detected-jobs first :queried-job keys)" "(-> tmp first :detected-jobs first :query)" "(-> tmp first :detected-jobs first keys)" "(-> tmp first :detected-jobs first :anomalies)" "(-> tmp first :detected-jobs first keys)" "tmp" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               #_(explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                         [\"9221c834-8f6b-4f6d-9d53-579ba4cd0ff9\"]))" "(dataset/save tds-total2 \"20180214_benchmark3.csv\")" "(def tds-total2 (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id tds-total2))" "(count anomaly-id->alert-id)" "(def anomaly-id->alert-id (json/read-str (slurp \"20180213_anomaly2alert.json\")))" "(def tds-total2 (i/add-derived-column :customer [:project-id] jql/project-id->customer tds-total))" "(i/nrow tds-total)" "(def tds-total (dataset/safely-conj-rows tds0 tds1 tds2))" "(clojure.string/join \", \" (map str jql/all-benchmark-projects))" "(map str jql/all-benchmark-projects)" "(prn jql/all-benchmark-projects)" "jql/all-benchmark-projects" "(->> tmp first :detected-jobs first :queried-job :query)" "(->> tmp first :detected-jobs first :queried-job query)" "(->> tmp first :detected-jobs first :queried-job keys)" "(->> tmp first :detected-jobs first :queried-jobs keys)" "(->> tmp first :detected-jobs first :anomalies)" "(->> tmp first :detected-jobs first keys)" "(->> tmp first :detected-jobs count)" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               #_(explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                         [\"4e409cb7-4e25-4754-8213-fb5d0e787bba\"]))" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                         [\"4e409cb7-4e25-4754-8213-fb5d0e787bba\"]))" "(-> tmp first :detected-jobs
                          first
                          (safe-get-in [:queried-job :timeseries])
                          count)" "(-> tmp first keys)" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                          [\"dc2767ec-b7fe-4e01-84d8-3dac7a2e2afa\"]))" "(->> tmp first :detected-jobs first :queried-job keys)" "(->> tmp first :detected-jobs first :queried-job)" "(->> tmp first :detected-jobs first :query)" "(->> tmp first :detected-jobs first :query keys)" "(->> tmp first :detected-jobs first keys)" "(->> tmp first :detected-jobs first type)" "(->> tmp first :detected-jobs keys)" "(->> tmp first keys)" "(->> tmp first :segmented-queried-jobs vals first vals first first :timeseries count)" "(->> tmp first :segmented-queried-jobs vals first vals first first :timeseries)" "(->> tmp first :segmented-queried-jobs vals first vals first first keys)" "(->> tmp first :segmented-queried-jobs vals first vals first first type)" "(->> tmp first :segmented-queried-jobs vals first vals first type)" "(->> tmp first :segmented-queried-jobs vals first vals type)" "(->> tmp first :segmented-queried-jobs vals first vals first type)" "(->> tmp first :segmented-queried-jobs vals first keys)" "(->> tmp first :segmented-queried-jobs vals first type)" "(->> tmp first :segmented-queried-jobs vals (map #(count (keys %))))" "(->> tmp first :segmented-queried-jobs vals (map keys))" "(->> tmp first :segmented-queried-jobs keys)" "(->> tmp first :segmented-queried-jobs type)" "(->> tmp :segmented-queried-jobs type)" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                          [\"dc2767ec-b7fe-4e01-84d8-3dac7a2e2afa\"]))" "(def tmp (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                          [\"0033353f-5eb2-4599-b966-70278db0deff\" \"dc2767ec-b7fe-4e01-84d8-3dac7a2e2afa\"]))" "(def tmp0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           
                           ) [\"0033353f-5eb2-4599-b966-70278db0deff\" \"dc2767ec-b7fe-4e01-84d8-3dac7a2e2afa\"]))" "(def tmp0 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--span-detected-jobs)
                           (explainer/xf--score-ds)
                           ) [\"0033353f-5eb2-4599-b966-70278db0deff\" \"dc2767ec-b7fe-4e01-84d8-3dac7a2e2afa\"]))" "(dataset/save tds-total2 \"20180214_benchmark2.csv\")" "(i/$ [387] :all tds-total2)" "(i/$ [388] :all tds-total2)" "(i/$ [389] :all tds-total2)" "(i/$ [77] :all tds-total2)" "(i/save tds-total2 \"20180214_benchmark.csv\")" "(->> tds-total2 (i/head 10) prn)" "(->> tds-total2 (head 10) prn)" "(anomaly-id->alert-id \"dec84609-1d56-4b61-8682-bff56581ebbb\")" "(def tds-total2 (i/add-derived-column :alert-id [:anomaly-details-id] anomaly-id->alert-id tds-total2))" "(first anomaly-id->alert-id)" "(->> tds-total2 (i/$ :alert-id) distinct (take 10))" "(->> tds-total2 (i/$ :alert-id) distinct take 10)" "(->> tds-total2 (i/$ :alert-id) count)" "(->> tds-total2 (i/$ :alert-id) type)" "(->> tds-total2 ($ :alert-id) type)" "(->> tds-total2 (i/head 100) prn)" "(anomaly-id->alert-id \"dec84609-1d56-4b61-8682-bff56581ebbb\")" "(->> tds-total2 (i/head 10) prn)" "(def tds-total2 (i/add-derived-column :alert-id [:anomaly-id] anomaly-id->alert-id tds-total2))" "(i/col-names tds-total2)" "(first anomaly-id->alert-id)" "(def anomaly-id->alert-id (json/read-str (slurp \"20180213_anomaly2alert.json\")))" "(def tds-total2 (i/add-derived-column :customer [:project-id] jql/project-id->customer tds-total))" "(i/nrow tds-total)" "(def tds-total (dataset/safely-conj-rows tds0 tds1 tds2))" "(i/nrow tds2)" "(def tds2 (apply dataset/safely-conj-rows (drop 600 res)))" "(i/nrow tds2)" "(def tds2 (apply dataset/safely-conj-rows (take 300 (drop 600 res))))" "(i/nrow tds1)" "(def tds1 (apply dataset/safely-conj-rows (take 300 (drop 300 res))))" "(last 10 (range 20))" "(i/nrow tds0)" "(def tds0 (apply dataset/safely-conj-rows (take 300 res)))" "(i/nrow tds0)" "(def tds0 (apply dataset/safely-conj-rows res))" "(i/nrow tds0)" "(def tds0 (apply dataset/safely-conj-rows (take 200 res)))" "(def tds0 (apply dataset/safely-conj-rows (take 100 res)))" "(def tds0 (apply dataset/safely-conj-rows (take 10 res)))" "(apply dataset/safely-conj-rows (take 10 res))" "(count res)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                    (explainer/xf--bind-properties *ac* *pb*)
                                    (explainer/xf--bind-timezone *ac*)
                                    (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                    (stationary/xf--score-ds))
                              (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 1000 (shuffle x)))))" "(->> tds2 (i/head 10) prn)" "(def tds2 (i/add-derived-column :customer [:project-id] jql/project-id->customer tds))" "(->> tds2 (i/head 10) prn)" "(def tds2 (i/add-derived-column :customer [:prject-id] jql/project-id->customer tds))" "(->> tds2 (i/head 10) prn)" "(def tds2 (i/add-derived-column :customer [:prject-id] jql/project-id->customer))" "(->> tds (i/head 10) prn)" "(jql/project-id->customer 700957)" "(-> anomaly-id first)" "(-> alert-id first)" "(-> alert-id keys)" "(-> anomaly-id keys)" "(def anomaly-id (json/read-str (slurp \"resources/anomaly_id.json\")))" "(-> alert-id keys)" "(type alert-id)" "(def alert-id (json/read-str (slurp \"resources/alert_id.json\")))" "(def alert-id (json/read-str (slurp \"alert_id.json\")))" "(incanter.core/save tds \"test.csv\")" "(incanter.core/save tds \"test.dat\")" "(incanter.core/save tds \"test.csv\")" "(incanter.core/save \"test.csv\" tds)" "(incanter/save \"test.csv\" tds)" "(i/nrow tds)" "(inrow tds)" "(def tds (apply dataset/safely-conj-rows res))" "(->> res (map i/nrow))" "(->> res first type)" "(->> res (remove nil?) count)" "(count res)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                               (explainer/xf--bind-properties *ac* *pb*)
                                                               (explainer/xf--bind-timezone *ac*)
                                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                               (stationary/xf--score-ds))
                                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x)))))" "(first x)" "(def x (filter #((set jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(count da)" "(first x)" "(def x (filter #((set jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_idb\"])) da))" "(set jql/all-benchmark-projects)" "(Set jql/all-benchmark-projects)" "jql/all-benchmark-projects" "#(jql/all-benchmark-projects)" "#(all-benchmark-projects)" "(all-benchmark-projects)" "(first da)" "(first x)" "(map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x)))" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                               (explainer/xf--bind-properties *ac* *pb*)
                                                               (explainer/xf--bind-timezone *ac*)
                                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                               (stationary/xf--score-ds))
                                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x)))))" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_idb\"])) da))" "(def da (jql/detected-anomalies *pac* \"2018-01-12\" \"2018-02-12\"))" "(in-ns 'detect.explainer.env)" "(def res (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                               (explainer/xf--bind-properties *ac* *pb*)
                                                               (explainer/xf--bind-timezone *ac*)
                                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                               (stationary/xf--score-ds))
                                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x)))))" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_idb\"])) da))" "(def res-go-jek (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                               (explainer/xf--bind-properties *ac* *pb*)
                                                               (explainer/xf--bind-timezone *ac*)
                                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                               (stationary/xf--score-ds))
                                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) (take 100 (shuffle x-go-jek)))))" "(->> res-go-jek first i/nrow)" "(->> res-go-jek first i/nrows)" "(->> res-go-jek first (i/head 10) prn)" "(->> res-go-jek first (incanter/head 10) prn)" "(-> res-go-jek first)" "(-> res-go-jek type)" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      (stationary/xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(nth x-go-jek 4)])))" "(-> res-go-jek first :segmented-queried-jobs keys)" "(-> res-go-jek first keys)" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      #_(xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(nth x-go-jek 4)])))" "(case a
                        \"test\" 1
                        :else)" "(def a \"test\")" "(try (throw (RuntimeException. \"test\"))
                           (catch RuntimeException e
                             (prn (type e))
                             (prn (.getMessage e))))" "(try (throw (RuntimeException. \"test\"))
                           (catch RuntimeException e
                             (prn (type e))))" "(try (throw (RuntimeException. \"test\"))
                           (catch RuntimeException e
                             (prn e)))" "(throw (RuntimeException. \"test\"))" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      #_(xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(nth x-go-jek 4)])))" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      #_(xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(nth x-go-jek 3)])))" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      #_(xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(second x-go-jek)])))" "(def res-go-jek (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                      (explainer/xf--bind-properties *ac* *pb*)
                                                      (explainer/xf--bind-timezone *ac*)
                                                      (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                      #_(xf--score-ds))
                                                (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x-go-jek)])))" "(count x-go-jek)" "(def x-go-jek (filter #((set detect.explainer.jql/benchmark-go-jek) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(def x-go-jek (filter #((set detect.explainer.jql/go-jek) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(def x-go-jek (filter #((set detect.explainer.jql/go-jeck) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(first da)" "(def da (jql/detected-anomalies *pac* \"2018-01-12\" \"2018-02-12\"))" "(in-ns 'detect.explainer.env)" "(pos? (i/nrow nil))" "(i/nrow nil)" "(mp-client.slack/text-with-link \"qwe\" nil)" "(mp-client.slack/text-with-link)" "(tmpfn nil)" "(tmpfn \"asd\")" "(defn tmpfn [^java.lang.String x] (prn x))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adbs*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 #_(explainer/xf--bind-timezone *ac*)
                                                 #_(explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"8d15087a-a9e8-47d7-ad15-b0e7a65cf56e\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adbs*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"8d15087a-a9e8-47d7-ad15-b0e7a65cf56e\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"8d15087a-a9e8-47d7-ad15-b0e7a65cf56e\"]))" "(clj-time/after? (clj-time-utils/formatted-date->datetime \"2018-02-10\" \"US/Pacific\")
                                       (clj-time/now))" "(clj-time/now)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"1296300f-a3d7-4398-b2cd-8a2e5dba42d6\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"b656d14a-2ea2-4936-b306-9a361492319c\"]))" "  res" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"368dedb4-63d2-4a26-a4f9-9acbc659a151\"]))" "(i/$order :R :desc nil)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"368dedb4-63d2-4a26-a4f9-9acbc659a151\"]))" "(not-empty nil)" "(empty? (i/dataset [] []))" "(i/dataset [] [])" "(i/dataset)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"368dedb4-63d2-4a26-a4f9-9acbc659a151\"]))" "(->> res first :segmented-queried-jobs keys)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"368dedb4-63d2-4a26-a4f9-9acbc659a151\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"368dedb4-63d2-4a26-a4f9-9acbc659a151\"]))" "(->> res first :segmented-queried-jobs next next first val keys)" "(->> res first :segmented-queried-jobs second val keys)" "(->> res first :segmented-queried-jobs first val keys)" "(->> res first :segmented-queried-jobs first val type)" "(->> res first :segmented-queried-jobs first key)" "(->> res first :segmented-queried-jobs keys)" "(-> res first :segmented-queried-jobs keys)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "@tt" "tt" "(reset! tt 1)" "(clojure.set/difference (set [1 2 3]) (set [2 3 4]))" "(clojure.set/difference (set [1 2 3]) (set [2 3]))" "(clojure.set/difference (set [1 2 3]))" "(difference (set [1 2 3]))" "(set [1 2 3])" "(set! tt 1)" "(def tt (atom 0))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "(in-ns 'detect.explainer.env)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 #_(explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "(-> res first :detected-jobs first :anomalies)" "(-> res first :detected-jobs first :queried-job :query)" "(-> res first :detected-jobs first :queried-job keys)" "(-> res first :detected-jobs first :queried-job :timeseries count)" "(-> res first :detected-jobs type)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 #_(explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "(-> res first :detected-jobs first :queried-job :query)" "(-> res first :detected-jobs first :queried-job :timeseries count)" "(-> res first :detected-jobs first :queried-job :timeseries type)" "(-> res first :detected-jobs first :queried-job keys)" "(-> res first :detected-jobs first :anomalies)" "(-> res first :detected-jobs first keys)" "(-> res first :detected-jobs first type)" "(-> res first :detected-jobs type)" "  (-> res first keys)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"cd1cb342-d31f-4609-981d-0cbdb934f9b5\"]))" "(def res2 (sequence (comp 
                                           (explainer/xf--explain! nil)) 
                                          res))" "res2" "(def res2 (sequence (comp 
                                           (explainer/xf--explain! nil)) 
                                          res))" "(-> res first :segmented-queried-jobs first val first val first)" "(-> res first :segmented-queried-jobs first val first val type)" "(-> res first :segmented-queried-jobs first val first type)" "(-> res first :segmented-queried-jobs first val first val keys)" "(-> res first :segmented-queried-jobs first val keys)" "(-> res first :segmented-queried-jobs first val type)" "(-> res first :segmented-queried-jobs keys)" "  (-> res first keys)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 #_(explainer/xf--explain! nil))
                                           [\"250f66c5-7758-4abb-8332-7df0ed286a11\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"250f66c5-7758-4abb-8332-7df0ed286a11\"]))" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                 (explainer/xf--explain! nil))
                                           [\"a3eb9876-cae4-47d0-8b35-e26083986d99\"]))" "(-> res first :segmented-queried-jobs keys)" "(-> res first keys)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                 (explainer/xf--bind-properties *ac* *pb*)
                                                 (explainer/xf--bind-timezone *ac*)
                                                 (explainer/xf--bind-segmented-queried-jobs *ac* *pac*))
                                           [\"a3eb9876-cae4-47d0-8b35-e26083986d99\"]))" "&env" "(< (Double/parseDouble \"1.0\") 1)" "(Double/parseDouble \"1.0\")" "not=" "(clj-time.core/in-days (clj-time.core/interval (core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\") (clj-time.core/now)))" "(clj-time.core/millis (clj-time.core/interval (core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\") (clj-time.core/now)))" "(clj-time.core/interval (core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\") (clj-time.core/now))" "(clj-time.core/minus (core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\") (clj-time.core/now))" "(clj-time.core/now)" "(- (core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\") (clj-time.core/now))" "(core.clj-time.utils/formatted-date->datetime \"2018-02-04\" \"US/Pacific\")" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--explain! nil)) 
                                         [\"12bb1c3b-92ae-42fc-af37-bfb33da6a340\"]))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac* :num-properties 3)
                           (explainer/xf--explain! nil)
                           )
                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac* :num-properties 3)
                           #_(explainer/xf--explain! nil)
                           )
                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--explain! nil)
                           )
                                         (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(def da (jql/detected-anomalies *pac* \"2018-01-01\" \"2018-02-05\"))" "(in-ns 'detect.explainer.env)" "(def da (jql/detected-anomalies *pac* \"2018-01-01\" \"2018-02-05\"))" "(def res (binding [core.log/*log-level* :notice]
                                 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                     (explainer/xf--bind-properties *ac* *pb*)
                                                     (explainer/xf--bind-timezone *ac*)
                                                     (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                     (explainer/xf--span-detected-jobs)
                                                     (explainer/xf--score-ds)) (take 1000 (shuffle (map #(map-keys keyword %) (vals m2)))))))" "(def res (binding [core.log/*log-level* :notice]
                                 (util/parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                     (explainer/xf--bind-properties *ac* *pb*)
                                                     (explainer/xf--bind-timezone *ac*)
                                                     (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                     (explainer/xf--span-detected-jobs)
                                                     (explainer/xf--score-ds)) (take 1000 (shuffle (first (map #(map-keys keyword %) (vals m2))))))))" "t1" "(def t1 (util/parallel-run (comp (map (fn [x] (if (odd? x) (throw (IllegalArgumentException. \"empty datasets\")) x)))
                                                       (map inc)) (range 10)))" "t1" "(def t1 (util/parallel-run (map (fn [x] (if (odd? x) (throw (IllegalArgumentException. \"empty datasets\")) x))) (range 10)))" "t1" "(def t1 (util/parallel-run (map (fn [x] (if (odd? x) (inc x) #_(throw (IllegalArgumentException. \"empty datasets\")) x))) (range 10)))" "t1" "(def t1 (sequence (map (fn [x] (if (odd? x) (inc x) #_(throw (IllegalArgumentException. \"empty datasets\")) x))) (range 10)))" "(-> type t1)" "t1" "(def t1 (sequence (map (fn [x] (if (odd? x) (throw (IllegalArgumentException. \"empty datasets\")) x))) (range 10)))" "(sequence (map (fn [x] (if (odd? x) (throw (IllegalArgumentException. \"empty datasets\")) x))) (range 10))" "(sequence (map (fn [x] (if (odd? x) (throw (IllegalArgumentException. \"empty datasets\")) x))))" "(def res (binding [core.log/*log-level* :notice]
                                 (parallel-run (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                     (explainer/xf--bind-properties *ac* *pb*)
                                                     (explainer/xf--bind-timezone *ac*)
                                                     (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                     (explainer/xf--span-detected-jobs)
                                                     (explainer/xf--score-ds)) (take 1000 (shuffle (first (map #(map-keys keyword %) (vals m2))))))))" "(->> res first i/nrow)" "(->> res first (i/head 20) prn)" "(-> res first type)" "(-> res type)" "(cons 1 [1 2])" "(aconcat [[1] [2]])" "(aconcat [1] [2])" "(def res (binding [core.log/*log-level* :notice]
                                 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                                       (explainer/xf--bind-properties *ac* *pb*)
                                                       (explainer/xf--bind-timezone *ac*)
                                                       (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                       (explainer/xf--span-detected-jobs)
                                                       (explainer/xf--score-ds)) [(first (map #(map-keys keyword %) (vals m2)))])))" "(def m2 (json/read-str (slurp \"alert_id.json\")))" "(in-ns 'detect.explainer.env)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--span-detected-jobs)
                           (explainer/xf--score-ds)) [(first (map #(map-keys keyword %) (vals m2)))]))" "(first (map #(map-keys keyword %) (vals m2)))" "(keyword \"qwe\")" "(first (map-keys keyword (vals m2)))" "(first (map-keys keyword) (vals m2))" "(first (vals m2))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--span-detected-jobs)
                           (explainer/xf--score-ds)) [(first (vals m2))]))" "(def m2 (json/read-str (slurp \"alert_id.json\")))" "(first m2)" "(def m2 (filter #(contains? % :alert-id) (json/read-str (slurp \"alert_id.json\"))))" "(first m2)" "  (def m2 (map #(contains? % :alert-id) (json/read-str (slurp \"alert_id.json\"))))" "(-> m2 next next first)" "(nth 10 m2)" "(second m2)" "(first m2)" "(-> m2 count)" "(type m2)" "(def m2 (json/read-str (slurp \"alert_id.json\")))" "(->> m2 (take 10))" "(-> m2 type)" "(def m2 (slurp \"alert_id.json\"))" "(with-open [writer (java-io/writer \"anomaly_id.json\")] (json/write m writer))" "(with-open [writer (io/writer \"anomaly_id.json\")] (json/write m writer))" "(keys m)" "(first m)" "(def m (into {} (map (fn [v] [(safe-get-in v [\"properties\" \"anomaly-id\"]) {\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"])
                                                                                                \"project-id\" (safe-get-in v [\"properties\" \"project_id\"])
                                                                                                \"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])}]) x)))" "(def m (map (fn [v] [(safe-get-in v [\"properties\" \"anomaly-id\"]) {\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"])
                                                                                        \"project-id\" (safe-get-in v [\"properties\" \"project_id\"])
                                                                                        \"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])}]) x))" "(first m)" "(def m (map (fn [v] {\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"])
                                           \"project-id\" (safe-get-in v [\"properties\" \"project_id\"])
                                           \"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])}) x))" "(count x)" "(first m)" "(def m (into {} (map (fn [v] (into {} [[\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"])] [\"project-id\" (safe-get-in v [\"properties\" \"project_id\"])] [\"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])]])) x)))" "(def m (into {} (map (fn [v] (into {} [\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"]) \"project-id\" (safe-get-in v [\"properties\" \"project_id\"]) \"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])])) x)))" "(into {} [[:a 1]])" "(into {} [:a 1])" "(def m (into {} (map (fn [v] (into {} [\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"]) \"project-id\" (safe-get-in v [\"properties\" \"project_id\"]) \"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])])) x)))" "(first m)" "(def m (map (fn [v] [\"anomaly-id\" (safe-get-in v [\"properties\" \"anomaly-id\"]) [\"project-id\" (safe-get-in v [\"properties\" \"project_id\"])] [\"plan-id\" (safe-get-in v [\"properties\" \"plan-id\"])]]) x))" "(second x)" "(first x)" "(->> res first (i/head 10) prn)" "(->> res first (i/head 10))" "(->> res first type)" "(->> res count)" "(->> res type)" "  (def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                           (explainer/xf--bind-properties *ac* *pb*)
                           (explainer/xf--bind-timezone *ac*)
                           (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                           (explainer/xf--span-detected-jobs)
                           (explainer/xf--score-ds)
                           ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def da (jql/detected-anomalies *pac* \"2018-01-01\" \"2018-02-05\"))
  (def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(in-ns 'detect.explainer.env)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--score-ds)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def x (->> da
                                  (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])))
                                  (filter #(#{\"insights\" \"segmentation\"} (safe-get-in % [\"properties\" \"query-type\"])))))" "(count x)" "(def x (->> da
                                  (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])))
                                  (filter #(#{\"insights\" \"segmentation\"} (safe-get-in % [\"properties\" \"query-type\"])))))" "(first x)" "(def x (->> da
                                  (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])))
                                  (filter #(#{\"segmentation\"} (safe-get-in % [\"properties\" \"query-type\"])))))" "(def x (->> da
                                  (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])))
                                  (filter #(#{\"segmentation\"} %) (safe-get-in % [\"properties\" \"query-type\"]))))" "(def x (->> da
                                  (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])))
                                  (filter #({\"segmentation\"} %) (safe-get-in % [\"properties\" \"query-type\"]))))" "(first x)" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(i/head 1000 rx)" "(i/head 10 rx)" "(i/nrow rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"CustomerPrice (rupiah)\"))" "(->> res first :segmented-queried-jobs (map (fn [[k v]] [k (count v)])))" "(->> r1 keys)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(def q1 (->> res first :queried-job))" "(def a1 (->> res first :anomaly))" "(def a1 (->> res first :segmented-queried-jobs))" "(def r1 (->> res first :segmented-queried-jobs))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(def da (jql/detected-anomalies *pac* \"2018-01-01\" \"2018-02-05\"))
  (def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(in-ns 'detect.explainer.env)" "(prn rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(count rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(count rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(prn r2)" "(count r2)" "(def r2 (apply dataset/safely-conj-rows rx))" "(first rx)" "(def r2 (dataset/safely-conj-rows rx))" "(count rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(prn rx)" "(def rx (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(prn (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(map vector [1 2 3] (range) (repeat \"a\"))" "(map vec [1 2 3] (range) (repeat \"a\"))" "(prn (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(->> r2 prn)" "(->> r2)" "(->> r2 type)" "(def r2 (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(->> r2)" "(def r2 (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$ios_ifa\"))" "(def r2 (detect.explainer.model.stationary/timeseries-ds-segmentation-and-insights q1 r1 \"$iso_ifa\"))" "a1" "q1" "(def q1 (->> res first :queried-job))" "(def a1 (->> res first :anomaly))" "(def r1 (->> res first :segmented-queried-jobs))" "(def r1 (->> res first :segmented-queried-jobs (safe-get \"$ios_ifa\")))" "(->> res first :segmented-queried-jobs (map (fn [[k v]] [k (count v)])))" "(->> res first :segmented-queried-jobs (map (fn [[k v] [k (count v)]])))" "(->> res first :segmented-queried-jobs keys)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(first x)" "
  (def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) da))" "(def da (jql/detected-anomalies *pac* \"2018-01-01\" \"2018-02-05\"))
  (def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) das))" "(in-ns 'detect.explainer.env)" "(def r2 (sequence (map detect.explainer.model.stationary/test1) r1))" "(def r2 (sequence (map explainer.model.stationary/test1) r1))" "(def r2 (sequence (map explainer.model/stationary/test1) r1))" "(->> r1 type)" "(def r2 (sequence (map explainer/test1) r1))" "(count r1)" "(->> r1 
                          first
                          :segmented-queried-jobs
                          (map (fn [[k v]]  [k (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          (map (fn [[k v]]  (count v)))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          type
                          #_(map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          (map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          first
                          (map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          first
                          #_(map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          keys
                          #_(map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          :segmented-queried-jobs
                          type
                          #_(map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          keys
                          :segmented-queried-jobs
                          type
                          #_(map (fn [[k v] (count v)]))
                          )" "(->> r1 
                          first
                          keys
                          :segmented-queried-jobs
                          (map (fn [[k v] (count v)]))
                          )" "(-> r1 
                          first
                          keys)" "(-> r1 
                          first
                          type)" "(-> r1 type)" "(def r1 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) [(first x)])))" "(-> r1 keys)" "(def r1 (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) x)))" "(-> res first)" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"anomaly-id\"]) x)))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"project_id\"]) x)))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) (map #(safe-get-in % [\"properties\" \"project_id\"] x))))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *ac* *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) x))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *pb*)
                                               (explainer/xf--bind-timezone *ac*)
                                               (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                               (explainer/xf--span-detected-jobs)
                                               ) x))" "(def res (sequence (comp (explainer/xf--load-from-anomaly-details *adb*)
                                               (explainer/xf--bind-properties *pb*))))" "(bucket/get *adb* (-> x first (safe-get-in [\"properties\" \"anomaly-id\"])))" "(-> x first (safe-get-in [\"properties\" \"anomaly-id\"]))" "(-> x first (safe-get-in [\"properties\" \"project_id\"]))" "(count res)" "(count x)" "(first x)" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) (safe-get-in % [\"properties\" \"project_id\"])) res))" "(first x)" "(def x (filter #((set detect.explainer.jql/all-benchmark-projects) %) res))" "(count res)" "(-> res first)" "(-> res first keys)" "(-> res first type)" "(-> res type)" "(def res (detect.explainer.jql/feedback *pac* \"2018-01-01\" \"2018-02-05\"))" "(in-ns 'detect.explainer.env)" "(def res (detect.explainer.jql/feedback *pac* \"2018-01-01\" \"2018-02-05\"))" "(use 'org.clojure.tools.trace)" "(use 'tools.trace)" "(use 'clojure.tools.trace)" "(add-dependencies
       :coordinates '[[org.clojure/tools.trace \"0.7.8\"]]
      :repositories (merge cemerick.pomegranate.aether/maven-central
                           {\"clojars\" \"http://clojars.org/repo\"}))" "(add-dependencies
       :coordinates '[[org.clojure/tools.trace \"0.7.9\"]]
      :repositories (merge cemerick.pomegranate.aether/maven-central
                           {\"clojars\" \"http://clojars.org/repo\"}))" "(add-dependencies
      :coordinates '[[incanter \"1.2.3\"]]
      :repositories (merge cemerick.pomegranate.aether/maven-central
                           {\"clojars\" \"http://clojars.org/repo\"}))" "(use 'clojure.tools.trace)" "(add-dependencies :coordinates '[[org.clojure/tools.trace \"0.7.9\"]])" "(use 'clojure.tools.trace)" "(require '(clojure.tools trace))" "(add-dependencies :coordinates '[[org.clojure/tools.trace \"0.7.9\"]]
                     :repositories (merge cemerick.pomegranate.aether/maven-central
                                          {\"clojars\" \"https://clojars.org/repo\"}))" "(require '(clojure.tools trace))" "(require 'clojure.tools.trace)" "(use 'clojure.tools.trace)" "(add-dependencies :coordinates '[[org.clojure/tools.trace \"0.7.9\"]])" "add-dependencies :coordinates '[[incanter \"1.2.3\"]]" "(use '[cemerick.pomegranate :only (add-dependencies)])" "pst" "(foo 24)" "(defn foo
  [n]
  (cond (> n 40) (+ n 20)
        (> n 20) (- (first n) 20)
        :else 0))" "(detect.explainer.dataset/safely-sum (incanter.core/$ :a t1))" "(incanter.core/sum (incanter.core/$ :a t1))" "(incater.core/sum (incanter.core/$ :a t1))" "(incanter.core/$ :a t1)" "(incanter.core/$ :a t2)" "(def t1 (incanter.core/dataset [:a :b] [[1 2] [nil 4] [3 4]]))" "(incanter.core/$ :a t2)" "(incanter.core/$ :a t1)" "t2" "(def t2 (incanter.core/dataset [:a :b] [[1 2]]))" "(def t1 (incanter.core/dataset [:a :b] [[1 2] [3 4]]))" "(incanter.core/dataset [:a :b] [[1 2] [3 4]])" "(remove nil? 1)" "@x" "(def x (future (time (reduce + (range 10000000000)))))" "@x" "(def x (future (time (reduce + (range 1000000000)))))" "(time (reduce + (range 1000000000)))" "(time (reduce + (range 10000000)))" "(time (reduce + (range 100000)))" "
                            
                            " "(.freeMemory (Runtime/getRuntime))" "(.totalMemory (Runtime/getRuntime))" "(.tatalMemory (Runtime/getRuntime))" "(doto (Runtime/getRuntime)
                        .totalMemory)" "(System/gc)" "System/gc" "System" "(prn (detect.explainer.dataset/contract :value t-ds))" "(prn t-ds)" "(prn (detect.explainer.dataset/contract :value t-ds))" "(detect.explainer.dataset/contract :value t-ds)" "(def t-ds (-> r1 first :ts-ds))" "(-> r1 first :ts-ds prn)" "(-> r1 first keys)" "  (def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                            (explainer/xf--span-detected-jobs)
                            detect.explainer.model.stationary/xf--bind-ts-ds) {:detected-jobs (:grouped-jobs j1)}))" "  (def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                            (explainer/xf--span-detected-jobs)
                            detect.explainer.model.stationary/xf--bind-scores-ds) {:detected-jobs (:grouped-jobs j1)}))" "  (def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                            (explainer/xf--span-detected-jobs)) {:detected-jobs (:grouped-jobs j1)}))" "  (def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                            (explainer/xf--span-detected-jobs)
                            (explainer/xf--explain! nil)) {:detected-jobs (:grouped-jobs j1)}))" "  j1" "j1" "(def j1 (bucket/get *adb* \"876d245b-b722-4628-bb32-bda603fcbed5\"))" "(in-ns 'detect.explainer.env)" "(apply + 1 [2 3])" "(class t)" "(var t)" "#'qwe" "(meta #'t)" "(type #'t)" "(type 'asd)" "'asd" "(type #'first)" "(meta #'first)" "(meta 'first)" "(meta first)" "(meta `t)" "(meta 't)" "(meta t)" "(t 1)" "(defn t [^long x] (prn (meta x)) x)" "(meta t)" "meta" "(t 1)" "(t \"asd\")" "(defn t [^long x] x)" "(def t [^long x] x)" "(meta ^long 1)" "(meta ^string \"ads\")" "(meta \"ads\")" "(meta :a)" "(first @benchmark)" "(count @benchmark)" "@benchmark" "(def benchmark (future (doall (->> v (filter (fn [x] (-> x :alert-contents first :service-info :service (= :contour) not))) (filter (fn [x] (-> x :project-id detect.explainer.project-ids/all-projects)))))))" "@benchmark" "(def benchmark (future (doall (->> v (filter (fn [x] (-> x :alert-contents first :service-info :service (= :contour) not))) (filter (fn [x] (-> x :project-id detect.explainer.project-ids/all-projects))) first))))" "(->> v (filter (fn [x] (-> x :alert-contents first :service-info :service (= :contour) not))) (filter (fn [x] (-> x :project-id detect.explainer.project-ids/all-projects))) first)" "detect.explainer.project-ids/all-projects" "(->> v (filter (fn [x] (-> x :alert-contents first :service-info :service (= :contour) not))) first)" "(first v)" "(def v (gcp.bucket.core/vals (:alert-bucket ml-dev-tools.swank.env/resources)))" "(first (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))" "(in-ns 'user)" "cnt" "(in-ns 'detect.explainer.env)" "v" "cnt" "(in-ns 'affinity.skeleton.env)" "(in-ns 'user)" "(concat [1] [2] [3])" "(join [1] [2] [3])" "(->> v (filter (fn [x] (-> x :alert-contents first :service-info :service (= :contour) not))) first)" "(-> v next next next next next next first)" "(-> v next next next next next first)" "(-> v next next next next first)" "(-> v next next next first)" "(-> v next next first)" "(def v (gcp.bucket.core/vals (:alert-bucket ml-dev-tools.swank.env/resources)))" "(second (gcp.bucket.core/vals (:alert-bucket ml-dev-tools.swank.env/resources)))" "(first (gcp.bucket.core/vals (:alert-bucket ml-dev-tools.swank.env/resources)))" "@cnt" "cnt" "(in-ns 'user)" "(first (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))" "cnt" "(in-ns 'affinity.skeleton.env)" "for-map" "(for-map [x (range 10)] x (* 2 x))" "for-map" "(map (fn [x] (-> (s/gen :detect.domain.data/group-by-properties) gen/generate)) (range 2))" "(map (fn [] (-> (s/gen :detect.domain.data/group-by-properties) gen/generate)) (range 2))" "(-> (s/gen :detect.domain.data/group-by-properties) gen/generate)" "(require '[clojure.spec.alpha :as s]
   '[clojure.spec.gen.alpha :as gen])" "s/gen" "s" "(def gt (-> detect.explainer.service/service-graph service.core/start-service-test))" "(clojure.core/fn [[statsd-fn16083098 pubsub-broker-fn16083099 to-explain-subscriber-fn16083100 alerter-publisher-fn16083101 properties-bucket-fn16083102 config-fn16083103 appdb-client-fn16083104 public-api-client-fn16083105 images-bucket-fn16083106 xfs-fn16083107 explain-worker-fn16083108 informer->alerter-subscriber-fn16083109 alert-pubber-fn16083110 input-schema16083170 output-schema16083171]] (clojure.core/let [pos16083169 (clojure.core/fn positional-graph__12159160__auto__ [alert-pubber-pull-period-ms16083064 tags16083065 num-explainer-worker-threads16083066 properties-bucket-name16083067 thread-factory16083068 from-informer-topic16083069 config-dir16083070 to-alerter-topic16083071 timezone-cache-expiry-ms16083072 env16083073 port16083074 num-threads16083075 ignore-errors?16083076 query-type->semaphore16083077 block?16083078 cache-expiry-ms16083079 images-bucket-name16083080 initial-value16083081 properties-cache-expiry-ms16083082 properties-cache-size16083083 incoming-ack-deadline-secs16083084] (clojure.core/let [statsd16083087 (statsd-fn16083098 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:port port16083074, :tags tags16083065}))) pubsub-broker16083096 (pubsub-broker-fn16083099 statsd16083087) to-explain-subscriber16083088 (to-explain-subscriber-fn16083100 incoming-ack-deadline-secs16083084 from-informer-topic16083069 pubsub-broker16083096) alerter-publisher16083093 (alerter-publisher-fn16083101 to-alerter-topic16083071 pubsub-broker16083096) properties-bucket16083085 (properties-bucket-fn16083102 properties-bucket-name16083067 statsd16083087) config16083091 (config-fn16083103 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:block? block?16083078, :initial-value initial-value16083081, :env env16083073, :config-dir config-dir16083070}))) appdb-client16083086 (appdb-client-fn16083104 statsd16083087 config16083091) public-api-client16083095 (public-api-client-fn16083105 query-type->semaphore16083077 appdb-client16083086 cache-expiry-ms16083079 block?16083078 initial-value16083081 config16083091 statsd16083087) images-bucket16083092 (images-bucket-fn16083106 images-bucket-name16083080 statsd16083087) xfs16083089 (xfs-fn16083107 properties-cache-size16083083 properties-cache-expiry-ms16083082 timezone-cache-expiry-ms16083072 properties-bucket16083085 public-api-client16083095 appdb-client16083086 statsd16083087 images-bucket16083092) explain-worker16083090 (explain-worker-fn16083108 num-explainer-worker-threads16083066 xfs16083089 to-explain-subscriber16083088 statsd16083087) informer->alerter-subscriber16083094 (informer->alerter-subscriber-fn16083109 incoming-ack-deadline-secs16083084 from-informer-topic16083069 pubsub-broker16083096) alert-pubber16083097 (alert-pubber-fn16083110 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:num-threads num-threads16083075, :ignore-errors? ignore-errors?16083076, :thread-factory thread-factory16083068, :alert-pubber-pull-period-ms alert-pubber-pull-period-ms16083064, :alerter-publisher alerter-publisher16083093, :informer->alerter-subscriber informer->alerter-subscriber16083094, :statsd statsd16083087})))] (new graph-record16083111 properties-bucket16083085 appdb-client16083086 statsd16083087 to-explain-subscriber16083088 xfs16083089 explain-worker16083090 config16083091 images-bucket16083092 alerter-publisher16083093 informer->alerter-subscriber16083094 public-api-client16083095 pubsub-broker16083096 alert-pubber16083097)))] (clojure.core/let [pos-fn__2478__auto__ (clojure.core/fn graph-positional-positional [alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs] (pos16083169 alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))] (clojure.core/vary-meta (schema.core/fn graph-positional [m__2479__auto__ :- input-schema16083170] (plumbing.core/letk [[alert-pubber-pull-period-ms num-explainer-worker-threads properties-bucket-name from-informer-topic to-alerter-topic timezone-cache-expiry-ms images-bucket-name properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs {tags :plumbing.fnk.impl/none} {thread-factory :plumbing.fnk.impl/none} {config-dir :plumbing.fnk.impl/none} {env :plumbing.fnk.impl/none} {port :plumbing.fnk.impl/none} {num-threads :plumbing.fnk.impl/none} {ignore-errors? :plumbing.fnk.impl/none} {query-type->semaphore :plumbing.fnk.impl/none} {block? :plumbing.fnk.impl/none} {cache-expiry-ms :plumbing.fnk.impl/none} {initial-value :plumbing.fnk.impl/none}] m__2479__auto__] (pos-fn__2478__auto__ alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))) clojure.core/merge (clojure.core/assoc nil :plumbing.fnk.impl/positional-info [pos-fn__2478__auto__ [:alert-pubber-pull-period-ms :tags :num-explainer-worker-threads :properties-bucket-name :thread-factory :from-informer-topic :config-dir :to-alerter-topic :timezone-cache-expiry-ms :env :port :num-threads :ignore-errors? :query-type->semaphore :block? :cache-expiry-ms :images-bucket-name :initial-value :properties-cache-expiry-ms :properties-cache-size :incoming-ack-deadline-secs]])))))" "(def gt (-> detect.explainer.service/service-graph service.core/start-service-test))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :h {:ha (fnk [[:gg ga]] (inc ga))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(gt {:k 1})" "(def gt (-> g plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :h {:ha (fnk [gg] (assoc gg :kk 4))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(gt {:k 1})" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :h {:ha (fnk [[:gg ga]] (inc ga))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :h {:ha (fnk [gg] (inc ga))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(gt {:k 1})" "(def gt (-> g plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :h {:ha (fnk [gg] (inc gg))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(gt {:k 1})" "gt" "(def gt (-> g plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fnk [a] (inc a)) :gb (fnk [b] (inc b))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :gg {:ga (fn [a] (inc a)) :gb (fn [b] (inc b))}
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(def gt (-> g plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :q (plumbing.graph/instance test-fnk [a b c d] {:bb a :bc c})
))" "(defnk test-fnk [bb bc] nil)" "(defk test-fnk [bb bc] nil)" "(def gt (-> g plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
                              :q (plumbing.graph/instance (fnk [bb bc] 0) [a b c d] {:bb a :bc c})
))" "(def gt (-> g plumbing.graph/eager-compile))" "(def gt (-> g service.core/start-service-test))" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]] (clojure.core/let [pos12159535 (clojure.core/fn positional-graph__12159160__auto__ [alert-pubber-pull-period-ms12159425 tags12159426 num-explainer-worker-threads12159427 properties-bucket-name12159428 thread-factory12159429 from-informer-topic12159430 config-dir12159431 to-alerter-topic12159432 timezone-cache-expiry-ms12159433 env12159434 port12159435 num-threads12159436 ignore-errors?12159437 query-type->semaphore12159438 block?12159439 cache-expiry-ms12159440 images-bucket-name12159441 initial-value12159442 properties-cache-expiry-ms12159443 properties-cache-size12159444 incoming-ack-deadline-secs12159445] )] ))" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]] (clojure.core/let [pos12159535 (clojure.core/fn positional-graph__12159160__auto__ [alert-pubber-pull-period-ms12159425 tags12159426 num-explainer-worker-threads12159427 properties-bucket-name12159428 thread-factory12159429 from-informer-topic12159430 config-dir12159431 to-alerter-topic12159432 timezone-cache-expiry-ms12159433 env12159434 port12159435 num-threads12159436 ignore-errors?12159437 query-type->semaphore12159438 block?12159439 cache-expiry-ms12159440 images-bucket-name12159441 initial-value12159442 properties-cache-expiry-ms12159443 properties-cache-size12159444 incoming-ack-deadline-secs12159445] (clojure.core/let [statsd12159448 (statsd-fn12159460 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:port port12159435, :tags tags12159426}))) pubsub-broker12159458 (pubsub-broker-fn12159461 statsd12159448) to-explain-subscriber12159450 (to-explain-subscriber-fn12159462 incoming-ack-deadline-secs12159445 from-informer-topic12159430 pubsub-broker12159458) alerter-publisher12159455 (alerter-publisher-fn12159463 to-alerter-topic12159432 pubsub-broker12159458) properties-bucket12159446 (properties-bucket-fn12159464 properties-bucket-name12159428 statsd12159448) images-bucket12159454 (images-bucket-fn12159465 images-bucket-name12159441 statsd12159448) xf--explain!12159453 (xf--explain!-fn12159466 images-bucket12159454 statsd12159448) config12159452 (config-fn12159467 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:block? block?12159439, :initial-value initial-value12159442, :env env12159434, :config-dir config-dir12159431}))) appdb-client12159447 (appdb-client-fn12159468 statsd12159448 config12159452) public-api-client12159457 (public-api-client-fn12159469 query-type->semaphore12159438 appdb-client12159447 cache-expiry-ms12159440 block?12159439 initial-value12159442 config12159452 statsd12159448) xf--load-jobs-to-explain12159449 (xf--load-jobs-to-explain-fn12159470 properties-cache-size12159444 properties-cache-expiry-ms12159443 timezone-cache-expiry-ms12159433 properties-bucket12159446 public-api-client12159457 appdb-client12159447 statsd12159448) explain-worker12159451 (explain-worker-fn12159471 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:num-explainer-worker-threads num-explainer-worker-threads12159427, :xf--explain! xf--explain!12159453, :xf--load-jobs-to-explain xf--load-jobs-to-explain12159449, :to-explain-subscriber to-explain-subscriber12159450}))) informer->alerter-subscriber12159456 (informer->alerter-subscriber-fn12159472 incoming-ack-deadline-secs12159445 from-informer-topic12159430 pubsub-broker12159458) alert-pubber12159459 (alert-pubber-fn12159473 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:num-threads num-threads12159436, :ignore-errors? ignore-errors?12159437, :thread-factory thread-factory12159429, :alert-pubber-pull-period-ms alert-pubber-pull-period-ms12159425, :alerter-publisher alerter-publisher12159455, :informer->alerter-subscriber informer->alerter-subscriber12159456, :statsd statsd12159448})))] (new graph-record12159474 properties-bucket12159446 appdb-client12159447 statsd12159448 xf--load-jobs-to-explain12159449 to-explain-subscriber12159450 explain-worker12159451 config12159452 xf--explain!12159453 images-bucket12159454 alerter-publisher12159455 informer->alerter-subscriber12159456 public-api-client12159457 pubsub-broker12159458 alert-pubber12159459)))] (clojure.core/let [pos-fn__2478__auto__ (clojure.core/fn graph-positional-positional [alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs] (pos12159535 alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))] (clojure.core/vary-meta (schema.core/fn graph-positional [m__2479__auto__ :- input-schema12159536] (plumbing.core/letk [[alert-pubber-pull-period-ms num-explainer-worker-threads properties-bucket-name from-informer-topic to-alerter-topic timezone-cache-expiry-ms images-bucket-name properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs {tags :plumbing.fnk.impl/none} {thread-factory :plumbing.fnk.impl/none} {config-dir :plumbing.fnk.impl/none} {env :plumbing.fnk.impl/none} {port :plumbing.fnk.impl/none} {num-threads :plumbing.fnk.impl/none} {ignore-errors? :plumbing.fnk.impl/none} {query-type->semaphore :plumbing.fnk.impl/none} {block? :plumbing.fnk.impl/none} {cache-expiry-ms :plumbing.fnk.impl/none} {initial-value :plumbing.fnk.impl/none}] m__2479__auto__] (pos-fn__2478__auto__ alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))) clojure.core/merge (clojure.core/assoc nil :plumbing.fnk.impl/positional-info [pos-fn__2478__auto__ [:alert-pubber-pull-period-ms :tags :num-explainer-worker-threads :properties-bucket-name :thread-factory :from-informer-topic :config-dir :to-alerter-topic :timezone-cache-expiry-ms :env :port :num-threads :ignore-errors? :query-type->semaphore :block? :cache-expiry-ms :images-bucket-name :initial-value :properties-cache-expiry-ms :properties-cache-size :incoming-ack-deadline-secs]])))))" "(clojure.core/fn graph-positional-positional [alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs] (pos12159535 alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]]
                        (clojure.core/let [pos12159535 nil]
                          (clojure.core/let [pos-fn__2478__auto__ nil] (clojure.core/vary-meta (schema.core/fn graph-positional [m__2479__auto__ :- input-schema12159536] (plumbing.core/letk [[alert-pubber-pull-period-ms num-explainer-worker-threads properties-bucket-name from-informer-topic to-alerter-topic timezone-cache-expiry-ms images-bucket-name properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs {tags :plumbing.fnk.impl/none} {thread-factory :plumbing.fnk.impl/none} {config-dir :plumbing.fnk.impl/none} {env :plumbing.fnk.impl/none} {port :plumbing.fnk.impl/none} {num-threads :plumbing.fnk.impl/none} {ignore-errors? :plumbing.fnk.impl/none} {query-type->semaphore :plumbing.fnk.impl/none} {block? :plumbing.fnk.impl/none} {cache-expiry-ms :plumbing.fnk.impl/none} {initial-value :plumbing.fnk.impl/none}] m__2479__auto__] (pos-fn__2478__auto__ alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))) clojure.core/merge (clojure.core/assoc nil :plumbing.fnk.impl/positional-info [pos-fn__2478__auto__ [:alert-pubber-pull-period-ms :tags :num-explainer-worker-threads :properties-bucket-name :thread-factory :from-informer-topic :config-dir :to-alerter-topic :timezone-cache-expiry-ms :env :port :num-threads :ignore-errors? :query-type->semaphore :block? :cache-expiry-ms :images-bucket-name :initial-value :properties-cache-expiry-ms :properties-cache-size :incoming-ack-deadline-secs]]))))

                        )" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]]
                        (clojure.core/let [pos12159535 nil] (clojure.core/let [pos-fn__2478__auto__ (clojure.core/fn graph-positional-positional [alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs] (pos12159535 alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))] (clojure.core/vary-meta (schema.core/fn graph-positional [m__2479__auto__ :- input-schema12159536] (plumbing.core/letk [[alert-pubber-pull-period-ms num-explainer-worker-threads properties-bucket-name from-informer-topic to-alerter-topic timezone-cache-expiry-ms images-bucket-name properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs {tags :plumbing.fnk.impl/none} {thread-factory :plumbing.fnk.impl/none} {config-dir :plumbing.fnk.impl/none} {env :plumbing.fnk.impl/none} {port :plumbing.fnk.impl/none} {num-threads :plumbing.fnk.impl/none} {ignore-errors? :plumbing.fnk.impl/none} {query-type->semaphore :plumbing.fnk.impl/none} {block? :plumbing.fnk.impl/none} {cache-expiry-ms :plumbing.fnk.impl/none} {initial-value :plumbing.fnk.impl/none}] m__2479__auto__] (pos-fn__2478__auto__ alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))) clojure.core/merge (clojure.core/assoc nil :plumbing.fnk.impl/positional-info [pos-fn__2478__auto__ [:alert-pubber-pull-period-ms :tags :num-explainer-worker-threads :properties-bucket-name :thread-factory :from-informer-topic :config-dir :to-alerter-topic :timezone-cache-expiry-ms :env :port :num-threads :ignore-errors? :query-type->semaphore :block? :cache-expiry-ms :images-bucket-name :initial-value :properties-cache-expiry-ms :properties-cache-size :incoming-ack-deadline-secs]]))))

                        )" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]] )" "(clojure.core/fn [[statsd-fn12159460 pubsub-broker-fn12159461 to-explain-subscriber-fn12159462 alerter-publisher-fn12159463 properties-bucket-fn12159464 images-bucket-fn12159465 xf--explain!-fn12159466 config-fn12159467 appdb-client-fn12159468 public-api-client-fn12159469 xf--load-jobs-to-explain-fn12159470 explain-worker-fn12159471 informer->alerter-subscriber-fn12159472 alert-pubber-fn12159473 input-schema12159536 output-schema12159537]] (clojure.core/let [pos12159535 (clojure.core/fn positional-graph__12159160__auto__ [alert-pubber-pull-period-ms12159425 tags12159426 num-explainer-worker-threads12159427 properties-bucket-name12159428 thread-factory12159429 from-informer-topic12159430 config-dir12159431 to-alerter-topic12159432 timezone-cache-expiry-ms12159433 env12159434 port12159435 num-threads12159436 ignore-errors?12159437 query-type->semaphore12159438 block?12159439 cache-expiry-ms12159440 images-bucket-name12159441 initial-value12159442 properties-cache-expiry-ms12159443 properties-cache-size12159444 incoming-ack-deadline-secs12159445] (clojure.core/let [statsd12159448 (statsd-fn12159460 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:port port12159435, :tags tags12159426}))) pubsub-broker12159458 (pubsub-broker-fn12159461 statsd12159448) to-explain-subscriber12159450 (to-explain-subscriber-fn12159462 incoming-ack-deadline-secs12159445 from-informer-topic12159430 pubsub-broker12159458) alerter-publisher12159455 (alerter-publisher-fn12159463 to-alerter-topic12159432 pubsub-broker12159458) properties-bucket12159446 (properties-bucket-fn12159464 properties-bucket-name12159428 statsd12159448) images-bucket12159454 (images-bucket-fn12159465 images-bucket-name12159441 statsd12159448) xf--explain!12159453 (xf--explain!-fn12159466 images-bucket12159454 statsd12159448) config12159452 (config-fn12159467 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:block? block?12159439, :initial-value initial-value12159442, :env env12159434, :config-dir config-dir12159431}))) appdb-client12159447 (appdb-client-fn12159468 statsd12159448 config12159452) public-api-client12159457 (public-api-client-fn12159469 query-type->semaphore12159438 appdb-client12159447 cache-expiry-ms12159440 block?12159439 initial-value12159442 config12159452 statsd12159448) xf--load-jobs-to-explain12159449 (xf--load-jobs-to-explain-fn12159470 properties-cache-size12159444 properties-cache-expiry-ms12159443 timezone-cache-expiry-ms12159433 properties-bucket12159446 public-api-client12159457 appdb-client12159447 statsd12159448) explain-worker12159451 (explain-worker-fn12159471 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:num-explainer-worker-threads num-explainer-worker-threads12159427, :xf--explain! xf--explain!12159453, :xf--load-jobs-to-explain xf--load-jobs-to-explain12159449, :to-explain-subscriber to-explain-subscriber12159450}))) informer->alerter-subscriber12159456 (informer->alerter-subscriber-fn12159472 incoming-ack-deadline-secs12159445 from-informer-topic12159430 pubsub-broker12159458) alert-pubber12159459 (alert-pubber-fn12159473 (clojure.core/into {} (clojure.core/remove (fn* [p1__2461__2462__auto__] (clojure.core/identical? plumbing.fnk.impl/+none+ (clojure.core/second p1__2461__2462__auto__))) {:num-threads num-threads12159436, :ignore-errors? ignore-errors?12159437, :thread-factory thread-factory12159429, :alert-pubber-pull-period-ms alert-pubber-pull-period-ms12159425, :alerter-publisher alerter-publisher12159455, :informer->alerter-subscriber informer->alerter-subscriber12159456, :statsd statsd12159448})))] (new graph-record12159474 properties-bucket12159446 appdb-client12159447 statsd12159448 xf--load-jobs-to-explain12159449 to-explain-subscriber12159450 explain-worker12159451 config12159452 xf--explain!12159453 images-bucket12159454 alerter-publisher12159455 informer->alerter-subscriber12159456 public-api-client12159457 pubsub-broker12159458 alert-pubber12159459)))] (clojure.core/let [pos-fn__2478__auto__ (clojure.core/fn graph-positional-positional [alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs] (pos12159535 alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))] (clojure.core/vary-meta (schema.core/fn graph-positional [m__2479__auto__ :- input-schema12159536] (plumbing.core/letk [[alert-pubber-pull-period-ms num-explainer-worker-threads properties-bucket-name from-informer-topic to-alerter-topic timezone-cache-expiry-ms images-bucket-name properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs {tags :plumbing.fnk.impl/none} {thread-factory :plumbing.fnk.impl/none} {config-dir :plumbing.fnk.impl/none} {env :plumbing.fnk.impl/none} {port :plumbing.fnk.impl/none} {num-threads :plumbing.fnk.impl/none} {ignore-errors? :plumbing.fnk.impl/none} {query-type->semaphore :plumbing.fnk.impl/none} {block? :plumbing.fnk.impl/none} {cache-expiry-ms :plumbing.fnk.impl/none} {initial-value :plumbing.fnk.impl/none}] m__2479__auto__] (pos-fn__2478__auto__ alert-pubber-pull-period-ms tags num-explainer-worker-threads properties-bucket-name thread-factory from-informer-topic config-dir to-alerter-topic timezone-cache-expiry-ms env port num-threads ignore-errors? query-type->semaphore block? cache-expiry-ms images-bucket-name initial-value properties-cache-expiry-ms properties-cache-size incoming-ack-deadline-secs))) clojure.core/merge (clojure.core/assoc nil :plumbing.fnk.impl/positional-info [pos-fn__2478__auto__ [:alert-pubber-pull-period-ms :tags :num-explainer-worker-threads :properties-bucket-name :thread-factory :from-informer-topic :config-dir :to-alerter-topic :timezone-cache-expiry-ms :env :port :num-threads :ignore-errors? :query-type->semaphore :block? :cache-expiry-ms :images-bucket-name :initial-value :properties-cache-expiry-ms :properties-cache-size :incoming-ack-deadline-secs]])))))" "(def gt (-> detect.explainer.service/service-graph service.core/start-service-test))" "(-> detect.explainer.service/service-graph count)" "(def gt (-> detect.explainer.service/service-graph service.core/start-service-test))" "(-> detect.explainer.service/service-graph count)" "detect.explainer.service/service-graph" "(-> detect.explainer.service/service-graph count)" "(-> detect.explainer.service/service-graph keys)" "(-> detect.explainer.service/service-graph type)" "(def gt (-> detect.explainer.service/service-graph service.core/start-service-test))" "(def gt (-> detect.explainer.service/service-graph service.core/resource-transform plumbing.graph/eager-compile))" "(plumbing.graph/eager-compile (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              ...
))" "(def gt (-> g service.core/resource-transform plumbing.graph/eager-compile))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
))" "(def gt (-> g service.core/resource-transform plumbing.graph/eager-compile))" "(plumbing.graph/->graph g)" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
                              :an (fnk [a] (inc a))
                              :ao (fnk [a] (inc a))
                              :ap (fnk [a] (inc a))
                              :aq (fnk [a] (inc a))
))" "(type (plumbing.graph/->graph g))" "(plumbing.graph/->graph g)" "(gt {:k 1})" "(def gt (-> g service.core/resource-transform plumbing.graph/eager-compile))" "(gt {:k 1})" "(def gt (plumbing.graph/eager-compile g))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :aj (fnk [a] (inc a))
                              :ak (fnk [a] (inc a))
                              :al (fnk [a] (inc a))
                              :am (fnk [a] (inc a))
))" "(gt {:k 1})" "gt" "g" "(def gt (plumbing.graph/eager-compile g))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))
                                                            :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
))" "(def g (plumbing.graph/graph
                              :aa (fnk [a] (inc a))
                              :ab (fnk [a] (inc a))
                              :ac (fnk [a] (inc a))
                              :ad (fnk [a] (inc a))
                              :ae (fnk [a] (inc a))
                              :af (fnk [a] (inc a))
                              :ag (fnk [a] (inc a))
                              :ah (fnk [a] (inc a))
                              :ai (fnk [a] (inc a))
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph
                              :a0 (fnk [a] (inc a))
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))))" "(def stats-graph
  \"A graph specifying the same computation as 'stats'\"
                        (plumbing.graph/graph :n  (fnk [xs]   (count xs))
                                              :m  (fnk [xs n] (/ (sum identity xs) n))
                                              :m2 (fnk [xs n] (/ (sum #(* % %) xs) n))
                                              :v  (fnk [m m2] (- m2 (* m m)))))" "(def g (plumbing.graph/graph
                              :a0 (fnk [a] (inc a))
                              :a1 (fnk [a] (inc a))
                              :a2 (fnk [a] (inc a))
                              :a3 (fnk [a] (inc a))
                              :a4 (fnk [a] (inc a))
                              :a5 (fnk [a] (inc a))
                              :a6 (fnk [a] (inc a))
                              :a7 (fnk [a] (inc a))
                              :a8 (fnk [a] (inc a))
                              :a (fnk [k] (inc k))
                              :b (fnk [a] (inc a))
                              :c (fnk [a] (inc a))
                              :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph :0 (fnk [a] (inc a)) :1 (fnk [a] (inc a)) :2 (fnk [a] (inc a)) :3 (fnk [a] (inc a)) :4 (fnk [a] (inc a)) :5 (fnk [a] (inc a)) :6 (fnk [a] (inc a)) :7 (fnk [a] (inc a)) :8 (fnk [a] (inc a)) :a (fnk [a] (inc a)) :b (fnk [a] (inc a)) :c (fnk [a] (inc a)) :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph :0 0 :1 1 :2 2 :3 3 :4 4 :5 5 :6 6 :7 7 :8 8 :a 1 :b 2 :c (fnk [a] (inc a)) :d (fnk [b] (inc b))))" "(def g (plumbing.graph/graph :0 0 :1 1 :2 2 :3 3 :4 4 :5 5 :6 6 :7 7 :8 8 :a 1 :b 2 :c (fnk [a] (inc a) :d (fnk [b] (inc b)))))" "(use 'plumbing.core)" "(def g (plumbing.graph/graph :0 0 :1 1 :2 2 :3 3 :4 4 :5 5 :6 6 :7 7 :8 8 :a 1 :b 2 :c (fnk [a] (inc a) :d (fnk [b] (inc b)))))" "graph.core/graph" "graph/graph" "(-> r1 first :detected-jobs first :queried-job :timeseries)" "(-> r1 first :detected-jobs first :queried-job)" "(-> r1 first :detected-jobs first keys)" "(-> r1 first :detected-jobs first)" "(-> r1 first :detected-jobs keys)" "(-> r1 first :detected-jobs)" "(-> r1 first keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries)) (apply map +)))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first keys))))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :query :dates))))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(-> r1 first :segmented-queried-jobs keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :query :dates))))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(-> r1 first :segmented-queried-jobs count)" "(-> r1 first :segmented-queried-jobs type)" "(-> r1 first keys)" "(-> r1 count)" "(-> r1 first :segmented-queried-jobs keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :query :dates))))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(def djs (-> res first :grouped-jobs))" "(def res (->> (map (partial gcp.bucket.core/get *adb*) detect.explainer.ids/anomaly-details-id)
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(in-ns 'detect.explainer.env)" "(->> t (group-by first) (map-vals (partial map second) vals singleton))" "(second [1 2 3])" "(->> t (group-by first) (map-vals (partial map second)))" "(group-by first t)" "(def t [[\"a\" 1] [\"b\" 2]])" "(compare 1 0)" "(compare 0 0)" "(compare 0 1)" "(compare a b)" "(sort [a b])" "(< a b)" "b" "a" "b" "a" "(def b (clj-time.core/now))" "(def a (clj-time.core/now))" "(max 1 2 3)" "pos?" "nat?" "(clj-time.core/with-time-at-start-of-day (clj-time.core/to-time-zone (clj-time.core/now) (clj-time.core/time-zone-for-id \"US/Pacific\")))" "(clj-time.core/with-time-at-start-of-day (clj-time.core/now))" "(clj-time.core/with-time-at-start-of-day (now))" "(clj-time.core/with-time-at-start-of-day)" "(clj-time.core/today-at-midnight (clj-time.core/time-zone-for-id \"US/Pacific\"))" "(clj-time.core/today-at-midnight)" "(clj-time.core/today-at-midnight \"US/Pacific\")" "(def r2 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(-> r2 count)" "(-> r2 type)" "(def r2 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :query :dates))))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :query keys))))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first keys))))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :queried-job))))" "(-> r1 first :detected-jobs first :queried-job :query :dates)" "(-> r1 first :detected-jobs first :queried-job :timeseries)" "(-> r1 first :detected-jobs first :queried-job keys)" "(-> r1 first :detected-jobs first keys)" "(-> r1 first :detected-jobs first)" "(-> r1 first :detected-jobs count)" "(-> r1 first keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries)) (apply map +)))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries))))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries)) (apply map +)))" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries)) (map count)) )" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") vals (->> (map (fn-> first :timeseries))) count)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") first :timeseries)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") first timeseries)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") first keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") first type)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") count)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") type)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") (get \"Express Checkout\") keys)" "(-> r1 first :segmented-queried-jobs (get \"completedOrderType\") keys)" "(-> r1 first :segmented-queried-jobs (get \"mp_lib\") keys)" "(-> r1 first :segmented-queried-jobs (get \"mp_lib\") type)" "(-> r1 first :segmented-queried-jobs keys)" "(-> r1 first :segmented-queried-jobs type)" "(-> r1 first :segmented-queried-jobs)" "(-> r1 first keys)" "(-> r1 first type)" "(-> r1 count)" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                            (explainer/xf--bind-timezone *ac*)
                            (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(def djs (-> res first :grouped-jobs))" "(def res (->> (map (partial gcp.bucket.core/get *adb*) detect.explainer.ids/anomaly-details-id)
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(in-ns 'detect.explainer.env)" "(service.core/start-service detect.explainer.service/service-graph detect.explainer.service/params)" "(use 'plumbing.core)" "(service.core/start-service detect.explainer.service/service-graph detect.explainer.service/params)" "(count detect.explainer.service/service-graph)" "detect.explainer.service/service-graph" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(type ls)" "ls" "(def ls (map identity (range 10)))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(long 1.0)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(-> r1 first :detected-jobs first :queried-job :timeseries count)" "(-> r1 first :detected-jobs first :queried-job :timeseries type)" "(-> r1 first :detected-jobs first :queried-job keys)" "(-> r1 first :detected-jobs first :query)" "(-> r1 first :detected-jobs first keys)" "(-> r1 first keys)" "(-> r1 first type)" "(-> r1 first)" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(-> r1 first :segmented-queried-jobs first val (get \"web\") first keys)" "(-> r1 first :segmented-queried-jobs first val (get \"web\") first :timeseries count)" "(-> r1 first :segmented-queried-jobs first val (get \"web\") second :timeseries count)" "(-> r1 first :segmented-queried-jobs first val (get \"node\") second :timeseries count)" "(-> r1 first :segmented-queried-jobs keys)" "(-> r1 first :segmented-queried-jobs first val (get \"node\") first :timeseries count)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(-> r1 first :segmented-queried-jobs first val (get \"node\") first keys)" "(-> r1 first :segmented-queried-jobs first val (get \"node\") first :timeseries count)" "(-> r1 first :segmented-queried-jobs first val (get \"web\") first keys)" "(-> r1 first :segmented-queried-jobs first val (get \"web\") first :timeseries count)" "(-> r1 first :segmented-queried-jobs first val (get \"node\") first :timeseries count)" "(-> r1 first :segmented-queried-jobs first val (get \"node\"))" "(-> r1 first :segmented-queried-jobs first val node)" "(-> r1 first :segmented-queried-jobs first val keys)" "(-> r1 first :segmented-queried-jobs first val type)" "(-> r1 first :segmented-queried-jobs first val key)" "(-> r1 first :segmented-queried-jobs keys)" "(-> r1 first keys)" "(-> r1 first type)" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)) {:detected-jobs djs}))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(def djs (-> res first :grouped-jobs))" "(def res (->> (map (partial gcp.bucket.core/get *adb*) detect.explainer.ids/anomaly-details-id)
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :insights)))))))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(format \"%.2f\" (double 1))" "(format \"%.2f\" 1)" "(format \"%.2f\" 0.1)" "(format \"%f\" 0.1)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(clojure.string/blank? nil)" "(clojure.string/blank? \"\")" "(closure.string/blank? \"\")" "(string/blank? \"\")" "(-> r1 count)" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(in-ns 'detect.explainer.env)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(in-ns 'mp-client.slack)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                ) {:detected-jobs djs}))" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)
                                                (explainer/xf--explain! nil)) {:detected-jobs djs}))" "(in-ns 'mp-client.slack)" "(def mp-client.slack/channel->webhook-urls
                        (constantly \"https://hooks.slack.com/services/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\"))" "(in-ns 'mp-client.slack)" "(def mp-client.slack/channel->webhook-urls
                        (constantly \"https://hooks.slack.com/services/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\"))" "(-> djs count)" "(-> r1 count)" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)) {:detected-jobs djs}))" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)) {:detected-jobs djs}))" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)) {:detected-jobs djs}))" "(-> r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)
                                                (explainer/xf--span-detected-jobs)) {:detected-jobs djs}))" "(-> r1 :detected-jobs first :query)" "(-> r1 :detected-jobs first keys)" "(-> r1 :detected-jobs first type)" "(-> r1 :detected-jobs type)" "(-> r1 :segmented-queried-jobs keys)" "(-> r1 :segmented-queried-jobs type)" "(-> r1 :segmented-queried-jobs)" "(-> r1 keys)" "(-> r1 type)" "(-> res r1 type)" "(def r1 (util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                                (explainer/xf--bind-timezone *ac*)
                                                (explainer/xf--bind-segmented-queried-jobs *ac* *pac*)) {:detected-jobs djs}))" "(util/run-1 (comp (explainer/xf--bind-properties *ac* *pb*)
                                        (explainer/xf--bind-timezone *ac*))  {:detected-jobs djs})" "(util/run-1 (explainer/xf--bind-properties *ac* *pb*)  {:detected-jobs djs})" "djs" "(util/run-1 (explainer/xf--bind-properties *ac* *pb*)  {:detected-jobs djs})" "(letk [[[:queried-job query]] {:queried-job {:query {:a 1}}}]
                        query)" "(letk [[[[:queried-job query]]] {:queried-job {:query {:a 1}}} 
                  
                             ]
                        query
                        )" "(letk [[queried-job] {:queried-job {:query {:a 1}}} 
                  
                             ]
                        queried-job
                        )" "(letk [[:queried-job a] {:queried-job {:query {:a 1}}} 
                  
                             ] 
                        )" "(letk [[:queried-job [:query project-id [:job-plan plan]]] {} 
                  
                             ]
                        )" "(util/run-1 (explainer/xf--bind-properties *ac* *pb*)  {:detected-jobs djs})" "(-> type djs)" "(util/run-1 (explainer/xf--bind-properties *ac* *pb*) djs)" "(def djs (-> res first :grouped-jobs))" "(-> res first :grouped-jobs)" "(-> res first keys)" "(first res)" "(def res (->> (map (partial gcp.bucket.core/get *adb*) detect.explainer.ids/anomaly-details-id)
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(in-ns 'detect.explainer.env)" "(t0 {:1 1 :a 2 :b \"c\"})" "(t0 {:1 1 :a 2})" "(t0 {:1 1})" "(defnk t0 [a b :as d] (prn d))" "fnk" "(use 'plumbing.core)" "fnk" "(let [[a b] [1 2]] a)" "(let [[a b] nil] a)" "(let [[a b] nil])" "prn-str" "(generate-output a b)" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) '~k (list ~@symbols)))))" "(macroexpand-1 '(generate-output a b))" "a" "(generate-output a b)" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) '~k '~symbols))))" "(list 1 2 3)" "(seq 1 2 3)" "(generate-output a b)" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) (seq ~@k) (seq ~@symbols)))))" "(generate-output a b)" "(macroexpand-1 '(generate-output a b))" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) (seq ~k) (seq ~symbols)))))" "(macroexpand-1 '(generate-output a b))" "(generate-output a b)" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) ~k ~symbols))))" "(generate-output a b)" "(macroexpand-1 '(generate-output a b))" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %1 %2) k symbols))))" "(map #(+ %1 %2) [1 2 3] [3 4 5])" "(map #(+ %1 %2) [1 2 3] [3 4])" "(map #(+ %0 %1) [1 2 3] [3 4])" "(map #(+ %1 %2) [1 2 3] [3 4])" "(map (+ %1 %2) [1 2 3] [3 4])" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map #(format \"%s\\t%s\" %0 %1) k symbols))))" "(macroexpand-1 '(generate-output a b))" "(generate-output a b)" "(defmacro generate-output
        [& symbols]
        (let [k (map #(keyword %) symbols)]
          `(clojure.string/join \"\\n\" (map (fn [x y] (format \"%s\\t%s\" x y)) k symbols))))" "(form-map a b)" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `(assoc {} ~@k-and-v)))" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `{~@k-and-v}))" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `{~k-and-v}))" "(clojure.core/into {} ([:a a] [:b b]))" "(form-map a b)" "(macroexpand-1 '(form-map a b))" "(defmacro form-map [& symbols]
        (let [entries (map (fn [x] [(keyword x) x]) symbols)]
          `(into {} ~entries)))" "(defmacro form-map [& symbols]
        (let [entries (map [#(keyword %) %] symbols)]
          `(into {} ~entries)))" "(into {} [[:a a] [:b b]])" "(into {} [:a a :b b])" "(macroexpand-1 '(form-map a b))" "(form-map a b)" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `(into {} ~k-and-v)))" "(form-map a b)" "(def b 2)" "(def a 1)" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `(into {} ~@k-and-v)))" "(macroexpand-1 '(form-map prn \"a\" a))" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          `(into {} ~@k-and-v)))" "(macroexpand-1 '(form-map prn \"a\" a))" "(defmacro form-map [& symbols]
        (let [k-and-v (interleave (map #(keyword %) symbols) symbols)]
          '(into {} ~@k-and-v)))" "(macroexpand-1 '(form-map prn \"a\" a))" "(macroexpand-1 '(form-map prn \"a\"))" "(def a 1)" "(def \"a\" 1)" "(macroexpand-1 '(form-map prn \"a\"))" "(defmacro form-map [& args]
        (let [k-and-v (interleave (map #(keyword %) args) args)]
          (list k-and-v)))" "(macroexpand-1 '(form-map prn \"a\"))" "(defmacro form-map [& args]
        (let [k (map #(keyword %) args)]
          (list k)))" "(macroexpand-1 '(form-map prn \"a\"))" "(defmacro form-map [& args]
        (let [k (map #(keyword (symbol %)) args)]
          (list k)))" "(macroexpand-1 '(form-map prn \"a\"))" "(defmacro form-map [& args]
        (let [k (map #(keyword (symbol %)) args)]
          args))" "(macroexpand-1 '(form-map prn \"a\"))" "(form-map prn \"a\")" "args" "(defmacro form-map [& args]
        (let [k (map #(keyword (symbol %)) args)]
          (list args)))" "(form-map a a)" "(defmacro form-map [& args]
        (let [k (map #(keyword (symbol %)) args)]
          '(list ~k)))" "(form-map a a)" "(defmacro form-map [& args]
        (let [x (map #(keyword (symbol %)) args)]
          '(list ~@x)))" "(defmacro form-map [& args]
        (let [x (map #(keyword (symbole %)) args)]
          '(list ~@x)))" "(form-map a a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          '(list ~@args)))" "(form-map a a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          [args]))" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          args))" "(macroexpand-1 '(create-dispatcher abc))" "(macroexpand-1 (create-dispatcher abc))" "(defmacro create-dispatcher [name]
  (let [name-w-prefix #(symbol (str % \"-\" name))]
    `(do
       (def ~(symbol name) (atom {}))
       (defn ~(name-w-prefix \"get\")
         ([] (println \"no tag provided\"))
         ([tag#] (println \"called with tag\" tag#))))))" "
(without-mischief
  (println \"Here's how I feel about that thing you did: \" message))" "(defmacro without-mischief
  [& stuff-to-do]
  (let [macro-message (gensym 'message)]
    `(let [~macro-message \"Oh, big deal!\"]
       ~@stuff-to-do
       (println \"I still need to say: \" ~macro-message))))" "(mac-1 )" "(defmacro mac-1
        [& stuff-to-do]
  (let [macro-message (gensym 'message)]
    '[~macro-message \"Oh, big deal!\"]))" "(macroexpand-1 (form-map a a))" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          (list '(~x))))" "(macroexpand-1 (form-map a a))" "(macroexpand (form-map a a))" "(form-map a a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          '(list ~x)))" "(form-map a {:a 1})" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          '(list ~x)))" "(form-map a {:a 1})" "(form-map a {})" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          x))" "(form-map a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          ))" "(form-map a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          (list x)))" "(form-map a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          '(list ~x)))" "(form-map a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          '(vec ~x)))" "(form-map a)" "(defmacro form-map [& args]
        (let [x (map #(keyword %) args)]
          x))" "(form-map a)" "(defmacro form-map [x]
        `(list (keyword '~x) ~x))" "(form-map a)" "(defmacro form-map [x]
        `(list (str '~x) ~x))" "(form-map a)" "(defmacro form-map [x]
        `(list '~x ~x))" "(form-map a)" "(defmacro form-map [x]
        `(list ~x))" "(form-map a)" "(def a 1)" "a" "(defmacro form-map [x]
        `(list (symbol ~x) ~x))" "(str 'a)" "(type 'a)" "(type #'a)" "#'a" "(type @(symbol \"a\"))" "(type (symbol \"a\"))" "(type (symbol \"asd\"))" "(prn (symbol \"asd\"))" "(symbol \"asd\")" "'" "#" "#'" "(name a)" "a" "(keyword a)" "(keyword 1)" "(key? 1)" "key" "(form-map :a 1 2)" "(defmacro form-map [& args]
        `(list ~@args))" "(form-map :a 1 2)" "(defmacro form-map [& args]
        `(list args))" "(form-map :a 1 2)" "(defmacro form-map [& args]
        `args)" "(form-map :a 1 2)" "(defmacro form-map [& args]
        args)" "(defmacro form-map [& args])" "(greeting french-map)" "(def english-map {\"id\" \"1\", \"language\" \"English\"})
(def  french-map {\"id\" \"2\", \"language\" \"French\"})" "(defmethod greeting \"English\" [params]
 \"Hello!\")
" "(defmulti greeting
  (fn[x] (x \"language\")))" "(prn a)" "a" "(def a (clojure.string/join \"\\n\" [\"asd\" \"B\" nil]))" "(clojure.string/join \"\\n\" [\"asd\" \"B\" nil])" "(string/join \"\\n\" [\"asd\" \"B\" nil])" "(case 3 (1 2) :a :b)" "(case 1 (1 2) :a :b)" "asd" "cnt" "(def cnt (future (count (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))))" "@f" "f" "(def f (future (Thread/sleep 10000) (println \"done\") 100))" "(def cnt (future (count (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))))" " (count (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))" "(count (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))" "(first (gcp.bucket.core/keys (:alert-bucket ml-dev-tools.swank.env/resources)))" "(:rows a)" "a" "(a)" "(def a (i/dataset [:a :b] [[1 2] [3 4]]))" "(i/dataset [:a :b] [[1 2] [3 4]])" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\"))" "(in-ns 'affinity.skeleton.env)" "(bucket/keys (safe-get resources :test-bucket))" "(bucket/keys (safe-get resources :alert-bucket))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"/Users/hojinyoo/.cred/ml-swank-prod-1.json\"))" "(bucket/keys (safe-get resources :alert-bucket))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"/Users/hojinyoo/.cred/prod-1.json\"))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"/Users/hojinyoo/.kube/config\"))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"/Users/hojinyoo/.cred/prod-1.json\"))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"~/.cred/prod-1.json\"))" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\" \"qwe\"))" "tmp" "(def tmp (gcp.bucket.cloud-datastore/service \"smart-hub-prod\"))" "(bucket/keys (safe-get resources :alert-bucket))" "(in-ns 'affinity.skeleton.env)" "(bucket/keys (safe-get resources :alert-bucket))" "asd" "(bucket/keys (safe-get resources :properties-bucket))" "(bucket/keys (safe-get resources :alert-bucket))" "(bucket/count (safe-get resources :alert-bucket))" "(bucket/keys (safe-get resources :alert-bucket))" "(bucket/keys (safe-get resources :alert-bucket) \"00000062-1000-4ec3-8096-49ffd56a7b24\")" "(bucket/exists? (safe-get resources :alert-bucket) \"00000062-1000-4ec3-8096-49ffd56a7b24\")" "(bucket/bucket-name (safe-get resources :alert-bucket))" "(bucket/keys (safe-get resources :alert-bucket))" "(bucket/get (safe-get resources :alert-bucket) \"00000062-1000-4ec3-8096-49ffd56a7b24\")" "(bucket/keys (safe-get resources :alert-bucket))" "(first (bucket/keys (safe-get resources :alert-bucket)))" "(first (bucket/keys *ab*))" "*ab*" "(in-ns 'affinity.skeleton.env)" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\"/\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\"\\.\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\".\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\" /.\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\" \\/\\.\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" #\" /\\.\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\" \"/\")" "(clojure.string/split \"wqeiopjsadioqwe/wqeoiuioasd.png\")" "clojure.string/split" "string/split" "pl" "(def pl (ic/xy-plot :index :value :group-by :property-value :legend true :points true :data ts-ds))" "(def pl (ic/xy-plot :index :value :group-by :property-value :legend true :points true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(i/save (ic/xy-plot :index :value :group-by :property-value :legend true :points true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(prn ts-ds)" "ts-ds" "(i/save (ic/xy-plot :index :value :group-by :property-value :legend true :points true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(i/save (ic/xy-plot :index :value :group-by :property-value :legend true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(prn ts-ds)" "(i/save (ic/xy-plot :index :value :group-by :property-value :legend true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(save (ic/xy-plot :index :value :group-by :property-value :legend true :data ts-ds) \"tmp.png\" :width 1000 :height 800)" "(ic/xy-plot :index :value :group-by :property-value :legend true :data ts-ds)" "(prn ts-ds)" "(def ts-ds (detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"$os\"))" "(prn ts-ds)" "(def ts-ds (detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"$os\"))" "(prn (detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"$os\"))" "(detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"$os\")" "(detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"os\")" "(keys s2)" "(detect.explainer.model.stationary/form-timeseries-ds-segmentation q2 s2 \"$mp_lib\")" "(i/dataset [:a :b] [[1 2 3] [4 5 6]])" "(i/dataset [:a] [1 2 3])" "(i/dataset [1 2 3])" "i" "(format \"%s\" (java.util.UUID/randomUUID))" "(UUID/randomUUID)" "(java.util.UUID/randomUUID)" "(rand)" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "(format \"`\")" "(format \"\\`\")" "(format \"\\'\")" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "(clojure.pprint/pprint-str a2)" "(clojure.pprint/pprint a2)" "(prn a2)" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "a2" "(mp-client.slack/send-message :explain {:text (format \"*test*\\n```%s```\" (detect.explainer.model.stationary/->prn-str r2))})" "(mp-client.slack/send-message :explain {:text (format \"```%s```\" (detect.explainer.model.stationary/->prn-str r2))})" "(detect.explainer.model.stationary/->prn-str r2)" "(:rows r2)" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "(:rows r2)" "r2" "(mp-client.slack/send-message :explain {:text (format \"```%s```\" (prn-str r2))})" "(mp-client.slack/send-message :explain {:text (prn-str r2)})" "(mp-client.slack/send-message :explain (prn-str r2))" "(mp-client.slack/send-message :explain {:text \"test\"})" "(in-ns 'detect.explainer.env)" "(def channel->webhook-urls
    (constantly \"https://hooks.slack.com/services/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\"))" "(in-ns 'mp-client.slack)" "(def mp-client.slack/channel->webhook-urls
    (constantly \"https://hooks.slack.com/services/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\"))" "  (defn mp-client.slack/channel->webhook-urls
    (constantly \"https://hooks.slack.com/services/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\"))" "(type (prn-str r2))" "(prn-str r2)" "r2" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "r2" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "r2" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "r2" "(prn-str r2)" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "r2" "(print-str r2)" "(prn-str r2)" "(def r2 (detect.explainer.model.stationary/explain! a2 q2 s2))" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "(def s2 (explainer/queried-job->segmented-queried-jobs
           {:appdb-client *ac*
            :public-api-client *pac*
            :properties-bucket *pb*
            :project-id->timezone-fn (constantly \"US/Pacific\")
            :queried-job q2
            :statsd nil}))" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "(def s2 (explainer/queried-job->segmented-queried-jobs
           {:appdb-client *ac*
            :public-api-client *pac*
            :properties-bucket *pb*
            :project-id->timezone-fn (constantly \"US/Pacific\")
            :queried-job q2
            :statsd nil}))" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "a2" "(detect.explainer.model.stationary/explain! a2 q2 s2)" "(def s2 (explainer/queried-job->segmented-queried-jobs
           {:appdb-client *ac*
            :public-api-client *pac*
            :properties-bucket *pb*
            :project-id->timezone-fn (constantly \"US/Pacific\")
            :queried-job q2
            :statsd nil}))" "(def a2 (-> res first :grouped-jobs first :anomalies first))
  (def q2 (-> res first :grouped-jobs first :queried-job))" "(first res)" "(def res (->> (map (partial gcp.bucket.core/get *adb*) detect.explainer.ids/anomaly-details-id)
                                    (filter (fn [x]
                                              (core.error/silent
                                               (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(def res (->> detect.explainer.ids/anomaly-details-id
                                    (gcp.bucket.core/get *adb*)
                                    (filter (fn [x]
                                              (core.error/silent
                                               (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(gcp.bucket.core/get *adb* (first detect.explainer.ids/anomaly-details-id))" "(gcp.bucket.core/get *adb* (first anomaly-details-id))" "(in-ns 'detect.explainer.env)" "(gcp.bucket.core/get *adb* (first anomaly-details-id))" "(count anomaly-details-id)" "(def anomaly-details-id [\"001b12cf-f8e8-422a-8869-044cec2fa185\",
                         \"00ad6bc7-0910-4b1d-a628-be9f907d09a6\",
                         \"00f2c8af-02e2-4f94-949f-e544a9796980\",
                         \"012bbe04-153f-4ab0-99ef-1ae01bc154b4\",
                         \"016fc4d3-3025-4b4c-a3e0-07bf6efeb2e3\",
                         \"0192e7eb-1e29-4e44-95cd-92d31da47f60\",
                         \"01c79e50-2060-485d-b3fa-6af79265645b\",
                         \"01d39be6-bd21-4dce-9bf7-d2caacb569a3\",
                         \"01ff16fa-32ec-469c-9332-eba7f14c2fbc\",
                         \"02a9056d-bc7d-4637-a13a-2e63c73971a4\",
                         \"02ff82d6-a7a8-47e6-9181-66d6ed613b86\",
                         \"032a9ead-475e-4660-b7ab-751acf9e14d7\",
                         \"03885af2-6dcd-4eff-887c-7ababebea744\",
                         \"03c0905a-3e85-461c-94da-fd6acadf7719\",
                         \"0416c504-8f18-4b95-9c33-fe3a2cc7e838\",
                         \"04756913-7f50-4c5c-997d-6c7249a23f2a\",
                         \"0490eef2-6aab-4c67-99fd-cb912a58f3d9\",
                         \"0497af4b-1f98-40fc-85ab-06230809251c\",
                         \"0504c985-f911-4cb7-8be0-a1dae800f6ca\",
                         \"0573495d-c716-42d6-92a4-a60d52ef1c5a\",
                         \"05de8a0b-b5e7-45d8-b07b-b69703f2788f\",
                         \"0622b6ed-c5aa-4100-9c71-8ebaea51148e\",
                         \"0658cdb0-d5dd-4c9c-b476-b4e9ca86d2f4\",
                         \"067194c5-9118-4d24-867b-4ac6706cd56c\",
                         \"068d7879-9ec3-483b-a097-04a450216109\",
                         \"075aae20-639b-4928-aab1-88bede257ca1\",
                         \"077b91e2-f9ab-4e10-851d-b0b4fd15e55b\",
                         \"07bf3242-81c7-4b14-b7a9-413882e9ac98\",
                         \"07f93d6e-fcb7-4908-8451-012086409270\",
                         \"08208620-eca9-4539-b473-4901e88214ec\",
                         \"0870c855-9b49-4380-8dbf-e19307c94acd\",
                         \"0891acbc-2c04-429a-b5e1-a71d9a64be8c\",
                         \"093a202b-2530-4286-862b-94c8b547069e\",
                         \"09ba2be5-f4db-476b-aedb-aff7a7c7c7e1\",
                         \"09ed1c10-2d78-4add-a1a9-a2a8088b7c95\",
                         \"0b378bcf-edac-46c1-b60c-668257274a9b\",
                         \"0bdac634-154c-4172-a99f-0c5814300180\",
                         \"0c0e3ac5-3dac-4d99-83c8-acb9e83b0029\",
                         \"0c2475aa-db4b-478a-84da-545abbc9193f\",
                         \"0ca21223-a94f-4735-8b3d-882a20f605e0\",
                         \"0cae4767-2fba-47f1-b56a-125e58f6aa64\",
                         \"0cf55720-a6bf-43e5-a504-3806c9e76aa1\",
                         \"0d473a52-c3d2-4beb-a428-0395547dbda0\",
                         \"0db43d01-00e8-48a0-aba1-7d9cd8081871\",
                         \"0e26ca65-2120-409f-a026-070224f00704\",
                         \"0ea7f080-2161-4eb0-b70f-35351aec493a\",
                         \"0f345fbd-98be-4855-a2bf-a41025118c9e\",
                         \"0fd4af03-3139-40aa-960a-2462e4c1de23\",
                         \"10213345-72c1-4377-b966-167185369d37\",
                         \"10584c0d-22c9-42db-aada-431b6f5ce778\",
                         \"110afdaf-b968-4039-b091-dbbbfc24df33\",
                         \"11759cb0-468f-4fe2-b2b7-fc5a5da31bf8\",
                         \"12784948-f710-440b-ac23-de25e5eecf25\",
                         \"12e964a8-9cd0-49d6-ba00-ee5fc1a08fe3\",
                         \"13019a8e-3048-4355-89f6-a7fd4071405a\",
                         \"13ae62d9-5982-4615-8bc4-ff75c51c0c0a\",
                         \"14413fe4-4be1-4415-951c-4d4072b6b18a\",
                         \"1470872e-af59-4d76-a1f2-d87c7ea8c20a\",
                         \"14d55ca2-221a-4c9d-8c3f-5822dd03970d\",
                         \"156646a7-169e-4a26-89f7-d3b3dc5f1751\",
                         \"1577c2ea-a542-4554-8bfc-ebaeaa087f76\",
                         \"15f589e9-d104-4e64-97bb-8bbc3163c1c0\",
                         \"164a48e4-f32e-411f-b5fe-baf34996b8f2\",
                         \"1665791a-e2ce-4f48-9fc2-a1168064502e\",
                         \"169e3eff-157e-4037-88ad-962f7762f498\",
                         \"16a6d45c-6eaf-4211-b765-b5a59d82d12b\",
                         \"170e7c8a-8875-44bc-9b2d-48ade25feb73\",
                         \"17181d26-01ec-4837-8b7b-4f6d4aa63dc8\",
                         \"175039d3-23b5-4c8a-b4da-0305d2f36f58\",
                         \"18b04b57-ba15-4d38-af27-3742dad934ab\",
                         \"1932b95d-e2c6-4d13-8c79-71daa5d3c053\",
                         \"198ee760-0e0e-46dc-b491-50a42db3b6a9\",
                         \"19e0f666-8364-4584-80f4-5099050ec3b7\",
                         \"1a23acb6-adec-4f6d-aaea-9e12d3ea2b73\",
                         \"1a976b0b-d121-46db-b0ea-528054725837\",
                         \"1a9bcf24-8927-4144-aace-43006282f0c6\",
                         \"1adc687d-bded-4254-ac12-132ac9863dac\",
                         \"1b059c06-fa64-42f6-b640-eebb094dc0c3\",
                         \"1c1f27b3-75e8-434f-bcbe-5f1cf43f1d28\",
                         \"1c921ebd-4898-41f1-9849-cf685791cd86\",
                         \"1d7d9634-91da-4016-a0fb-b5fd74517789\",
                         \"1e002832-b085-4012-8bb0-9c9bba321ec6\",
                         \"1e0e7cc5-b3a5-4b6f-9235-781528941672\",
                         \"1e963e5b-ebe4-454d-b4a6-4e525503e3d3\",
                         \"1ed85d36-d946-429e-8489-07de427c49ef\",
                         \"1f169b3f-e0d8-4b4e-b2ef-d24a812061ce\",
                         \"1f756de7-7fb9-45b5-b4af-b9e559bcd1a3\",
                         \"1f7ee65c-9ba6-457d-bb93-0803df2b0d5a\",
                         \"1fa33dd6-f02d-4678-841a-ee16e626d272\",
                         \"1fc33e67-27ad-44c9-9afa-023f89afce96\",
                         \"1fe3c884-0d08-495e-8074-0386a27e2112\",
                         \"2235a48b-1d24-4ac2-9731-6eb8ce0853df\",
                         \"22eb05f1-437d-45dc-81e1-0beb7a5ee121\",
                         \"22effef9-2172-4540-a92b-1a5acb78fcc7\",
                         \"23036417-0244-4d71-9107-e97af81a03d0\",
                         \"23536f9f-f7d2-4e42-a8b1-aeaf42a4e133\",
                         \"235c53eb-e327-4f5d-9581-f77d598e7d36\",
                         \"23d0e678-c6ad-42e8-b741-63d2aa40c530\",
                         \"23f1aec9-b42b-413b-b27e-cfd1902be970\",
                         \"24cda6df-83a7-4b8f-93ce-05ba2610f339\",
                         \"24d01821-471d-4a8a-8483-bebd33b80ab1\",
                         \"2523c42b-4fbd-408d-8ac7-5f78f71fa1ec\",
                         \"256a7c25-cae8-4c6e-b36d-6a1a2928d10f\",
                         \"25aacd53-e46c-490e-9e42-cd5e5a24b1ec\",
                         \"260332ce-f639-4f69-8395-1f78c92b9152\",
                         \"2727cd00-9f0e-49a6-8ed7-81d5d9a909b5\",
                         \"27afa49d-0359-412a-9538-b7af0831f851\",
                         \"27fef5a2-4130-4c04-828c-318b40f076b1\",
                         \"283129c7-eaed-4bea-a9f9-28c6dedbfa2a\",
                         \"2887df1b-22df-462c-86f3-93b13b131700\",
                         \"28ee4c0c-7cb3-4a35-af88-ad16a4f05a7d\",
                         \"290fa845-4a8f-48db-b897-57bd245a2bda\",
                         \"291fa364-f1c6-4fd0-99cd-f068449e76a8\",
                         \"2931d3c9-86d9-4276-b50f-ed87660c408d\",
                         \"299eb55b-c309-4a6c-bd2d-ca0317e548f1\",
                         \"29c9684c-13d7-4df7-86b8-d1a76cc2a9eb\",
                         \"29d57068-4a57-4528-bca9-997feb31ca32\",
                         \"2a767ef3-1cb8-4144-8313-e2b4948e1a75\",
                         \"2afd542f-4983-4339-8f34-07986f518333\",
                         \"2b1d80a1-4ef5-4d2d-a53c-7ff9c37d0d46\",
                         \"2b7dfa31-2722-4319-8275-43f2d0a21a0c\",
                         \"2b8ab265-56dc-4f54-828d-6ea7b0a02755\",
                         \"2c5d45c0-f320-44e3-b6f6-3fcaf3ab044a\",
                         \"2d56b262-dc87-4be8-8026-44df30c3dea3\",
                         \"2d904725-1c04-46a5-9dba-55f6ac738c56\",
                         \"2d9ebfc5-324d-4040-a469-e4373db65082\",
                         \"2e4dadea-06da-4202-8d11-304d3cb4ebed\",
                         \"2f22c108-ffa3-4be0-ab65-3a133b416b60\",
                         \"2f26330c-948f-4254-ad48-f15e1a59d848\",
                         \"2fb33065-4df6-4338-a455-affac9677a94\",
                         \"2fe6e5fa-8d55-47a1-8936-850ab6349224\",
                         \"30d1ce26-78b7-43d3-8974-b203fecc9e48\",
                         \"30ea68eb-cdbc-41d1-9c7e-a9137488713b\",
                         \"31411d16-3283-43f6-86f1-ca745b9838df\",
                         \"31c4081a-34bb-46ac-9fa6-dccb17502b84\",
                         \"31de3f5a-57ad-4749-b163-d3e1fdc0578c\",
                         \"338e0dd2-02df-4637-8583-7bd43f98591a\",
                         \"33d26423-9356-4d1c-b579-1675138b2401\",
                         \"33f7d7e5-69dd-437c-bf63-a7087b5da8c5\",
                         \"340aa83b-4bd2-41ca-b83e-218a5faa6d35\",
                         \"3431168d-b9ba-4d72-9d06-e18b2246080f\",
                         \"346239dc-7b22-4649-b0bb-441d49d7ece8\",
                         \"34eb6607-638a-4604-ac0b-2c837f85c9f2\",
                         \"352678c1-1857-4c50-849f-4d31bc471595\",
                         \"35686315-e608-4c0e-a1b5-3e3b06fb5a6e\",
                         \"36438ee1-5ccc-4a7c-8898-052f9ed2a49a\",
                         \"364bf1fd-2bf2-4e11-8e96-19e4643cddcf\",
                         \"365b6146-6ee5-42cb-a42c-d15dcb538034\",
                         \"37e4b44e-6c03-40c5-9592-c701fc878bcf\",
                         \"38779f59-d319-4576-8333-7d15f8336d0b\",
                         \"3933a4bc-3fdf-4130-adec-49da36b39ce0\",
                         \"393781df-b0db-414a-9c51-12d571966a78\",
                         \"3a1a3d04-fec3-45da-b310-018d0264ba55\",
                         \"3a251c73-3db4-44b3-9acf-576df500d046\",
                         \"3a3c201a-e30d-4bc0-9029-fac9a6d5470b\",
                         \"3a759ae8-4ac9-4d76-b126-07732df74771\",
                         \"3aeab989-55d3-4cc1-92ca-b03158ef6db3\",
                         \"3bb14d35-5e75-40fe-ad44-25cc59eec0b9\",
                         \"3bd0daf8-3da2-467d-95d0-5fd4c4a01228\",
                         \"3bf5611c-1365-4ed2-a20f-b0e3cb4c8d8c\",
                         \"3cc342dd-88b5-4f5b-9147-e7c5d706f733\",
                         \"3d166b3e-0cee-410f-b1d3-fccf16bb2cbc\",
                         \"3d876eaa-5b4e-4ef1-a743-5b6023f3dfa7\",
                         \"3e2fe02b-94f1-4b31-9e21-0f93b0ba9c6a\",
                         \"3e34beed-bcd5-4d38-a743-3e444d473e82\",
                         \"3ef13d2f-4bbc-4652-a363-9f6feed34403\",
                         \"3f4f104c-2090-4b97-8ed7-3f44a974989c\",
                         \"405ab327-92ca-48d0-92ec-a89a437d730b\",
                         \"4094fb92-0542-4296-8669-92505cfaf8cb\",
                         \"4095bc84-da81-4c36-8e49-a5673020b675\",
                         \"40f44a39-d09f-4657-b9d6-93ef245ae90c\",
                         \"412f1774-770d-40d4-81ba-e52906638203\",
                         \"41442b49-a243-46ed-846e-94ed537a1b77\",
                         \"41a3426c-5ce8-48a1-b43e-a00202ef4fac\",
                         \"41db2a46-74e0-456f-9cf6-bf74de3b263e\",
                         \"42abf443-e84d-47a5-812c-58eb43ebe9ef\",
                         \"42b5c2cd-ad02-40be-a773-ce075efe38e5\",
                         \"42c095ae-2e11-4105-ad62-b58a0635a39a\",
                         \"42d6c506-5524-4479-a75a-3e54e8d24b55\",
                         \"43838d94-1ff7-4724-a3fd-d7d609f08bcc\",
                         \"4405af61-7dd2-4cf0-862e-a96765b6df63\",
                         \"44f78008-b7a6-4d05-b598-c51ead739b99\",
                         \"450d88ae-0495-464c-998c-132dde860785\",
                         \"46295d48-c644-48a8-b973-3ed2167d8049\",
                         \"463b2b09-7bbe-4bd7-a5a0-205910a650c4\",
                         \"47569dc5-4118-48e8-8433-1680895b4e48\",
                         \"4794fd66-e2eb-4ce3-ac9a-1e9242d62023\",
                         \"47cfd4fd-fa96-4ce0-80c5-bcdded806cc9\",
                         \"49d0c1c4-3ff6-48d2-9f78-61fc22a12b82\",
                         \"4a2133d8-ea34-4503-b841-7fbb118dedec\",
                         \"4a317700-7106-4a3b-91ae-91ef996af465\",
                         \"4b79a498-c226-487c-836a-348ca1d82ac6\",
                         \"4b842b7e-1197-4a05-a2c8-7a318c037678\",
                         \"4bd34105-1c16-4511-81b5-4739dad62c74\",
                         \"4be0aad4-7d88-4a1f-a1e0-4c11af8e5035\",
                         \"4c1dcf2c-fff2-496f-bb51-f2bf55cbed97\",
                         \"4c8d472a-06f8-4bb2-8216-07153bfb029b\",
                         \"4c975a26-459e-421b-9e6e-8bef9438f583\",
                         \"4d668092-e9a9-4cef-b051-1f1edde4ed76\",
                         \"4d764941-398e-4a71-af65-4f1607255f5b\",
                         \"4d84dbb4-ebe9-466d-8e09-9cf2f581e9d2\",
                         \"4ebeaf1b-1fc7-46a4-ba40-694f191ede97\",
                         \"4f2b2d3d-1f89-428f-bb6f-58f6a99fb67c\",
                         \"4f5c5f02-ae81-477e-9c11-a16b6381ade6\",
                         \"4f832039-2458-41a9-9ec1-940a884a6e80\",
                         \"4f9c85ec-a1d9-4ff7-b7cf-1cdd25823db9\",
                         \"5072d292-426a-4415-b34e-cb63e59a6b7b\",
                         \"508c4625-60fc-4fc2-9a0f-733149068f26\",
                         \"50ae907c-5839-4079-acbc-222a91c0b374\",
                         \"50b32931-465e-4cf4-9175-45bb640deb88\",
                         \"50b6620c-8e53-4070-ad1c-a70441642cb9\",
                         \"50f072ab-3749-4915-9c3e-9977256f46e1\",
                         \"512264bd-ff76-43b9-960f-aee2f064d51e\",
                         \"5125dca7-b7af-4ff1-a0de-68c2376b9d7f\",
                         \"5186d754-ce03-4ec5-8657-90b0c10716b4\",
                         \"5281bf36-fc3d-43b7-9384-4db4ceb7815c\",
                         \"52a8700a-9049-4fac-bc14-a864543fcd46\",
                         \"52c7fb2e-a6e1-44b6-8dc8-65e0048972e7\",
                         \"531835ef-e4b1-44c0-bbe7-f3133d21e548\",
                         \"549337b3-2571-4f08-89a2-2c3013cf500c\",
                         \"54b3b4f6-24c7-47f8-9928-d8e0c5644d03\",
                         \"54d92e2b-cb34-45a0-a403-24a7f88f1468\",
                         \"552a9c30-41ec-4827-bfaf-2c2cbab61626\",
                         \"5574a972-ba55-4bec-bef7-057a055551da\",
                         \"55b9f9d3-e0ef-460a-af84-71cc8c144bca\",
                         \"55d41ea0-9510-45e1-813b-f679cd21e771\",
                         \"56260047-aae4-4197-a1a6-8955cf814d38\",
                         \"56ec6ed1-5ba6-441d-8cec-f0c517e4f971\",
                         \"57b6a71b-b306-4d53-89e0-95584b62234f\",
                         \"57d64e28-4e6f-4e18-92ea-2370408b25c0\",
                         \"5830d48c-bc48-4e1d-8481-1f84b238d5d7\",
                         \"588ec0e4-52f4-4245-a1ad-99e9e32e0c0d\",
                         \"5893a8da-02a3-46ec-9b18-927988f109af\",
                         \"5897fe02-825c-42c5-bc29-f0499440ba41\",
                         \"58ab32a3-ab9d-4a2c-9fe9-3fe3ca71cf73\",
                         \"58e3fa4e-ba1f-43dc-9180-b3a57b8b76f5\",
                         \"59888f2d-00e6-4a2d-b616-c87a61c13041\",
                         \"59ace69a-bb77-45ac-ada7-a58f19b63d81\",
                         \"59fec24b-9731-43e1-ae45-4a04e5cd7c3c\",
                         \"5a70f2e9-d45f-4a8c-9e9f-d17093d7adf5\",
                         \"5a7310c0-ff2f-4eb1-babf-7345f311d466\",
                         \"5adf0238-5a8f-4016-b783-792c6ce19814\",
                         \"5ae19a26-7306-442a-8761-7016db42fcd5\",
                         \"5ba2529e-945f-4ab3-a457-d3aaab298062\",
                         \"5bfb884b-778d-4219-a921-456a54305307\",
                         \"5c66444b-3ea0-41c2-b75d-46f3adf72109\",
                         \"5c6a051b-7fd1-47e7-887f-e7014fd98e8c\",
                         \"5d40030d-6db8-4089-b561-06831fe2ac3d\",
                         \"5d40e364-fac5-4f6a-af44-35171e2590cb\",
                         \"5d957a7f-1c11-4160-9035-a04a76f5dbfe\",
                         \"5d9de8d1-4d28-4691-8cc4-afa930632578\",
                         \"5da88085-afca-43e5-ac46-41c8257100c6\",
                         \"5e0924f8-1c5a-4029-a974-3ffcc989cfad\",
                         \"5e17c52a-5346-44a0-800b-079ca01edf14\",
                         \"5e64460e-87a1-423e-9dd7-0dafb8c18e57\",
                         \"5ea26b64-1398-48a7-a53c-03337f79155e\",
                         \"5ed1187f-4a7c-487c-85a9-97a599f470fe\",
                         \"5f1b37f3-867c-492e-909b-9eef638fca62\",
                         \"5fa86d63-55b7-42b1-9e44-abec00bbbfa9\",
                         \"60bb0cd0-fd1b-4e2e-b5bd-c8d49f63ac4c\",
                         \"6113d90c-0f1c-4b92-9717-c5c5cd8498a3\",
                         \"615872d7-fd2b-463b-831c-214d558ad67f\",
                         \"618073f0-a6ab-46ed-a554-8a465f9c36d8\",
                         \"6293ec24-0758-40f5-9478-d481b4634342\",
                         \"635a2781-6252-41e8-87df-1eb1cec45288\",
                         \"63afe341-abae-494c-a17d-c65e63bb69b4\",
                         \"6491460d-6bec-4b17-a450-fab3d7453067\",
                         \"64a2f924-3e55-4438-bdc4-63354843a37e\",
                         \"64e6c14d-c542-4d7e-916c-83be93f2ff3c\",
                         \"65a310a3-2088-47b4-b0d2-a9f3a5555e32\",
                         \"6674436d-b7e8-4202-953d-8e8c36a6ee8c\",
                         \"66bd4a87-09cc-4094-a316-21ac50a47009\",
                         \"66bfb437-f4a2-433b-873b-02b1b5c873d2\",
                         \"66ea2e61-3e55-405b-b368-3e9bbacb04af\",
                         \"66fab1b2-12f6-4d6c-99e8-392bf26455d2\",
                         \"6725c695-62d5-4cc9-b405-ac61d10a792e\",
                         \"674b011c-5cd8-4d64-a17e-9305f547d2ae\",
                         \"67ebb4ca-5db1-41db-827b-860b6de582b8\",
                         \"68fb8e78-0dd6-4ede-adc8-e05da4494ca9\",
                         \"690466c5-d7c5-41f1-901c-a4c6b90ca968\",
                         \"695832e6-cbc3-4c54-ab4f-39ab68afba24\",
                         \"69660b9a-984c-43c0-8800-8778fdc1e128\",
                         \"69785d31-404b-41ed-80b2-1400c585d3ec\",
                         \"69826579-0bc6-449e-980a-edd72e60a4f9\",
                         \"6a6d8fc3-8352-43eb-8f78-4755f2af79d0\",
                         \"6aa69ba6-fe89-4a89-80c8-4333067fbb7f\",
                         \"6b51d1dd-d051-4b15-86ee-9e21a9960e44\",
                         \"6b679ee3-e5d4-4331-bf81-2968723004bc\",
                         \"6cb574b5-e400-454a-bdda-94a33f756072\",
                         \"6d0e5bd0-9adb-45d9-b550-2076f734bfb7\",
                         \"6d3f53b8-1972-447e-be76-b35f0a1940f1\",
                         \"6d5206ea-b8fa-4803-90bc-aa3478826e5c\",
                         \"6df057ba-5bb0-49cc-bae0-a2aec5bc27c8\",
                         \"6e836781-c637-481f-8be9-5d88fc48a2fb\",
                         \"6ee9eb6b-9ebf-4b48-af9c-802e4ad801f3\",
                         \"6efb434f-f0e7-4a39-9f0f-366374b26c7c\",
                         \"6fc07c15-3f71-46ee-a9df-b60897ca8980\",
                         \"6fd9029b-cf62-4251-9129-05756d3d7f43\",
                         \"70b6a1dc-d0ec-4568-9407-d318d4cdc19f\",
                         \"716c526b-1e3b-4f42-94e7-9255795d5bdf\",
                         \"71b18c3f-be0f-4aa4-97ac-3bcbb305657b\",
                         \"720e8c14-31a7-4133-973d-1f1fb53816d9\",
                         \"722690dc-a43d-4e82-9713-2a03f7ddb5d8\",
                         \"72702e6e-5a2f-471a-b90e-0379d0778b9e\",
                         \"72c3c67d-770d-43d2-a7c6-93097fed3b7e\",
                         \"73b28d9c-5ed5-4517-b675-3e3c0812c11b\",
                         \"740dd6bd-3327-4cb5-9531-1bad380b7930\",
                         \"742d80bd-ce29-4b1b-81de-a0a305f67700\",
                         \"74337737-1bdc-4ef9-bbfc-05a638c73b32\",
                         \"74e662e6-e215-43e7-8485-ddb13237e336\",
                         \"75258080-2171-4ea4-a249-c83c3cd700bc\",
                         \"76d6b487-a4fd-4dd3-9ec1-5aff782c6d1c\",
                         \"770b9cff-15b4-4c09-b01a-aea0f50b23ed\",
                         \"77119f1f-f639-4e32-9f21-1e0ee8c223ba\",
                         \"7763160d-5013-4e34-9aa2-d179205c0760\",
                         \"7775556d-0649-438e-bc31-b914e06880a8\",
                         \"778a5757-d568-4929-b3a4-eef1054ef9dd\",
                         \"77c4fa62-7b75-4f9a-8690-aad45891cff0\",
                         \"7834e3b9-8735-4c46-90a8-3681abc66b4a\",
                         \"78419fc7-0cf7-47b2-9564-497104c96404\",
                         \"78e5cbfb-eedf-48e6-ae44-c7f83c7142d7\",
                         \"791dcd12-bd18-4418-bea2-19ae2823181a\",
                         \"79987b44-dbef-436a-8017-a916b285fd02\",
                         \"7aaa4d3c-66fd-403a-990b-76597c146c44\",
                         \"7b8bfaeb-82cf-4e91-bbe1-5aa75ef1adf0\",
                         \"7bcd6fc0-3614-415b-a815-9c9b4442439d\",
                         \"7bd70025-107d-4654-bd89-da9b56de6b7f\",
                         \"7bfe7655-d6ac-4fa1-86ca-8a53648bc031\",
                         \"7c23ba40-7e4c-449d-b292-86773753ff79\",
                         \"7cf860b8-2176-4843-852e-eefd6461ca40\",
                         \"7d4a69b2-cb76-4049-b489-60a29dca2ca9\",
                         \"7d90f4b9-f524-461b-a0a9-d97b1d8932fb\",
                         \"7d98a2e8-9ac9-44fb-b274-06c297966386\",
                         \"7e020ad9-12d6-4823-8616-7525076e147e\",
                         \"7e0a3d4f-5eec-4de4-b16f-8cacbe9679c9\",
                         \"7e101e31-d7e3-41fd-acff-7ec510675dcd\",
                         \"7eb8166b-86b6-4a49-bd98-274dcac19ceb\",
                         \"8027ca26-b05b-43b5-aae7-b453d0c3f393\",
                         \"803b5cab-f404-4c07-9c83-4c831d90a5b0\",
                         \"80a1cd86-db72-46da-a52b-b817aeeaa579\",
                         \"810b7b42-4a58-430e-be10-0e759780c2a8\",
                         \"82378e39-108f-4215-b87a-15eb018c90d0\",
                         \"82387a0a-bcfc-45b5-a3c0-afce22ec2212\",
                         \"82c631cc-1bda-4841-b10f-2c4e5abf51a6\",
                         \"83b7db6a-613c-48ec-bf66-6cedfe53d538\",
                         \"8439425a-5eb5-4de1-9104-ba50c43e2eb8\",
                         \"847959be-8bd7-4d9b-88ec-cd6c7ae58c28\",
                         \"84945a4d-20d9-46aa-a0f1-f0de52f2ebdb\",
                         \"854bec0a-77dc-40e0-9113-8a877fd10fbf\",
                         \"85807464-8750-4137-ace8-ea866069282e\",
                         \"85c3f9be-0149-4469-908d-0c3b591f66a7\",
                         \"862526e2-b3f9-4b04-9775-6608a06e170d\",
                         \"8646ce53-f075-44c5-8334-5a12a248f889\",
                         \"86be6a6e-3988-4e0b-a8c0-9b0d09335bab\",
                         \"86cf7f2e-ade0-4c9e-97fc-fec28f455b0e\",
                         \"875944d1-1a75-4762-8440-da298dbf2924\",
                         \"87d2f675-2566-4bbb-a740-c442d3a39a4f\",
                         \"87e6bd61-213b-4231-b42c-badf5391a6ee\",
                         \"881a7c4a-e78e-4e05-a3ea-7e4a87fbcb0d\",
                         \"882866c5-a927-405d-a926-9e5c11c37010\",
                         \"8843ceb7-7ac9-4e29-b892-360a0a76cd6d\",
                         \"88ee8604-26d9-4112-8e07-8deb4024a865\",
                         \"88fb2421-6fc7-4eb6-91a0-4afb577bbdd2\",
                         \"8959f318-41a3-4bf5-b7c4-bb8580bce82d\",
                         \"89ec4d5f-8a3e-4e75-b1b0-b44c3d577ea3\",
                         \"8b3d6828-7626-48ec-8b04-b1d98e44abf0\",
                         \"8b5d6016-1319-4550-9a4e-f70185fc2483\",
                         \"8b86fcf4-dcd6-4dd0-8827-a0b9cb47a641\",
                         \"8c45b7da-0dae-4b25-8f9b-3629d3f4442b\",
                         \"8c796579-e065-4988-985b-5564ccf3c6e6\",
                         \"8cb75b1e-f168-4dc5-9681-b1fafdb4b6d1\",
                         \"8cc2954a-11d1-457f-8760-6c84647b0cc9\",
                         \"8cfd35ea-62e7-45d8-9038-446391c5e3bd\",
                         \"8d391abc-e696-4cc5-996f-2dff66e94a55\",
                         \"8d87d834-5e33-46a7-a877-7a5a685e821f\",
                         \"8e85dbff-3490-4eb5-8811-2109d73639ba\",
                         \"8f8f4203-39dc-4b17-a20d-73c4d7759e2f\",
                         \"90840087-67ba-4a86-8740-3b3d0283f747\",
                         \"90fb3b82-c484-4aeb-a9f4-b4888e1f4116\",
                         \"912c3b49-cd45-41ac-8262-d55c48d0a182\",
                         \"91730f06-1d00-49d0-8e9d-8caf3ddc9255\",
                         \"917eaef9-982f-46e1-9ca7-c13bfd338d40\",
                         \"91a47e7c-278c-46b9-a114-6f8a78fb6409\",
                         \"91caa6ee-8875-4196-abf5-cedff8d91edf\",
                         \"923fe452-3e7f-47af-ad12-cd8ba13c0131\",
                         \"9256967f-f6f1-4c8b-97ac-a227caab662a\",
                         \"92a04895-a6d3-4ad4-83d4-2da7bb0fb149\",
                         \"9332fee2-6acd-451a-ada3-9c5f1bbaf5b9\",
                         \"934a3a5d-4b62-4752-8840-9ce60e9743ad\",
                         \"93a5fd0f-e6cd-463c-9015-34ee78afbabc\",
                         \"9409f797-03fa-4ee1-8cb2-372fc6108144\",
                         \"94add1e2-06c9-4291-9e34-c2d57b546b28\",
                         \"94e6bf25-e965-466b-a8d3-5d0e3857f08d\",
                         \"9513af1f-b786-4784-91ed-90d183d7884e\",
                         \"9524417c-95be-4a10-bd36-88be413a05a7\",
                         \"95274175-994a-447e-aa69-cc79f7ba9690\",
                         \"95ba7a06-5220-4273-9cef-62de23f27fec\",
                         \"963d626a-718f-4e92-9dc6-75b110705a2d\",
                         \"97d6eed4-8a49-4a81-b0d1-e4f6c13c5908\",
                         \"98d0a622-4ffd-418b-b75c-6dce22a25f46\",
                         \"9a1bfdbc-8057-42f8-8e08-a4a73c46c1db\",
                         \"9a5d95ba-cf1c-4208-b98e-7298545d339f\",
                         \"9a6e6be7-da94-410c-a827-eb93ea4db9a6\",
                         \"9aed3f3a-9a7b-4f67-b4ca-dc8387f0d42e\",
                         \"9b31a704-e7be-4082-85cb-0359152d35bd\",
                         \"9c7689f0-46aa-4a0a-982f-5cc9b1b86b3e\",
                         \"9cc6fa18-1e73-45bf-a90b-93110f2001b8\",
                         \"9d2305e4-6eca-4bba-969c-99c9b130334e\",
                         \"9d7cd519-1777-4a35-a574-cfde0a9ebb00\",
                         \"9d7f5b83-6585-4739-b6aa-ee3e1f411740\",
                         \"9d89f17e-7821-4c15-ad31-d4cec1f3f527\",
                         \"9d9735fa-fd5d-479f-8876-92aeb923a8a4\",
                         \"9e094a73-e8c2-4752-ac9a-10dee7fef89c\",
                         \"9e12b4af-8c6f-4763-9ad7-6107da72016f\",
                         \"9e439d12-1de5-4a8a-b16e-ef2084e775fa\",
                         \"9e54bd17-a029-43c4-9ca6-44453384bae5\",
                         \"9e972119-ae03-4e4c-90c5-756704795428\",
                         \"9ea5108f-3b7f-42cb-b5e7-be41ff164ecc\",
                         \"9ebd15c8-1895-4a3d-8681-08a9c5ceb8fe\",
                         \"a0a456f2-bf22-4d4b-aa72-cdb023e04d26\",
                         \"a1026bc4-6a9a-4227-b2eb-c821f0b7a263\",
                         \"a16d2665-1bc3-4cdb-bc9d-9a3bfa56ab4e\",
                         \"a19bfecd-4e43-40bf-87b6-06ee84ce37bd\",
                         \"a1fb98c7-1dd2-4a85-a12c-e152b1440721\",
                         \"a2434e5e-b1c9-4a5d-9ff1-8c4152cdebe4\",
                         \"a247d5d2-50fd-40f1-b3ae-39ef079f55ce\",
                         \"a27db9aa-1618-46ca-ac08-448c95d73451\",
                         \"a29e3382-2cb2-4b5e-b3b5-8b1c9496a29c\",
                         \"a2a7941d-9743-4ba8-8137-15ba1206d4b2\",
                         \"a3933bbe-f0ba-468b-ac0c-dad918a19c2f\",
                         \"a393882f-1418-4742-a19b-712936664d00\",
                         \"a44d8f02-3301-4248-82f2-61104901c9f0\",
                         \"a478cc4d-4931-448e-b59a-fc17d13d2939\",
                         \"a47daf39-8a2c-456d-b88a-f561947c336d\",
                         \"a4c544f1-4651-4e73-b67d-eac581f67f93\",
                         \"a561ed73-5d76-49ee-b1ad-9127c18ef730\",
                         \"a57f6395-f94b-4cb5-bcd5-de903c84eb61\",
                         \"a59756a8-389e-4077-86dc-f0bcb2033ec7\",
                         \"a7efc14e-08f4-42d1-8840-0815461652d9\",
                         \"a80a40bd-6163-4730-b66f-5486c2ec6d58\",
                         \"a8699f0c-aa23-45a0-b0f6-9a04fe159641\",
                         \"a8ae570b-d2ae-471a-86ce-d8b01e04ac10\",
                         \"a93d0236-0cba-409a-87e9-e792e1aa6d3d\",
                         \"a97758ee-fc1a-4679-b8d5-803b82ab6957\",
                         \"a97e1c9b-ed04-4540-a1e2-7a2410885c14\",
                         \"aa2ed3e3-d741-4a9d-806d-62a02257276f\",
                         \"aa620f39-c15e-4bee-b664-5c6ddc3dd7f3\",
                         \"aa79da31-c7cc-4777-b460-883132511e91\",
                         \"aabc44bb-df64-4522-8053-905a0b3f62d0\",
                         \"aad593fe-5dcc-44df-9059-090dee574343\",
                         \"ac87cb6d-8c91-4da3-8e54-686fdfc07b56\",
                         \"aca3976b-f332-4d71-a3cf-f7b7968d508c\",
                         \"acc5b17e-ae7c-4a7e-bed9-cb428d11cd8f\",
                         \"acf3b351-3416-4012-a1db-415738130001\",
                         \"adbbbbdc-28d9-4ed6-85ac-02e82ad9a08f\",
                         \"ae37a414-766b-4ee5-93d5-3df10aa2b6fd\",
                         \"ae4b6668-54bd-432a-87f0-a4dfd4da8168\",
                         \"ae5137e3-275d-4bd0-9734-3e9633c79a0a\",
                         \"ae61f892-88f5-4b3c-a6ae-11f6f1a1b98b\",
                         \"aeb0c3c9-ffcd-48a4-a133-ce7fd5c4aac1\",
                         \"aecc606d-9580-4d28-a89c-54b99c9acd29\",
                         \"af292719-0cc8-45da-81de-029d0b4d46cf\",
                         \"af3e25de-37d0-4016-aca1-039d04088f4b\",
                         \"af570a2a-0660-46e2-b791-1e73fa793c4b\",
                         \"afd2d065-8de7-474b-8565-4a37ce993d8b\",
                         \"afd41a86-966f-48f9-be84-5947c4aa64a0\",
                         \"b07f9eea-396f-4711-8928-c58a40d8bab4\",
                         \"b080c93a-bd4c-4ad9-a515-ab958f701579\",
                         \"b122ccde-68dc-42b1-ad28-e49755c4f269\",
                         \"b1456976-c16b-4db2-bf31-7bd975f09a2e\",
                         \"b17cb333-312a-4378-b9ce-21261e5e6897\",
                         \"b1c6a619-187e-4a2e-8b34-22532998ed22\",
                         \"b22078f6-e423-4c50-91f6-3a53cc14fb62\",
                         \"b28e4c16-402a-423c-9538-67a27ccad92d\",
                         \"b31b3d42-4bb3-486c-aca2-3b881134dd94\",
                         \"b3e3a410-ec25-4e11-b6b6-9c385bf710ec\",
                         \"b44b5d0a-fd4c-4374-9a71-fb1c522a506e\",
                         \"b53b6f99-a23d-4294-a635-afdee3c21567\",
                         \"b559d85a-806c-40d9-9f20-23594bd4fa9e\",
                         \"b59bc17a-73c5-443b-b52c-bac5b3c3ab53\",
                         \"b6166c91-5543-41c4-91b3-b86b168684a7\",
                         \"b6bdbeb5-2eeb-421d-a8c9-fe8d20b4ae5b\",
                         \"b7285b29-0c4b-4ae3-be25-3d8f88312a02\",
                         \"b78b0af5-eaf0-4628-aaaa-916946b68549\",
                         \"b7f56cc3-e780-4003-b774-abe5de49586b\",
                         \"b8e26a03-38d3-429f-b18e-707ef72ba678\",
                         \"b90b0eac-0f41-4a44-9fb6-7c1911e33707\",
                         \"b91c775b-5c03-4d4d-bbbc-89e8a90aaaf2\",
                         \"b924366a-5b8a-49fc-979c-395db8b01f72\",
                         \"b971df3c-cad6-43d1-bec8-bc8f64399f26\",
                         \"b9978b7e-e234-45c7-90fc-61307afdb255\",
                         \"b9eb30c6-a32b-4ac2-959a-f6757621e689\",
                         \"ba519948-6fc1-46a8-9490-97ba13f79ad6\",
                         \"ba5f5e5f-f20d-4b79-825b-fe8ed35833f6\",
                         \"ba8f2dc1-d336-48a8-8b42-bc7d9badcc27\",
                         \"bae2a201-d6fd-4b66-817a-535dbb345fc0\",
                         \"bb2c0b4a-2d5d-4e8a-b2b2-56b10fb17020\",
                         \"bb48e0ed-28a0-4cb1-a200-37591f7ccde7\",
                         \"bb5012c9-f98c-4d57-a297-94d502c45f8a\",
                         \"bc24dad5-6112-4828-ba02-ffafd7e31884\",
                         \"bc3bf30f-9d97-45e0-b81f-200d57293d16\",
                         \"bc4658f7-1ef9-4129-93f1-aa3d91619ff3\",
                         \"bc933b76-b702-48b4-a99e-15b74fb0c6c2\",
                         \"bc9e274b-e4db-4d84-ab68-9a9e827bc0c1\",
                         \"bcd7a83a-301f-4549-85f9-25ffe96489ef\",
                         \"bd1f23b4-eca3-455d-8fed-859ef268ae41\",
                         \"bd2062a1-6427-469b-bb0e-6a1281919d68\",
                         \"bd22ac92-aa6c-4512-a2cf-55b460f0e5ec\",
                         \"bd58ca0d-7244-48ed-b245-18df5115362c\",
                         \"bd762143-8900-43fd-b523-2c9a33be9c9a\",
                         \"bdf6e945-0d6b-4610-bbf3-2254f665baf5\",
                         \"bdfc4630-eff1-487c-8091-9a365658e4b0\",
                         \"be84f317-4e50-400c-9285-42e646d94bb5\",
                         \"bfc5fce2-d43d-4c5d-9af3-3788a19d1121\",
                         \"c050d65e-a844-4968-a968-7fa777c43691\",
                         \"c08665e7-e34a-418e-99d5-be6efdefb46c\",
                         \"c08fd550-331b-41cc-8556-86662f9adcc1\",
                         \"c13704e1-1c0c-4611-9999-9543406f7535\",
                         \"c15a49a9-339a-4579-935b-3544d9f15386\",
                         \"c1ae60da-03c4-444c-9217-84a7bc4aba83\",
                         \"c20c6c32-a164-4e1f-a4e4-31dba0eb73a9\",
                         \"c2340160-87c0-484c-99ac-be124e62025a\",
                         \"c29bd8f1-8df0-408f-8c9d-c4e07933c8f8\",
                         \"c2c94065-4747-4ae9-9b81-ccd1d1971658\",
                         \"c313ff12-99a2-4fa8-8b79-516dc917ad83\",
                         \"c3c31ad4-3983-4bb0-963c-b36b29be3d3b\",
                         \"c3fe1708-93be-4d8c-ac1a-9d81eb260016\",
                         \"c40f64ea-0125-4a44-96c6-9493bea2c106\",
                         \"c4578bc5-86aa-43c0-b157-3a1231614965\",
                         \"c48f2b7b-cfa0-4883-a160-f9a30d292e61\",
                         \"c4c48363-7b87-4058-8e2f-4f8728c78cd6\",
                         \"c6171883-a897-4d3e-9db6-330ff5c53ad0\",
                         \"c6264ec2-ea44-439e-89b4-cb063249f5ac\",
                         \"c650b35f-c839-48cc-8c1a-a445bb261c11\",
                         \"c6929b47-c76d-47ed-9251-80bd7c48efe7\",
                         \"c6bc875d-4603-42d0-b15c-2bca9b71784a\",
                         \"c70179d8-9db6-4810-86c6-a739106eb1da\",
                         \"c7146cc6-c6b3-4b4a-a8b0-68c11b822330\",
                         \"c8d071bc-81eb-4074-8b05-011ffa79cde6\",
                         \"c8d3e529-6bb3-474a-a73b-639b2372baf9\",
                         \"c8e4713f-554f-4418-9ff8-5bc87b779f37\",
                         \"c8ffbee9-c8af-41fb-acce-bd54a0373a74\",
                         \"c9801d83-f89e-49cd-a482-694c95a1eb44\",
                         \"c9a0629c-9b5d-41da-afd2-b911568fa7df\",
                         \"caa4d466-f80d-4aae-9e71-0758d3cf828b\",
                         \"cb8d5827-bbf9-4dab-8f79-bc22af5f9381\",
                         \"cb8de485-aa53-4740-91a3-96ab9a3c54d3\",
                         \"cb913849-5ef8-4822-b05b-f2471f791102\",
                         \"cb94451a-21db-4a37-9b1e-48c17d37aa65\",
                         \"cc0135ce-25ed-40fb-a275-1ab41fb7e4aa\",
                         \"cc57a6fb-ee73-4acc-a934-de909087c153\",
                         \"cc7fb953-823f-44c0-91f0-a22e392e462f\",
                         \"ccda00e7-d30c-4b47-a00c-197a2377f713\",
                         \"cd4f6896-3ae0-4bd9-87e1-98cab515a181\",
                         \"cd99ecf9-1c45-42f0-9855-277f8ed113d8\",
                         \"cd9ae5bd-d77b-4ebd-961f-dd3446dd2c1e\",
                         \"ce0234a1-bb9e-4ccd-ba4e-e935fae59c83\",
                         \"ce2a64de-0c56-4427-9d39-676920739d64\",
                         \"ce38ba81-ad8d-4589-88a6-7590c914fe1a\",
                         \"ce608a16-109b-4165-9654-0704849c2e77\",
                         \"cf0f5602-b1cc-4f44-9005-38fdde2b5f17\",
                         \"cf435a4b-fabf-4862-8e0c-66ba882662d4\",
                         \"cff3c953-7342-4e28-8427-cc35cc52f8a5\",
                         \"d0822bf7-c4ec-4a39-88a3-34bcaf33df5f\",
                         \"d09c1d3d-aca4-489c-ac03-a95e09d3c188\",
                         \"d0a7d1a1-4704-4e6a-a7c5-fb3abbeb0ae9\",
                         \"d0c3eaaa-b486-49a8-b6b6-9da855538b6c\",
                         \"d139d1a7-61f0-4534-bfd5-e37edfe446bd\",
                         \"d23bea0d-d1bf-4109-bf34-0057a68c7fcf\",
                         \"d25b6032-5dfb-4dd3-84aa-0e9b6d3bf8ca\",
                         \"d32d239e-d490-49e5-9a29-9d20ef8f5c2c\",
                         \"d36baaed-6a5f-4a2b-8024-80197f38bbe6\",
                         \"d37c008f-ddcb-40eb-b05f-371f75399a4e\",
                         \"d3f92dca-4343-4ad0-ba9c-854641d49198\",
                         \"d40e2441-8fed-4569-966d-76b293d58208\",
                         \"d42ce989-232b-43e6-9fc1-90088f9231da\",
                         \"d56da69c-341f-49c7-8c87-aa1d058bfba7\",
                         \"d579256a-0d52-417c-9867-d20fca53a0cf\",
                         \"d6193f81-5fc0-4929-ab80-3d44774e30e9\",
                         \"d658cb8f-aff4-4ba2-b194-14003edcecd7\",
                         \"d6cd940d-9814-408d-a50f-35ee1705a013\",
                         \"d6da03a3-6a05-470e-9e56-79e9f02628eb\",
                         \"d77f1e27-f85d-4127-8581-e701eefc08e1\",
                         \"d7928654-2668-4470-afdf-2259e0fc01f6\",
                         \"d7c8b0c0-d926-4702-bdfe-60f4f5ac4368\",
                         \"da1785d5-5a83-4ad8-8442-58e76e0aa7e8\",
                         \"da1acfd1-5faf-4d1c-b3ac-126c15f5dd00\",
                         \"da4739b2-a7e5-4853-bb2c-8faea4f1b509\",
                         \"da673d3d-6117-4084-ac4e-e6d438064c1c\",
                         \"da7759ad-ccf4-4173-967a-f6d874346219\",
                         \"da9e3574-e0ee-4c6f-b307-56f0997fbd08\",
                         \"daac5df0-ea6d-4e55-8ad9-3c8ebae4d0d4\",
                         \"db1987b6-c5ee-4d85-a7b2-5236f08400a9\",
                         \"db6dbfef-a20f-498c-b1c7-b2cfa7239b48\",
                         \"db7a695d-5775-4104-a7d2-dfa5d8375ed9\",
                         \"dbfbe61d-dc0c-4466-abbb-eb4b9d4c808c\",
                         \"dd7d972f-6296-48eb-aacf-75fad537804b\",
                         \"dd9a9586-0ab2-4c39-9def-f500a84363fb\",
                         \"de34b0ca-515e-454d-a240-23a1e6d84f32\",
                         \"de99bc12-7492-43b8-868f-73d1d8b86465\",
                         \"df1caf11-d34a-4c48-910a-e167d8d64bbe\",
                         \"df49b99f-ab01-4ff5-bcac-8ec856a15cfa\",
                         \"dfefd097-0e82-4116-8328-1f634937c170\",
                         \"e04fa258-6f07-4530-90ed-3061e06c1f66\",
                         \"e2505d47-466f-4af6-9e69-2b88bd9d08ef\",
                         \"e311d971-9490-4262-b6e6-d5038d33d65f\",
                         \"e387bb41-0408-4fae-a8b7-13aa8e0700a4\",
                         \"e3ffd5a1-2efc-46ee-89f8-775965eb81fe\",
                         \"e4248761-2c21-44b5-b5d3-37ed16587c9d\",
                         \"e4256916-5d6f-4965-895f-66b2bdb48e73\",
                         \"e44ccab1-b23b-4d14-91e0-f2b7e7cccac1\",
                         \"e4b56fd6-d83e-4463-a3af-edee9a1349ef\",
                         \"e576a8b4-58e3-41d0-89b8-47022e5417d7\",
                         \"e5c92934-449c-4717-b1a7-0f24b3cc6256\",
                         \"e5d9cac6-2e07-432d-aa85-e594d6aa12db\",
                         \"e60b97a5-7e8f-4dc4-8768-038231e63eab\",
                         \"e61e15b2-e4e0-4149-a298-d6ff7c614be9\",
                         \"e655e498-1be3-4dd7-bfe7-0c0f19be3166\",
                         \"e6b395c8-8438-4868-bd05-5f9793a635e7\",
                         \"e6c1a109-6d89-427e-8efd-82cc81f48181\",
                         \"e75fdde5-954f-44ae-94c6-2cc82ce2d0e4\",
                         \"e8658b36-e31d-4b14-8960-db62e11c2158\",
                         \"e86b4053-cb78-430f-aa2a-daee094a8c94\",
                         \"e8ab6b14-9feb-45a7-a7bb-c99cd7dbda41\",
                         \"e8b2e7b2-92a7-4c4d-95af-08c79ecce5f0\",
                         \"e92b2afc-2236-4795-84c1-d565794c3687\",
                         \"e92e9fb1-13c7-4a43-9db9-bef02f957711\",
                         \"e9783930-2c7a-4973-9332-034aa48bafc2\",
                         \"ea4e81ab-1426-4d12-b21a-3f5ab5558a01\",
                         \"eb36338d-9e8f-4509-a7c3-b521c7073cb1\",
                         \"eb84da18-875f-42e3-9a02-147d5411f96e\",
                         \"ec0a61b2-ede0-4e27-9b57-1f45b6149cd0\",
                         \"ec22df6f-ee5b-4d9b-a430-82481c2b3819\",
                         \"ecc2df8b-6273-4def-b41a-ee367efcda0e\",
                         \"ee88a487-3a08-46dd-939c-83bcf0685142\",
                         \"eee00d99-450a-4896-a1e9-db1c7109bc5e\",
                         \"eefbec32-1daf-4a5e-aca9-a55c8889d780\",
                         \"ef4f586a-7166-4c8d-ae50-0f34e093e558\",
                         \"ef5e916a-effe-4259-9a78-755b91b39599\",
                         \"f00c256c-c1b0-4934-8df6-72762ee0ea91\",
                         \"f1e5bd47-c0a7-42e2-911f-51d24993304e\",
                         \"f30e1476-19ea-480d-a8b8-a964cf43bce8\",
                         \"f44ae812-ae09-4544-9a08-9dd3acede776\",
                         \"f4656306-9ee1-4ce0-91db-1e77511c5557\",
                         \"f54d0abd-45b7-4588-932c-3f32a207f705\",
                         \"f5baa141-5ecf-4ce2-a28c-9ff0f713c2c8\",
                         \"f74d8c22-362a-4ff9-a7be-b31f3eca368a\",
                         \"f761c19f-ce68-4dfe-a1ec-fe01d650df94\",
                         \"f7639837-3aa4-4a15-89a6-106f15487b6c\",
                         \"f8ff6465-3591-47af-8903-d3682e20326e\",
                         \"facc3c8f-c714-4292-99c2-ee11e7b38fe6\",
                         \"fae183e5-fe99-46c8-8527-580f0e6a4e94\",
                         \"fb79faf4-45e3-44ef-90b6-df6ef17dd1ff\",
                         \"fba317c1-258b-49a5-9284-34ccf21cb391\",
                         \"fbc21c52-9201-4cfa-9cfd-2d136234256b\",
                         \"fc0ced2d-5ddc-4346-967c-a079f3d46b9f\",
                         \"fc14f353-34f7-4c3b-b5f5-2843dddd3952\",
                         \"fc15ec2c-e5ff-4318-94b9-7c3b78070e83\",
                         \"fc45c3a3-b6d3-4894-bf0b-39f8c0f0eafc\",
                         \"fc5257cb-1cc9-492a-ae8e-441ad55f851f\",
                         \"fc6cdbed-0aac-4f55-9251-2b03eb3128da\",
                         \"fc811400-f053-4023-a458-e9b62761187a\",
                         \"fcd2c1e6-a9b8-48d1-877e-dce3d13baf6e\",
                         \"fceb032a-8c6c-40f4-b1da-11af590ead74\",
                         \"fd862ce8-4b0d-4f25-adde-6dfea1a7509a\",
                         \"ff0c8eed-c55b-4c1c-90af-7ee51b749ff7\",
                         \"ff0f7d27-2a3a-4139-b65a-a54274ef7b84\",
                         \"ff381d01-62fd-490d-9190-fd05730cacea\",
                         \"ff616217-eca1-4ae7-9f70-f2123220fd7a\"])" "(detect.explainer.core/explain! {:anomalies nil :detected-jobs nil :segmented-queried-jobs nil})" "(detect.explainer.core/explain! {})" "(mp-client.slack/send-message :explain {:text \"test\"})" "(mp-client.slack/send-message :explain \"test!!\")" "(mp-client.slack/send-message :explain \"test\")" "(detect.explainer.model.stationary/explain! (assoc a2 :expected-value 10) q2 s2)" "(detect.explainer.model.stationary/explain (assoc a2 :expected-value 10) q2 s2)" "q2" "(when 1 true false)" "(i/nrow r2)" "(every? identity (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p]))" "(every? identity (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(any? nil? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(every? not-nil? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(every? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(nil? 1 2 3)" "(nil? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll])" "(any? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(some? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p :ll]))" "(some? (map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p]))" "(map (set (i/col-names r2)) [:property :property-value :k :b :n :nbar :p])" "(#{:property :property-value :k :b :n :nbar :p} :p)" "(#{:property :property-value :k :b :n :nbar :p} (i/col-names r2))" "(i/col-names r2)" "a2" "(prn r2)" "(-> s2 keys)" "(si/hprn r2)" "(def r2 (detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2))" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "(-> q2 keys)" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "a2" "(-> q2 :query)" "(-> q2 keys)" "(-> s2 first val first)" "(-> s2 first val keys)" "(def s2 (explainer/queried-job->segmented-queried-jobs
                               {:appdb-client *ac*
                                :public-api-client *pac*
                                :properties-bucket *pb*
                                :project-id->timezone-fn (constantly \"US/Pacific\")
                                :queried-job q2
                                :statsd nil}))" "(def q2 (-> res first :grouped-jobs first :queried-job))" "(def s2 (explainer/queried-job->segmented-queried-jobs
                               {:appdb-client *ac*
                                :public-api-client *pac*
                                :properties-bucket *pb*
                                :project-id->timezone-fn (constantly \"US/Pacific\")
                                :queried-job q2
                                :statsd nil}))" "(def a2 (-> res first :grouped-jobs first :anomalies first))" "(def res (->> *adb*
                gcp.bucket.core/vals
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(in-ns 'detect.explainer.env)" "(core.secrets/slack :explain)" "core.secrets/slack" "(mp-client.slack/send-message :explain \"test\")" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "(-> s2 first val type)" "(-> s2 first type)" "(-> s2 type)" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "q2" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "a2" "(detect.explainer.model.stationary/form-score-ds-segmentation (assoc a2 :expected-value 10) q2 s2)" "(detect.explainer.model.stationary/form-score-ds-segmentation {:assoc a2 :expected-value 10} q2 s2)" "(sum [[1 2 3] [3 4 5]])" "sum" "(sum [1 2 3])" "(take 1 [0 1 2])" "(take [0 1 2] 1)" "(take [0 1 2] 0)" "(nth [0 1 2] 0)" "(for [[property property-segments] s2
          [property-value segment] property-segments] {:p property :pv property-value})" "q2" "(def a2 (-> res first :grouped-jobs first :anomalies first))" "(-> res first :grouped-jobs first :anomalies first)" "(-> res first :grouped-jobs first keys)" "(-> s2 keys)" "(def s2 (explainer/queried-job->segmented-queried-jobs
                               {:appdb-client *ac*
                                :public-api-client *pac*
                                :properties-bucket *pb*
                                :project-id->timezone-fn (constantly \"US/Pacific\")
                                :queried-job q2
                                :statsd nil}))" "(def q2 (-> res first :grouped-jobs first :queried-job))" "(-> res first :grouped-jobs first keys)" "(-> res first :grouped-jobs first :query)" "(-> res first :grouped-jobs first :anomalies)" "(-> res first :grouped-jobs first keys)" "(-> res first :grouped-jobs keys)" "(-> res first :grouped-jobs first)" "(-> res first :grouped-jobs type)" "(-> res first keys)" "(first res)" "(def res (->> *adb*
                gcp.bucket.core/vals
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))))" "(def res (->> *adb*
                gcp.bucket.core/vals
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))
                (keep #(core.error/silent (count %) %))
                (take 100)
                shuffle
                (take 3)
                (filter seq)
                doall))" "(def res (->> anomaly-bucket
                gcp.bucket.core/vals
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))
                (keep #(core.error/silent (count %) %))
                (take 100)
                shuffle
                (take 3)
                (filter seq)
                doall))" "(def res (->> anomaly-bucket
                gcp.bucket.core/vals
                (filter (fn [x]
                          (core.error/silent
                           (-> x :grouped-jobs first :queried-job :query :job-plan :plan :type (= :segmentation)))))
                (keep #(core.error/silent (count %) %))
                (take 100)
                shuffle
                (take 3)
                ;; NOTE: need to do all of grouped-job not just first
                (map (fn->> :grouped-jobs first :queried-job (assoc {:appdb-client appdb-client
                                                                     :public-api-client public-api-client
                                                                     :properties-bucket properties-bucket
                                                                     :project-id->timezone-fn (constantly \"US/Pacific\")
                                                                     :statsd nil}
                                                                    :queried-job)
                            detect.explainer.core/queried-job->segmented-queried-jobs))
                (filter seq)
                doall))" "(-> s1 first val first val )" "(-> s1 first val first val type)" "(-> s1 first val keys)" "(-> s1 first val type)" "(-> s1 keys)" "(-> q1 :timeseries)" "(-> q1 :query)" "(-> q1 keys)" "(-> s1 first val first val prn)" "(-> s1 first val first val count)" "(-> s1 first val first val type)" "(-> s1 first val keys)" "(-> s1 first val key)" "(-> s1 first val type)" "(-> s1 keys)" "(def s1 (explainer/queried-job->segmented-queried-jobs
                               {:appdb-client *ac*
                                :public-api-client *pac*
                                :properties-bucket *pb*
                                :project-id->timezone-fn (constantly \"US/Pacific\")
                                :queried-job q1
                                :statsd nil}))" "(def s1 (explainer/queried-job->segmented-queried-jobs *ac* *pac* *pb* (constantly \"US/Pacific\") q1 nil))" "(def q1 (-> r1 :queried-jobs first))" "(-> r1 :queried-jobs first)" "(-> r1 :queried-jobs count)" "(-> r1 :queried-jobs type)" "(-> r1 keys)" "r1" "(def r1 (bucket/get *cqb* \"/821535/segmentation/day/-1247824903\"))" "r1" "(def r1 (bucket/get *cqb* \"/1000169/segmentation/day/-2090797618\"))" "(def r1 (bucket/get *cqb*))" "(first t1)" "(def t1 (bucket/keys *cqb*))" "(in-ns 'detect.explainer.env)" "(letk [[{a 1} :as p] {}] p)" "(letk [[{a 1} :as p] {:a 2}] p)" "(use 'plumbing.core)" "(second {:a 1})" "(?> 1 false inc)" "(?> 1 true inc)" "(use 'plumbing.core)" "(?> 1 true inc)" "(v/normalise (v/diff s))" "(v/normalize (v/diff s))" "(v/diff s)" "(si/diff-seq s)" "(map - [1 2 3] [1 2])" "(map - (range 10) (range 10))" "(next s)" "(count s)" "(def s (->> seg-ts (i/$where {:property \"tickets\" :property-value \"3\"}) ($ :sCR)))" "(count a)" "(type a)" "a" "(def a (map identity (range 10)))" "count" "(len s)" "(count s)" "(def s (->> seg-ts (i/$where {:property \"tickets\" :property-value \"3\"}) ($ :sCR) type))" "(->> seg-ts (i/$where {:property \"tickets\" :property-value \"3\"}) ($ :sCR) type)" "(->> seg-ts (i/$where {:property \"tickets\" :property-value \"3\"}) ($ :sCR))" "(->> seg-ts (i/$where {:property \"tickets\" :property-value \"3\"}) si/hprn)" "(->> seg-ts (i/$where {:property \"tickets\" :property-value 3}) si/hprn)" "(->> seg-ts (i/$where {:property \"tickets\"}) si/hprn)" "(si/hprn seg-ts)" "(type seg-ts)" "(def seg-ts (si/grouped-job-plots (first (query-test \"ff806ca7-1752-4690-8605-cdbf728bc611\"))
                                                         \"tickets\"))
" "(si/save (si/grouped-job-plots (first (query-test \"ff806ca7-1752-4690-8605-cdbf728bc611\"))
                                                      \"tickets\")
                                \"../org/img/tmp.png\"
                                :width 800
                                :height 600)
" "(any zero? [1 2 3])" "(some zero? [1 2 3])" "(si/save (si/grouped-job-plots (first (query-test \"ff806ca7-1752-4690-8605-cdbf728bc611\"))
                                                      \"tickets\")
                                \"../org/img/tmp.png\"
                                :width 800
                                :height 600)
" "(in-ns 'affinity.skeleton.env)" "a" "squiggly-clojure.core" "123" "(second '(:a 1))" "(first '(:a 1))" "(into {} ['(:a 1)])" "'(:a 1)" "(into {} [{:a 1}])" "(into {} [[:a 1]])" "(into {} [(vec :a 1)])" "(into {} [(list :a 1)])" "(into {} (list :a 1))" "(list :a 1)" "qwe" "wqe" "(prn \"qwe\")" "qwe" "b" "a" "(alter-var-root #'a (constantly 2))" "b" "(def b a)" "(def ^:dynamic a 1)" "(resolve '*out*)" "'*out*" "(-> @tmp vals first :session deref keys)" "(-> @tmp vals first :session deref type)" "(-> @tmp vals first :session type)" "(-> @tmp vals first :id)" "(-> @tmp vals first keys)" "(-> @tmp vals first type)" "(-> @tmp keys)" "(-> @tmp type)" "(type tmp)" "                                                                                                                                                                                                                                                                                                                                                                                                                                     (def tmp cider.nrepl.middleware.out/tracked-sessions-map)" "cider.nrepl.middleware.out/tracked-sessions-map" "(core.log/infof \"test\")" "(prn \"test\")" "(core.log/infof \"test3\")" "(core.log/infof \"test2\")" "qwe" "a" "(core.log/infof \"test\")" "qwe" "
(binding [*out* *err*]
  (println \"Hello, STDERR!\"))" "a" "qwe" "(def insights-ds (->> (query-tests (take 100 (shuffle useful-insights-anomaly-ids)))
                      (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil))
                      (map :scores-ds)
                      (apply si/safely-conj-rows)))" "(def res2 (->> res
                                      (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil))
                                      (map :scores-ds)
                                      (apply si/safely-conj-rows)))" "(i/col-names res2)" "(si/hprn res2)" "(si/save res2 \"../org/export/insights-ds.csv\")" "(def res2 (->> res
                                      (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil))
                                      (map :scores-ds)
                                      (apply si/safely-conj-rows)))" "(def res (query-tests (take 100 (shuffle useful-insights-anomaly-ids))))" "(take 100 (shuffle useful-insights-anomaly-ids)) #_(def res (query-tests ))" "(in-ns 'affinity.skeleton.env)" "(def insights-ds (->> (query-tests useful-insights-anomaly-ids)
                      (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil))
                      (map :scores-ds)
                      (apply si/safely-conj-rows)))" "(in-ns 'affinity.skeleton.env)" "(def res)" "(def res (query-tests useful-insights-anomaly-ids))" "(in-ns 'affinity.skeleton.env)" "(def res (query-tests useful-insights-anomaly-ids))" "(def res)" "(def res (query-test \"0693a9ee-b4af-49b2-8aae-1e538fca3573\"))" "($ :c {})" "($ :c nil)" "($ :c a)" "($ :a a)" "a" "(def a (i/dataset [:a :b] [[1 2] [3 4]]))" "a" "($ :a a)" "(def a (dataset [:a :b] [[1 2] [3 4]]))" "(def res (query-test \"0693a9ee-b4af-49b2-8aae-1e538fca3573\"))" "(def res)" "(def res (query-tests useful-insights-anomaly-ids))" "incanter.repl" "incanter.core" "(si/hprn feedback-ds)" "(in-ns 'affinity.skeleton.env)" "(def insights-ds (->> (query-tests useful-insights-anomaly-ids)
                    (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil))
                    (map :scores-ds)
                    (apply si/safely-conj-rows)))
(si/save insights-ds \"../org/export/insights-ds.csv\")" "(def useful-insights-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"INSIGHTS\"} ds-feedback)
                                      ($ \"alert_id\")
                                      (map alert-id->sh-noti)
                                      (remove nil?)
                                      (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                      (apply concat)
                                      distinct))" "(def funnel-ds (->> (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil) fun-gi)
                    (map :scores-ds)
                    (apply si/safely-conj-rows)))
(si/save funnel-ds \"../org/export/funnel-ds.csv\")" "(def fun-gi res-funnel)" "(count res-funnel)" "(def res-funnel (query-tests useful-funnel-anomaly-ids))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds ($ :exp-n))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds ($ :exp-n))" "(->> res2 first :scores-ds ($ :n))" "(->> res2 first :scores-ds affinity.skeleton.models/compute-scores)" "(->> res2 first :scores-ds i/col-names)" "(->> res2 first :scores-ds affinity.skeleton.models/compute-scores)" "(->> res2 first :scores-ds prn)" "(->> res2 first :scores-ds)" "(->> res2 first :scores-ds i/dim)" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :scores-ds (map i/dim))" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "(->> res2 first :segmented-ts (i/dim))" "(->> res2 first :scores-ds (map i/dim))" "(-> res2 first :scores-ds (nth 2) i/dim)" "(->> res2 first :scores-ds first i/dim)" "(->> res2 first :scores-ds count)" "(->> res2 first :scores-ds type)" "(->> res2 first keys)" "(count res2 )" "(def res2 (query-test (first useful-funnel-anomaly-ids)))" "useful-funnel-anomaly-ids" "(def useful-funnel-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"FUNNELS\"} ds-feedback)
                                    ($ \"alert_id\")
                                    (map alert-id->sh-noti)
                                    (remove nil?)
                                    (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                    (apply concat)
                                    distinct))
" "useful-funnel-anomaly-ids" "(def useful-funnel-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"FUNNELS\"} ds-feedback)
                                    ($ \"alert_id\")
                                    (map alert-id->sh-noti)
                                    (remove nil?)
                                    #_(map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                    (apply concat)
                                    distinct))
" "(first alert-id->sh-noti)" "res-funnel" "(def useful-funnel-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"FUNNELS\"} ds-feedback)
                                    ($ \"alert_id\")
                                    (map alert-id->sh-noti)
                                    (remove nil?)
                                    (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                    (apply concat)
                                    distinct))
" "(si/hprn ds-feedback)" "res-funnel" "(second res-funnel)" "(first res-funnel)" "(def tmp (query-test (first res-funnel)))" "(count res-funnel)" "(count useful-funnel-anomaly-ids)" "(def res-funnel (query-tests useful-funnel-anomaly-ids))" "(def useful-funnel-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"FUNNELS\"} ds-feedback)
                                    ($ \"alert_id\")
                                    (map alert-id->sh-noti)
                                    (remove nil?)
                                    (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                    (apply concat)
                                    distinct))
" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"60449898-974b-402c-b3c4-b66c9c751332\") res)) \"$os\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"60449898-974b-402c-b3c4-b66c9c751332\") res)) \"$browser\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"b05b2041-b647-421a-b797-e85cc3bd5188\") res)) \"$browser\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"c82c2ebf-9d31-4d50-9772-43985216a2d5\") res)) \"$os\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"c82c2ebf-9d31-4d50-9772-43985216a2d5\") res)) \"mp_country_code\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"73e371fe-fdc7-4298-b08e-7178cc3ef3b0\") res)) \"user_app\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\") res)) \"Pel Lib\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\") res)) \"Action Medium\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\") res)) \"$screen_width\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\") res)) \"screen_width\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\") res)) \"mp_lib\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"d373175e-386f-43ab-bc6a-64f4080b197f\") res)) \"plan\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"$search_engine\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"h_v\")
                                \"../org/img/tmp2.png\" :width 800 :height 600)" "(si/save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"h_v\")
                                \"../org/img/tmp2.png\")" "(save (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"h_v\")
                             \"../org/img/tmp2.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"h_v\"))" "(si/save p1 \"../org/img/tmp2.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"3f8797e0-0e84-472f-9124-7a251177a2c0\") res)) \"Hacker_NuxChoice\"))" "(si/save p1 \"../org/img/20161219-retention-1.png\" :width 800 :height 600)" "(si/save p1 \"../org/img/tmp2.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"866c5d06-6789-4f70-b3f6-2a65ca9241b3\") res)) \"~isFirstOrder\"))" "(ad/grouped-job->summary (:grouped-job (first res2)))" "(->> res2 first :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\"}) ($order :datetime :asc) prn)" "(->> res2 first :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> res2 first :segmented-ts si/hprn)" "(->> res2 first :segmented-ts i/dim)" "(->> res2 first :segmented-ts type)" "(->> res2 first keys)" "(->> res2 first :segmented-ds si/hprn)" "(->> res2 first :segmented-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> res2 first :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(def res2 (query-test \"c82c2ebf-9d31-4d50-9772-43985216a2d5\" :num-properties 2))" "(->> res2 first :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> res2 first :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}))" "(->> res2 first keys)" "(->> res2 count)" "(def res2 (query-test \"c82c2ebf-9d31-4d50-9772-43985216a2d5\"))" "(def res2 (query-tests \"c82c2ebf-9d31-4d50-9772-43985216a2d5\"))" "(def retention-ds (->> (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil) res)
                                              (map :scores-ds)
                                              (apply si/safely-conj-rows)))
(si/save retention-ds \"../org/export/20171219-retention-ds.csv\")
" "(count res)" "(def res (query-tests useful-retention-anomaly-ids))" "(count useful-retention-anomaly-ids)" "(i/rename-cols {:a :c} a)" "(rename-cols {:a :c} a)" "a" "(def a (i/dataset [:a :b] [[1 2] [3 4]]))" "a" " (map (fn [feedback]
                       (select-keys (get feedback \"properties\")
                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"]))) (def ds-feedback
  (i/to-dataset (map (fn [feedback]
                       (select-keys (get feedback \"properties\")
                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"])) feedbacks)
                ))
" " (map (fn [feedback]
                       (select-keys (get feedback \"properties\")
                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"])))" "(def ds-feedback
  (i/to-dataset (map (fn [feedback]
                       (select-keys (get feedback \"properties\")
                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"])))
                feedbacks))
" "(si/hprn feedbacks)" "(def ds-feedback
  (i/to-dataset (map (fn [feedback]
                       (select-keys (get feedback \"properties\")
                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"])))
                feedbacks))
" "(def feedbacks (ad/feedback *pac* \"2017-10-01\" \"2017-12-18\"))" "(si/hprn ds-feedback)

" "(double (/ 71 5225))" "(/ 71 5225)" "(->> t2 first  :scores-ds ($where {:property \"Account Status\"}) prn)" "(def t2 (sequence (affinity/xf--update-scores-ds nil nil) t1))" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "(->> t2 first  :scores-ds ($where {:property \"Account Status\"}) prn)" "(def t2 (sequence (affinity/xf--update-scores-ds nil nil) t1))" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "(->> t2 first  :scores-ds ($where {:property \"Account Status\"}) prn)" "(def t2 (sequence (affinity/xf--update-scores-ds nil nil) t1))" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "(* 6000 0.189722731378186)" "(->> t2 first  :scores-ds ($where {:property \"Account Status\"}) prn)" "(->> t2 first :grouped-job ad/grouped-job->summary)" "(->> t2 first ad/grouped-job->summary clojure.pprint/pprint)" "(->> t2 first  :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(count t2)" "(def t2 (sequence (affinity/xf--update-scores-ds nil nil) t1))" "(->> t1 first :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> t1 first :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}))" "(->> t1 first keys)" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "(in-ns 'affinity.skeleton.env)" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "qwe" "(->> t1 first prn)" "(->> t1 first)" "(->> t1 count)" "(->> t1 type)" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\" :num-properties 2))" "(def t1 (query-test  \"b05b2041-b647-421a-b797-e85cc3bd5188\"))" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}) ($order :datetime :asc) prn)" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}) prn)" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}))" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}) si/hprn)" "(->> tmp :segmented-ts si/hprn)" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :inteval 7}) si/hprn)" "(->> tmp keys)" "(->> tmp :segmented-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> tmp :segmented-ds ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}) prn)" "(->> tmp :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> tmp :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}))" "(def tmp (first (filter #(= (:anomaly-id %) \"b05b2041-b647-421a-b797-e85cc3bd5188\") res)))" "(-> res type)" "(-> res :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}))" "(si/save res2 \"../org/export/20171218-retention-ds.csv\")" "(def res2 (->> (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil) res)
               (map :scores-ds)
               (apply si/safely-conj-rows)))" "(->> tmp2 :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}) prn)" "(->> tmp2 :scores-ds ($where {:property \"Account Status\" :property-value \"undefined\"}))" "(-> tmp2 keys)" "(def tmp2 (affinity.skeleton.models/bind-scores-ds tmp))" "models/bind-scores-ds" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7})
                            ($order :datetime :asc) prn)" "(->> tmp :segmented-ts ($where {:property \"Account Status\" :property-value \"undefined\" :interval 7}))" "(def tmp (first (filter #(= (:anomaly-id %) \"b05b2041-b647-421a-b797-e85cc3bd5188\") res)))" "(* 0.02066278312141562 3498)" "(* 0.22716836780547256 3498)" "(def res2 (->> (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil) res)
               (map :scores-ds)
               (apply si/safely-conj-rows)))
(si/save res2 \"../org/export/20171218-retention-ds.csv\")" "(si/save p1 \"../org/img/tmp.png\" :weight 1000 :height 800)" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"b05b2041-b647-421a-b797-e85cc3bd5188\") res)) \"Account Status\"))" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"c82c2ebf-9d31-4d50-9772-43985216a2d5\") res)) \"$os\"))" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (first (filter #(= (:anomaly-id %) \"c82c2ebf-9d31-4d50-9772-43985216a2d5\") res)) \"Optimizely Home Page Redirect\"))" "(count (filter #(= (:anomaly-id %) \"c82c2ebf-9d31-4d50-9772-43985216a2d5\") res))" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (second res) \"user_class_lang\"))" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (second res) \"user_gender\"))" "(si/save p1 \"../org/img/tmp.png\")" "(def p1 (si/grouped-job-plots (second res) \"user_gender\"))" "(def p1 (si/grouped-job-plots (first res) \"team\"))" "(si/save tmp \"../org/img/tmp.png\")" "(type tmp)" "(def tmp (apply si/combine-plots p1))" "(def p1 (si/grouped-job-plots (first res) \"team\"))" "(def p1 (si/grouped-job-plots (first res)))" "(-> res first :segmented-ts si/hprn)" "(si/save res4 \"../org/export/20171218-retention-ds.csv\")" "(def res4 (apply si/safely-conj-rows res3))" "(-> res3 first prn)" "(-> res3 count)" "(def res3 (->> res2 (map :scores-ds)))" "(-> res2 type)" "(count res2)" "(def res2 (sequence (affinity/xf--update-scores-ds anomaly-id->alert-id nil) res))" "(def res2 (sequence (affinity/xf--update-score-ds anomaly-id->alert-id nil) res))" "(count res)" "(def res (query-tests useful-retention-anomaly-ids :num-properties 30))" "(count res)" "(def res (query-tests useful-retention-anomaly-ids :num-properties 3))" "($ :a nil)" "(def res (query-tests useful-retention-anomaly-ids :num-properties 10))" "(def res (query-tests useful-retention-anomaly-ids :num-properties 3))" "(count res)" "(def res (query-tests useful-retention-anomaly-ids :num-properties 3))" "(= 1 1 1)" "(= 1 1 3)" "(= 1 2 3)" "(i/conj-rows nil)" "(i/conj-rows)" "(i/nrow a)" "(def a (i/dataset [:a :b] [[1 2] [3 4]]))" "(i/dataset [:a :b] [[1 2] [3 4]])" "i/dataset?" "(core.log/error \"test\" 3 {:context 4 :a 3})" "(core.log/error \"test\" {:context 4 :a 3})" "(core.log/error \"test\" {:a 3})" "(core.log/error \"test\" \"1\" \"2\")" "(core.log/error \"test\" \"1\" \"2\" {:a 3})" "(core.log/error \"test\" 1 2 {:a 3})" "(count res)" "(core.log/info \"test\" {:a 1 :b 2})" "(log/info \"test\" {:a 1 :b 2})" "(core.log/infof \"asd\")" "(core.log/errorf \"asd\")" "(def res (query-tests useful-retention-anomaly-ids :num-properties 3))" "(def res (query-test useful-retention-anomaly-ids :num-properties 3))" "useful-retention-anomaly-ids" "(-> res second :scores-ds prn)" "(-> res first :scores-ds prn)" "(def res (query-test \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :num-properties 3))" "(-> res first :scores-ds affinity.skeleton.models/compute-scores prn)" "(def res (query-test \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :num-properties 3))" "(-> res first :scores-ds affinity.skeleton.models/compute-scores prn)" "(-> res first :scores-ds models/compute-scores prn)" "(-> res first :scores-ds affinity.skeleton.models/compute-scores)" "(-> res first :scores-ds models/compute-scores)" "(-> res first :scores-ds prn)" "(-> res first :scores-ds i/dim)" "(-> res first keys)" "(count res)" "(def res (query-test \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :num-properties 3))" "(count res)" "(def res (query-test \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :num-properties 3))" "(count res)" "(def res (query-test \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :num-properties 3))" "(i/safe-div 1 0)" "(Math/round (/ 3 2))" "(Math/round 1.3)" "(Math/round 1.5)" "(round 0.5)" "(si/safely-sum 3)" "(si/safely-sum ($ :a a))" "(si/safely-sum (type ($ :a a)))" "number?" "Num?" "Number?" "(type ($ :a a))" "($ :a a)" "a" "(def a (i/dataset [:a] [1 2 3]))" "(si/hprn tmp-ds-2)" "(def tmp-ds-2 (->> tmp-ds
                                          ($join [:datetime :datetime] overall-count)
                                          ($join [:datetime :datetime] overall-first)))" "(def overall-first (->> tmp-ds ($rollup :sum :first [:datetime]) (<- (i/col-names [:datetime :overall-first]))))" "(def overall-count (->> tmp-ds ($rollup :sum :counts [:datetime]) (<- (i/col-names [:datetime :overall-counts]))))" "(def overall-count (->> tmp-ds ($rollup :sum :count [:datetime])))" "(def overall-first (->> tmp-ds ($rollup :sum :first [:datetime])))" "(si/hprn 50 (->> tmp-ds
                                        #_($where {:property a-prop})
                                        ($rollup :sum :first [:datetime])
                                        ($order :datetime :asc)))" "(si/hprn 50 (->> tmp-ds
                                        #_($where {:property a-prop})
                                        ($rollup :sum :counts [:datetime])
                                        ($order :datetime :asc)))" "(def tmp-ds (->> res last :segmented-ts ($where {:interval 7 :property \"Other Transaction Type\"})))" "a-prop" "(def a-prop (->> tmp-ds-2 ($ :property) distinct second))" "(def tmp-ds-2 (->> res last :segmented-ts ($where {:interval 7})))" "a-prop" "(def a-prop (->> tmp-ds ($ :property) distinct ))" "a-prop" "(def a-prop (->> tmp-ds ($ :property) distinct first))" "a-prop" "(def a-prop (->> tmp-ds ($ :property) distinct second))" "(si/hprn 50 (->> tmp-ds
                                        ($where {:property a-prop})
                                        ($rollup :sum :counts [:datetime])
                                        ($order :datetime :asc)))" "(si/hprn 30 (->> tmp-ds
                                        ($where {:property a-prop})
                                        ($rollup :sum :counts [:datetime])
                                        ($order :datetime :asc)))" "(si/hprn (->> tmp-ds
                                     ($where {:property a-prop})
                                     ($rollup :sum :counts [:datetime])
                                     ($order :datetime :asc)))" "(si/hprn (->> tmp-ds
                                     ($where {:property a-prop})
                                     ($rollup :sum :counts [:datetime :property])))" "(si/hprn (->> tmp-ds
                                     ($where {:property a-prop})
                                     ($rollup :sum :counts [:datetime :property] tmp-ds)))" "(def a-prop (->> tmp-ds ($ :property) first))" "(->> tmp-ds ($ :property) first)" "(-> tmp-ds ($ :property) first)" "(si/hprn tmp)" "(def tmp ($rollup :sum :counts [:datetime :property] tmp-ds))" "(def tmp ($rollup :sum :overall-counts [:datetime :property] tmp-ds))" "(si/save pl2-count \"../org/img/20171213-seg_retention_count.png\" :width 1000 :height 800)" "(def pl2-count (ic/time-series-plot :timestamp :counts :data tmp-ds :group-by :property-value :legend true))" "(si/save pl2-count \"../org/img/20171213-seg_retention_first.png\" :width 1000 :height 800)" "(si/save pl2-count \"../org/img/tmp.png\")" "(def pl2-count (ic/time-series-plot :timestamp :first :data tmp-ds :group-by :property-value :legend true))" "(si/save pl2-count \"../org/img/tmp.png\")" "(def pl2-count (ic/time-series-plot :timestamp :counts :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> res last :segmented-ts ($where {:interval 7 :property \"Action\"})))" "(->> res last :segmented-ts ($where {:interval 7 :datetime \"2017-11-06\" :property \"Action\"}) ($ :counts) (apply +))" "(->> res last :segmented-ts ($where {:interval 7 :datetime \"2017-11-06\" :property \"Action\"}) ($ :first) (apply +))" "(->> res last :segmented-ts ($where {:interval 7 :datetime \"2017-11-06\" :property \"Action\"}) ($ :first) sum)" "(->> res last :segmented-ts ($where {:interval 7 :datetime \"2017-11-06\" :property \"Action\"}) ($ :first) count)" "(->> res last :segmented-ts ($where {:interval 7 :datetime \"2017-11-06\"}) ($order [:property :datetime] :asc) (si/hprn 100))" "(->> res last :segmented-ts ($where {:interval 7}) ($order [:property :datetime] :asc) (si/hprn 100))" "(->> res last :segmented-ts ($where {:interval 7}) ($order [:property :datetime] :asc) (si/hprn 50))" "(->> res last :segmented-ts ($where {:interval 7}) ($order [:property :datetime] :asc) (si/hprn 30))" "(->> res last :segmented-ts ($where {:interval 7}) ($order [:property :datetime] :asc) (si/hprn 20))" "(->> res last :segmented-ts ($where {:interval 7}) ($order [:property :datetime] :asc) si/hprn)" "(->> res last :segmented-ts ($where {:interval 7}) ($order :datetime :asc) si/hprn)" "(->> res last :segmented-ts ($where {:interval 7}) si/hprn)" "(-> res last :grouped-job ad/grouped-job->summary)" "(-> res last :segmented-ts si/hprn)" "(-> res last type)" "(-> res count)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(-> res count)" "(-> res type)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(-> res count )" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(type [1])" "(conj [1 2 3] 4)" "(clojure.core.async/<!! cb)" "(clojure.core.async/pipeline-blocking 4 cb (map inc) ca)" "ca" "(clojure.core.async/onto-chan ca [1 2 3])" "(def ca (clojure.core.async/chan))" "(def cb (clojure.core.async/chan))" "cb" "(clojure.core.async/<!! cb)" "(clojure.core.async/close! cb)" "(clojure.core.async/>!! cb 3)" "(clojure.core.async/>!! cb 2)" "(clojure.core.async/>!! cb 1)" "(def cb (clojure.core.async/chan 3))" "(clojure.core.async/>!! cb 3)" "(clojure.core.async/>!! cb 2)" "(clojure.core.async/>!! cb 1)" "(def cb (clojure.core.async/chan 10))" "(clojure.core.async/>!! cb 1)" "clojure.core.async/>!!" "clojure.core.async/!!>" "(def cb (clojure.core.async/chan))" "(Thread/sleep 2000)" "(Thread/sleep 2)" "Thread/sleep" "(clojure.core.async/<!! cb)" "(<!! cb)" "(def cb (clojure.core.async/chan 1))" "(def cb (clojure.async/chan 1))" "(def cb (async/chan 1))" "(def cb (chan 1))" "(-> res count)" "(-> res first type)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(-> res first type)" "(-> res count)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(-> res count)" "(-> res first :grouped-job ad/grouped-job->summary)" "(-> res last :grouped-job ad/grouped-job->summary)" "(-> res last ad/grouped-job->summary)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(-> res :grouped-job ad/grouped-job->summary)" "(-> res :grouped-info type)" "(-> res :segmented-ts i/dim)" "(-> res :segmented-ts dim)" "(-> res :segmented-ts si/hprn)" "(-> res keys)" "(def res (query-seg-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\" :test true :num-properties 3))" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res :group-by-properties type)" "(-> res :group-by-properties first)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res :group-by-properties first)" "(-> res :group-by-properties type)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res :project-id)" "(-> res :group-by-properties)" "(-> res keys)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res keys)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res :report-type)" "(-> res keys)" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :segmented-ts) si/hprn)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res (safe-get :original-ts))" "(-> res (safe-get :segmented-ts) si/hprn)" "(-> res :segmented-ts si/hprn)" "(-> res keys)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(-> res keys)" "(def res (run-xf affinity/xf--anomaly-id->segmented-ts \"5574ed01-b7e0-411d-b42c-2fa6b50be68e\"))" "(anomaly-id->alert-id (second useful-retention-anomaly-ids))" "(anomaly-id->alert-id (first useful-retention-anomaly-ids))" "(si/save pl2-conv \"../org/img/20171212-seg-ts-funnel-2.png\")" "(si/save pl2-counts \"../org/img/20171212-seg-ts-funnel-2.png\")" "(si/save pl2-conv \"../org/img/tmp.png\")" "(def pl2-conv (ic/time-series-plot :timestamp :counts :data seg-ts :group-by :property-value :legend true))" "(si/save tmp \"../org/img/20171212-seg-ts-funnel-1.png\")" "(si/save tmp \"../org/img/tmp.png\")" "(def tmp (ic/set-y-range pl1-conv 0.97 1.01))" "(si/save tmp \"../org/img/tmp.png\")" "(def tmp (ic/set-y-range pl1-conv 0.9 1.05))" "(ic/set-y-range pl1-conv 0.9 1.05)" "(si/save pl1-conv \"../org/img/tmp.png\")" "(def pl1-conv (ic/time-series-plot :timestamp :step-conv :data seg-ts :group-by :property-value :legend true))" "(si/hprn seg-ts)" "(count feedbacks)" "(si/save tmp \"../org/export/20171211-funnel-ds.csv\")" "(save tmp \"../org/export/20171211-funnel-ds.csv\")" "(def tmp (affinity/add-alert-id-and-url anomaly-id->alert-id st-funnel-4))" "(type anomaly-id->alert-id)" "(->> st-funnel-4 ($ :anomaly-id) distinct count)" "(->> st-funnel-4 ($ :anomali-id))" "(->> st-funnel-4 ($ :anomali-id) distinct count)" "(count useful-funnel-anomaly-ids)" "(prn st-funnel-4)" "(def st-funnel-4 (apply si/safely-conj-rows st-funnel-3))" "(def st-funnel-3 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (double (i/safe-div c oc))))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel-2))" "(prn st-funnel-4)" "(def st-funnel-3 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (double (i/safe-div c oc))))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel-2))" "(prn st-funnel-4)" "(def st-funnel-4 (apply si/safely-conj-rows st-funnel-3))" "(map i/dim st-funnel-3)" "(def st-funnel-3 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel-2))" "(map i/dim st-funnel-2)" "(def st-funnel-2 (->> st-funnel (remove nil?) (filter (fn [ds] (-> (i/dim ds) second (= 19))))))" "(def st-funnel-2 (->> st-funnel (remove nil?) (filter (fn [ds] (-> (dim ds) second (= 19))))))" "(map i/dim st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "(map i/dim st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "($rollup :mean :a :c a)" "(def a (i/dataset [:a :b :c] [[nil 2 :1] [3 4 :1]]))" "($rollup :mean :a :c a)" "(def a (i/dataset [:a :b :c] [[1 2 :1] [3 4 :1]]))" "($rollup :mean :a :b a)" "($rollup :mean :a a)" "(def a (i/dataset [:a :b] [[1 2] [3 4]]))" "(-> (nth st-funnel 1) si/hprn)" "(-> (nth st-funnel 3) si/hprn)" "(map i/dim st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "(-> (nth st-funnel 3) si/hprn)" "(-> (nth st-funnel 1) si/hprn)" "(-> (nth st-funnel 3) prn)" "(nth st-funnel 3)" "(map i/dim st-funnel)" "(map i/dim st-funnel-2)" "(def st-funnel-2 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           )) (remove nil? st-funnel)))" "(map i/dim st-funnel-2)" "(def st-funnel-2 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) (remove nil? st-funnel)))" "(->> st-funnel (map type))" "(->> st-funnel-2 first type)" "(->> st-funnel-2 first i/dim)" "(->> st-funnel first si/hprn)" "(map i/dim st-funnel-2)" "(def st-funnel-2 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "(->> st-funnel first si/hprn)" "(->> st-funnel-2 first type)" "(def st-funnel-2 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel))" "(map i/dim st-funnel-2)" "(def st-funnel-2 (map (fn [ds] (->> ds
                                                           (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel))" "(map i/dim st-funnel-2)" "(def st-funnel-2 (map (fn [ds] (->> (i/add-derived-column :p [:counts :overall-counts] (fn [c oc] (i/safe-div c oc)))
                                                           ($where {:p {:$lt 0.7} :diff-ratio {:$gt 0.3}}))) st-funnel))" "(map i/dim st-funnel)" "(-> st-funnel count)" "(-> st-funnel first i/dim)" "(-> st-funnel first dim)" "(-> st-funnel first type)" "(-> st-funnel type)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "(def st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary *ac* *pac* *adb* *pb* useful-funnel-anomaly-ids))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-funnel-anomaly-ids))" "(->> res-funnel :summary-table si/hprn)" "(->> res-funnel :summary-table ($ [:property :property-value :counts :target-conv :res-ratio :diff-ratio]) prn)" "(->> seg-ts ($where {:datetime \"2017-11-14\"}) prn)" "(->> seg-ts ($where {:datetime \"2017-11-15\"}) prn)" "(->> seg-ts ($where {:datetime \"2017-11-15\"}))" "(si/save pl1-conv \"../org/img/tmp.png\")" "(def pl1-conv (ic/time-series-plot :timestamp :target-conv :data seg-ts :group-by :property-value :legend true))" "(si/save pl1-count \"../org/img/tmp.png\")" "(def pl1-weighted-conv (ic/time-series-plot :timestamp :weighted-conv :data seg-ts :group-by :property-value :legend true))" "(si/save pl1-weighted-conv \"../org/img/tmp.png\")" "(def pl1-weighted-conv (ic/time-series-plot :timestamp :weighted-conv :data seg-ts :group-by :property-value :legend true))" "(si/save pl1-count \"../org/img/tmp.png\")" "(def pl1-count (ic/time-series-plot :timestamp :counts :data seg-ts :group-by :property-value :legend true))" "(si/hprn seg-ts)" "(def seg-ts (si/analyze-segmented-ts res-funnel \"fever_city\"))" "(si/save pl1-count \"../org/img/tmp.png\")" "(si/hprn seg-ts)" "(si/save pl1-weighted-conv \"../org/img/tmp.png\")" "(def pl1-weighted-conv (ic/time-series-plot :timestamp :weighted-conv :data seg-ts :group-by :property-value :legend true))" "(def pl1-count (ic/time-series-plot :timestamp :counts :data seg-ts :group-by :property-value :legend true))" "(def seg-ts (->> res-funnel :segmented-ts ($where {:step 3 :property \"fever_city\"})))" "(si/save t1 \"../org/img/tmp.png\")" "(def t1 (ic/time-series-plot :timestamp :counts :data (->> res-funnel :segmented-ts ($where {:step 3 :property \"fever_city\"})) :group-by :property-value :legend true))" "(def res-funnel (run-xf affinity/xf--anomaly-id->summary \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))" "(si/save t1 \"../org/img/tmp.png\")" "(def t1 (ic/time-series-plot :timestamp :counts :data (->> res-funnel :segmented-ts ($where {:step 3 :property \"fever_city\"}) (si/add-ts-column :timestamp :datetime)) :group-by :property-value :legend true))" "(si/save t1 \"../org/img/tmp.png\")" "(def t1 (ic/time-series-plot :timestamp :counts :data (->> res-funnel :segmented-ts ($where {:property \"fever_city\"}) (si/add-ts-column :timestamp :datetime)) :group-by :property-value :legend true))" "(->> res-funnel :segmented-ts ($ :datetime) distinct)" "(->> res-funnel :segmented-ts ($ :datetime))" "(def t1 (ic/time-series-plot :timestamp :counts :data (->> res-funnel :segmented-ts ($where {:property \"fever_city\"}) (si/add-ts-column :datetime :timestamp)) :group-by :property-value :legend true))" "(->> res-funnel :segmented-ts si/hprn)" "(->> res-funnel :summary-table ($ [:property :property-value :counts :target-conv :res-ratio :diff-ratio]) si/hprn)" "(si/save t1 \"../org/img/tmp.png\")" "(save t1 \"../org/img/tmp.png\")" "(def t1 (ic/time-series-plot :timestamp :counts :data (->> res-funnel :segmented-ts ($where {:property \"fever_city\"})) :group-by :property-value :legend true))" "(->> res-funnel :summary-table ($ [:property :property-value :counts :target-conv :res-ratio :diff-ratio]) si/hprn)" "(-> res-funnel :summary-table ($ [:property :property-value :counts :target-conv :res-ratio :diff-ratio])si/hprn)" "(-> res-funnel :summary-table i/dim)" "(-> res-funnel :summary-table si/hprn)" "(-> res-funnel keys)" "(def res-funnel (run-xf affinity/xf--anomaly-id->summary \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))" "(-> res-funnel keys)" "(def res-funnel (run-xf affinity/xf--anomaly-id->summary \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))" "(-> res-funnel keys)" "(def res-funnel (run-xf affinity/xf--anomaly-id->summary \"b3270bea-ec4f-4d64-9ca9-53ece30b7560\"))" "(def res-funnel (run-xf affinity/xf--anomaly-id->summary b3270bea-ec4f-4d64-9ca9-53ece30b7560))" "(-> 1 (?> false inc))" "(-> 1 (?> true inc))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(-> tmp .getPlot .getLegendItems)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(-> tmp2 .getPlot .getLegendItems .getItemCount)" "(-> tmp2 .getPlot .getLegendItems)" "(-> tmp2 .getPlot )" "(-> tmp2 .getPlot .getFixedLegendItems)" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(-> tmp2 .getPlot .getFixedLegendItems)" "(.getItemCount li)" "(.getItemCount li 1)" "(.getCount li 1)" "(.getCounts li 1)" "(.getLabel (.get li 1))" "(.getLabel (.get li 0))" "(.getDataset (.get li 0))" "(.get li 0)" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "li" "(def li (.getLegendItems (.getPlot tmp)))" "li" "(def li (.getFixedLegendItems (.getPlot tmp)))" "(def li (.getFixedLegendItems tmp))" "(def li (.getFixLegendItems tmp))" "(def li (.getLegendItems tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "tmp2" "(def tmp2 (si/combine-plots tmp tmp))" "tmp2" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(def dt-axis (org.jfree.chart.axis.DateAxis. \"\"))" "(def comb-plot (org.jfree.chart.plot.CombinedDomainXYPlot.))" "(def tmp2 (si/combine-plots tmp tmp))" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(-> tmp .getPlot .getDomainAxis .getMinimumDate)" "(-> comb-plot .getDomainAxis .getMaximumDate)" "(-> comb-plot .getDomainAxis .getMinimumDate)" "(.add comb-plot (.getPlot tmp))" "(.add comb-plot tmp)" "(.setDomainAxis comb-plot dt-axis)" "(def dt-axis (org.jfree.chart.axis.DateAxis. \"\"))" "(def comb-plot (org.jfree.chart.plot.CombinedDomainXYPlot.))" "(-> tmp .getPlot .getDomainAxis .getMinimumDate)" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(-> tmp .getPlot .getDomainAxis .getMinimumDate)" "(-> comb-plot .getDomainAxis .getMinimumDate)" "(def comb-plot (org.jfree.chart.plot.CombinedDomainXYPlot. (-> tmp .getPlot .getDomainAxis)))" "(-> tmp .getPlot .getDomainAxis .getMinimumDate)" "(-> tmp .getPlot .getDomainAxis .getMaximumDate)" "(-> tmp .getPlot .getDomainAxis .getMaxiumDate)" "(-> tmp .getPlot .getDomainAxis prn)" "(-> tmp .getPlot .getDomainAxis)" "(-> tmp .getPlot)" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(-> tmp .getPlot .getDomainAxis)" "(-> tmp .getPlot)" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(si/save tmp
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(type tmp2)" "(def tmp2 (si/combine-plots tmp tmp))" "(type tmp2)" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(type tmp2)" "(def tmp2 (si/combine-plots tmp tmp))" "(si/save tmp2
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp2 (si/combine-plots tmp tmp))" "(type tmp)" "(def tmp (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true))" "(type pl)" "(->> f-ds :stationary-factors prn)" "(->> f-ds :stationary-factors si/hprn)" "(->> f-ds :stationary-factors si/prn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 1)))" "(->> f-ds :stationary-factors ($where {:property \"conciergeLastName\"}) prn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 35)))" "(->> f-ds :stationary-factors ($where {:property \"conciergeLastName\"}) prn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 35)))" "(* 0.992156 (/ 253 (+ 253 4)))" "(double (/ 253 (+ 253 4)))" "(/ 253 (+ 253 4))" "(->> f-ds :stationary-factors ($where {:property \"conciergeLastName\"}) prn)" "(->> f-ds :stationary-factors ($where {:res-ratio {:$gt 0.5}}) prn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 35)))" "(->> f-ds :stationary-factors ($where {:res-ratio {:$gt 0.5}}) prn)" "(->> f-ds :stationary-factors ($where {:property \"conciergeLastName\"}) prn)" "(si/save (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save (ic/time-series-plot :timestamp :target-conv :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save (ic/time-series-plot :timestamp :weighted-conv :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (si/segmented-ts-plot f-ds \"conciergeLastName\"))" "(->> f-ds :stationary-factors ($where {:res-ratio {:$gt 0.5}}) prn)" "(-> f-ds :stationary-factors ($where {:res-ratio {:$gt 0.5}}) prn)" "(-> f-ds :stationary-factors ($where {:res-ratio {i/:$gt 0.5}}) prn)" "(-> f-ds :stationary-factors ($where {:res-ratio {:$gt 0.5}}) prn)" "(-> f-ds :stationary-factors prn)" "(-> f-ds keys)" "(anomaly-id->alert-id \"5bb047dc-f17b-4b00-8dc8-b829ff977c70\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 35)))" "(count useful-funnel-anomaly-ids)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 100)))" "(anomaly-id->alert-id \"dc59f98b-2507-4c85-9f96-95f47aab6f40\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 39)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 40)))" "(anomaly-id->alert-id \"5ddddd0a-dba4-4160-92ea-66884789e514\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 30)))" "(anomaly-id->alert-id \"37ddb6a4-7ad4-4666-b81d-89991b12f754\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 20)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 7)))" "(anomaly-id->alert-id \"a0ef4cf2-07fc-4d39-8b91-8b1d871b11d3\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 6)))" "(anomaly-id->alert-id \"40ecd02f-1a85-4cdb-90ee-85d56e301adb\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 5)))" "(anomaly-id->alert-id \"953863f3-8ab7-49db-951b-2aa6ef069429\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 4)))" "(anomaly-id->alert-id \"8ed59d4d-fd76-4de3-913e-34f74677147d\")" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 3)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (nth useful-funnel-anomaly-ids 2)))" "(si/save (ic/time-series-plot :timestamp :weighted-conv :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (si/segmented-ts-plot f-ds \"Source\"))" "(si/save (ic/time-series-plot :timestamp :counts :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save (ic/time-series-plot :timestamp :target-conv :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save (ic/time-series-plot :timestamp :weighted-conv :data pl :group-by :property-value :legend true)
                                \"../org/img/tmp.png\" :width 1000 :height 800)" "(prn pl)" "(si/hprn pl)" "(def pl (si/segmented-ts-plot f-ds \"mp_country_code\"))" "(anomaly-id->alert-id \"42dba045-e947-47bc-9b1e-ba7e0c311317\")" "anomaly-id->alert-id" "(->> f-ds keys)" "(->> f-ds :alert-id)" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (si/segmented-ts-plot f-ds \"mp_country_code\"))" "(def pl (si/segmented-ts-plot f-ds))" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (si/segmented-ts-plot f-ds \"mp_country_code\"))" "(def pl (si/segmented-ts-plot f-ds))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(->> f-ds :stationary-factors ($order [:property :res-ratio] :desc) prn)" "(->> f-ds :stationary-factors ($order [:property :res-ratio] :asc) prn)" "(->> f-ds :stationary-factors prn)" "(->> f-ds :stationary-factors i/dim)" "(->> f-ds :stationary-factors type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(->> f-ds :stationary-factors type)" "(->> f-ds keys)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(doto 1 prn)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"Proceso\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))
(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"Proceso\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))
(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$app_version\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))
(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$manufacturer\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))
(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"Proceso\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))" "(->> f-ds :stationary-factors prn)" "(->> f-ds keys)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/$join [:datetime :datetime] o-ds)
                                        (i/add-derived-column :w-cr [:step-conv :counts :overall-counts](fn [step-conv counts overall-counts] (/ (* step-conv counts) overall-counts)))))" "(def o-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"$overall\" :step 5})
                                      ($ [:datetime :counts])
                                      (<- (i/col-names [:datetime :overall-counts]))))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$ne \"$overall\"}}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$ne \"$overall\"}}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             \"540\"
                                                                                                                             \"320\"
                                                                                                                             \"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                              \"800\"}}}) ($order [:datetime :property-value] :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             \"540\"
                                                                                                                             \"320\"
                                                                                                                             \"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                             \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             \"540\"
                                                                                                                             \"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                             \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(->> tmp-ds ($where {:property-value \"800\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"414\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"600\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"1280\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"1536\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"$overall\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"$overall\"}) ($ :w-cr) max)" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             \"540\"
                                                                                                                             \"320\"
                                                                                                                             \"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                             \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(->> tmp-ds ($where {:property-value \"1080\"}) ($ :w-cr) (apply max))" "(->> tmp-ds ($where {:property-value \"1080\"}) ($ :w-cr) max)" "(->> tmp-ds ($where {:property-value \"1080\"}) si/hprn)" "(->> tmp-ds ($where {:property-value \"1080\"}))" "(def tmp-pl ($where {:property-value \"1008\"}))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             #_\"480\"
                                                                                                                             #_\"1536\"
                                                                                                                             #_\"768\"
                                                                                                                             #_\"1440\"
                                                                                                                             #_\"720\"
                                                                                                                             #_\"540\"
                                                                                                                             \"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             #_\"1312\"
                                                                                                                             #_\"1280\"
                                                                                                                             #_\"288\"
                                                                                                                             #_\"375\"
                                                                                                                             #_\"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true)) (si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             #_\"600\"
                                                                                                                             #_\"414\"
                                                                                                                             #_\"480\"
                                                                                                                             #_\"1536\"
                                                                                                                             #_\"768\"
                                                                                                                             #_\"1440\"
                                                                                                                             #_\"720\"
                                                                                                                             #_\"540\"
                                                                                                                             \"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             #_\"1312\"
                                                                                                                             #_\"1280\"
                                                                                                                             #_\"288\"
                                                                                                                             #_\"375\"
                                                                                                                             #_\"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             #_\"600\"
                                                                                                                             #_\"414\"
                                                                                                                             #_\"480\"
                                                                                                                             \"1536\"
                                                                                                                             #_\"768\"
                                                                                                                             #_\"1440\"
                                                                                                                             #_\"720\"
                                                                                                                             #_\"540\"
                                                                                                                             #_\"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             #_\"1312\"
                                                                                                                             #_\"1280\"
                                                                                                                             #_\"288\"
                                                                                                                             #_\"375\"
                                                                                                                             #_\"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             #_\"414\"
                                                                                                                             #_\"480\"
                                                                                                                             \"1536\"
                                                                                                                             #_\"768\"
                                                                                                                             #_\"1440\"
                                                                                                                             #_\"720\"
                                                                                                                             #_\"540\"
                                                                                                                             #_\"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             #_\"288\"
                                                                                                                             \"375\"
                                                                                                                             #_\"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(->> f-ds :stationary-factors ($where {:property \"$screen_width\"}) ($ :diff-weighted-conv) i/sum)" "(->> f-ds :stationary-factors ($where {:property \"$screen_width\"}) ($ :weighted-conv) i/sum)" "(->> f-ds :stationary-factors ($where {:property \"$screen_width\"}) ($ :weighted-conf) i/sum)" "(->> f-ds :stationary-factors ($where {:property \"$screen_width\"}) prn)" "(->> f-ds :stationary-factors si/hprn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(->> f-ds :stationary-factors si/hprn)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(->> f-ds :stationary-factors si/hprn)" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             #_\"540\"
                                                                                                                             #_\"320\"
                                                                                                                             #_\"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                             \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             #_\"540\"
                                                                                                                             #_\"320\"
                                                                                                                             \"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                             \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\"
                                                                                                                             \"600\"
                                                                                                                             \"414\"
                                                                                                                             \"480\"
                                                                                                                             \"1536\"
                                                                                                                             \"768\"
                                                                                                                             \"1440\"
                                                                                                                             \"720\"
                                                                                                                             \"540\"
                                                                                                                             \"320\"
                                                                                                                             \"$overall\"
                                                                                                                             \"1312\"
                                                                                                                             \"1280\"
                                                                                                                             \"288\"
                                                                                                                             \"375\"
                                                                                                                              \"800\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(->> f-ds :segmented-ts ($where {:property \"$screen_width\"}) ($ :property-value) distinct)" "(->> f-ds :segmented-ts ($where {:property \"$screen-width\"}) ($ :property-value) distinct)" "(->> f-ds ($where {:property \"$screen-width\"}) ($ :property-value) distinct)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\" \"$overall\" \"720\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\" \"$overall\" \"720\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\" \"$overall\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in #{\"1080\" \"$overall\"}}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value {:$in [\"1080\" \"$overall\"]}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5 :property-value #{\"1080\" \"$overall\"}}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value :legend true))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds :group-by :property-value))" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :step 5}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :w-cr :data tmp-ds))" "(si/save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/time-series-plot :ts :step-conv :data tmp-ds))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)
                                        (i/add-derived-column :w-cr [:step-conv :counts](fn [step-conv counts] (* step-conv counts)))))" "(i/dim tmp-ds)" "(si/save tmp-pl \"../org/img/tmp.png\")" "(save tmp-pl \"../org/img/tmp.png\")" "(def tmp-pl (ic/xy-plot :ts :step-conv :data tmp-ds))" "(ic/xy-plot :ts :step-conv :data tmp-ds)" "(si/hprn tmp-ds)" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc) (si/add-ts-column :ts :datetime)))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc) (si/add-ts-column :ts datetime)))" "(def tmp-ds (->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc)))" "(->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc) si/hprn)" "(->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) ($order :datetime :asc))" "(->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\" :step 5}) si/hprn)" "(->> f-ds :grouped-job :queried-job :query :query-specs)" "(->> f-ds :grouped-job :anomalies first)" "(->> f-ds :segmented-ts ($where {:property \"$screen_width\" :property-value \"1080\"}) si/hprn)" "(-> f-ds :stationary-factors si/hprn)" "(-> f-ds :stationary-factors i/dim)" "(-> f-ds :segmented-ts i/dim)" "(-> f-ds :segmented-ts dim)" "(-> f-ds keys)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(-> f-ds keys)" "(-> f-ds type)" "(-> f-ds :keys)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(conj (conj [] 1) 2)" "(type (conj [] 1))" "(conj [] 1)" "(->Somerec \"a\" \"B\")" "(defrecord Somerec [a b])" "(drinky-drinky dude)" "(def dude (->Someone \"belun\" \"daiquiri\"))" "(defrecord Someone [nick-name preffered-drink] Fun-Time (drinky-drinky [_] (str nick-name \"(having \" preffered-drink \"): uuumm\")))" "(defprotocol Fun-Time (drinky-drinky [_]))" "(.getInterfaces vector)" "(.getInterfaces a)" "(def a (i/dataset [:a :b] [[1 \"a\"] [:b 4]]))" "(prn (i/dataset [:a :b] [[1 \"a\"] [:b 4]]))" "(i/dataset [:a :b] [[1 \"a\"] [:b 4]])" "(i/dataset [:a :b] [[1 2] [3 4]])" "dataset" "(-> f-ds :stationary-factors
                           prn)" "(-> f-ds :stationary-factors
                           si/hprn)" "(-> f-ds :stationary-factors i/dim)" "(-> f-ds :stationary-factors dim)" "(-> f-ds :stationary-factors type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(-> f-ds :stationary-factors type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (second useful-funnel-anomaly-ids)))" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(-> f-ds :stationary-factors type)" "(-> f-ds :stationary-factors first type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(-> f-ds :stationary-factors first type)" "(-> f-ds :stationary-factors type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(-> f-ds :stationary-factors type)" "(-> f-ds :stationary-factors )" "(-> f-ds :stationary-factors type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(-> f-ds :stationary-factors type)" "(-> f-ds keys)" "(-> f-ds first type)" "(def f-ds (run-xf affinity/xf--anomaly-id->summary (first useful-funnel-anomaly-ids)))" "(->> ($ [:property-value :ts] f-ds-6) si/hprn)" "($ [:property-value :ts] f-ds-6)" "(si/hprn f-ds-6)" "(->> f-ds-6 ($rollup :mean :w-cr :property-value) si/hprn)" "(si/hprn f-ds-6)" "(def f-ds-6 (->> f-ds-5 (i/add-derived-column :w-cr [:counts :overall-counts :step-conv] (fn [counts overall-counts step-conv] (/ (* step-conv counts) overall-counts)))))" "(def f-ds-6 (->> f-ds-5 (i/add-derived-column :w-cr [:counts :overall-counts :step-conv] (fn [counts overall-counts step-conv] (/ (* step-conv counts) overall0counts)))))" "(def f-ds-6 (->> f-ds-5 (i/add-derived-column :w-cr [:counts :overall-counts :step-conv] (fn [counts overall-counts :step-conv] (/ (* step-conv counts) overall0counts)) )))" "(def f-ds-5 (->> f-ds-4 ($where {:property-value {:$ne \"$overall\"}})))" "(->> f-ds-4 ($where {:property-value {:$ne \"$overall\"}}) (si/hprn 30))" "(->> f-ds-4 ($where {:property-value {:$ne \"$overall\"}}) si/hprn)" "(->> f-ds-5 ($where {:property-value {:$ne \"$overall\"}}) si/hprn)" "(->> f-ds-4 ($where {:property-value \"$overall\"}) si/hprn) " "(->> f-ds-4 ($where {:property \"$overall\"}) si/hprn) " "(si/hprn f-ds-4)" "(def f-ds-4 (i/$join [:datetime :datetime] o-ds f-ds-3))" "(si/hprn o-ds)" "(def o-ds (->> ($where {:property-value \"$overall\"} f-ds-3)
                                      ($ [:datetime :counts])
                                      (<- (i/col-names [:datetime :overall-counts]))))" "(si/hprn o-ds)" "(def o-ds (->> ($where {:property-value \"$overall\"} f-ds-3)
                                      ($ [:datetime :counts])))" "(def o-ds (-> ($where {:property-value \"$overall\"} f-ds-3)
                                     ($ [:datetime :counts])))" "(si/hprn o-ds)" "(def o-ds ($where {:property-value \"$overall\"} f-ds-3))" "(si/hprn f-ds-3)" "(si/hprn f-ds3-)" "(si/hprn f-ds3)" "(def f-ds-3 ($where {:property \"$browser\" :step 1} f-ds-2))" "(si/hprn 30 ($where {:property \"$browser\" :datetime \"2017-09-10\" :step 1} f-ds-2))" "(si/hprn 20 ($where {:property \"$browser\" :datetime \"2017-09-10\" :step 1} f-ds-2))" "(si/hprn ($where {:property \"$browser\" :datetime \"2017-09-10\" :step 1} 20 f-ds-2))" "(si/hprn ($where {:property \"$browser\" :datetime \"2017-09-10\"} f-ds-2))" "(si/hprn ($where {:property \"$browser\" :datetime \"2017-09-10\"}))" "(hprn ($where {:property \"$browser\" :datetime \"2017-09-10\"}))" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (ic/time-series-plot :ts :step-conv :data ($where {:step 1 :property \"$browser\"} f-ds-2) :group-by :property-value :legend true))" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (ic/time-series-plot :ts :counts :data ($where {:step 1 :property \"$browser\"} f-ds-2) :group-by :property-value :legend true))" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(def pl (ic/time-series-plot :ts :counts :data ($where {:step 1} f-ds-2) :group-by :property-value :legend true))" "(si/save pl \"../org/img/tmp.png\" :width 1000 :height 800)" "(si/save pl \"../org/img/tmp.png\" :width 800 :height 600)" "(si/save pl \"../org/img/tmp.png\")" "(def pl (ic/time-series-plot :ts :counts :data f-ds-2 :group-by :property-value :legend true))" "(si/save pl \"../org/img/tmp.png\")" "(type pl)" "(si/save pl \"../org/img/tmp.png\")" "(def pl (ic/time-series-plot :ts :counts :data f-ds-2 :group-by :property-value))" "(si/hprn f-ds-2)" "(si/hprn f-ds)" "(def f-ds-2 (si/add-ts-column :ts :datetime f-ds))" "(si/hprn f-ds)" "(= (type f-ds) #'i)" "(= (type f-ds) #'i/Dataset)" "(= (type f-ds) i/Dataset)" "(= (type f-ds) 'i/Dataset)" "(= (type f-ds) #'i/Dataset)" "'i/Dataset" "(= (type (f-ds)) #'i/Dataset)" "(= (type (f-ds)) 'i/Dataset)" "(= (type (f-ds)) i/Dataset)" "(type f-ds)" "(i/dim f-ds)" "(def f-ds (run-xf affinity/xf--anomaly-id->segmented-ts (first useful-funnel-anomaly-ids)))" "(i/dim f-ds)" "(def f-ds (run-xf affinity/xf--anomaly-id->segmented-ts (first useful-funnel-anomaly-ids)))" "(in-ns 'affinity.skeleton.env)" "(def alert-id->feedback (bucket/get *rb* \"alert-id->stuff/alert-id->user-feedback\"))
(def alert-id->sh-noti (bucket/get *rb* \"alert-id->stuff/alert-id->smarthub-notification\"))

(def anomaly-ids (->> alert-id->sh-noti
                      vals
                      (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                      (apply concat)
                      distinct))

(def anomaly-id->alert-id
        (->> (mapcat (fn [[alert-id noti]]
                       (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id]))))
                     alert-id->sh-noti)
             (into {})))

(def scored-anomaly-details
  (->> (map (fn [anomaly-id]
              (try (bucket/get *adb* anomaly-id)
                   (catch Exception e (prn (format \"caught exception for %s: %s\" anomaly-id (.getMessage e))))))
            anomaly-ids)
       (filter not-empty)))" "(si/hprn f-ds)" "(i/dim f-ds)" "(type f-ds)" "(dim f-ds)" "(def f-ds (run-xf affinity/xf--anomaly-id->segmented-ts (first useful-funnel-anomaly-ids)))" "(run-xf affinity/xf--anomaly-id->segmented-ts (first useful-funnel-anomaly-ids))" "(def useful-funnel-anomaly-ids (->> ($where {\"is_useful\" true \"report_type\" \"FUNNELS\"} ds-feedback)
                                    ($ \"alert_id\")
                                    (map alert-id->sh-noti)
                                    (remove nil?)
                                    (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                                    (apply concat)
                                    distinct))

(count useful-funnel-anomaly-ids)
" "(def alert-id->feedback (bucket/get *rb* \"alert-id->stuff/alert-id->user-feedback\"))
(def alert-id->sh-noti (bucket/get *rb* \"alert-id->stuff/alert-id->smarthub-notification\"))

(def anomaly-ids (->> alert-id->sh-noti
                      vals
                      (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                      (apply concat)
                      distinct))

(def anomaly-id->alert-id
        (->> (mapcat (fn [[alert-id noti]]
                       (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id]))))
                     alert-id->sh-noti)
             (into {})))

(def scored-anomaly-details
  (->> (map (fn [anomaly-id]
              (try (bucket/get *adb* anomaly-id)
                   (catch Exception e (prn (format \"caught exception for %s: %s\" anomaly-id (.getMessage e))))))
            anomaly-ids)
       (filter not-empty)))" "(def feedbacks (ad/feedback *pac* \"2017-10-01\" \"2017-11-20\"))
(def ds-feedback
  (to-dataset (->> feedbacks
                   (map (fn [feedback] (select-keys (get feedback \"properties\")
                                                    [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"]))))))
" "(in-ns 'affinity.skeleton.env)" "dataset" "(require '[affinity.skeleton.query :as q]
         '[affinity.skeleton.anomaly-details :as ad]
         '[affinity.skeleton.core :as s
         '[incanter.core :as i :refer [$ $map $where $rollup $order $fn $group-by $join]]])
" "(use '[incanter core datasets charts :exclude save]
     '[affinity.skeleton.incanter]
     '[plumbing.core :rename {sum p-sum}])" "(use '[incanter core datasets charts]
     '[affinity.skeleton.incanter]
     '[plumbing.core :rename {sum p-sum}])" "(use '[incanter core datasets charts]
     '[affinity.skeleton.core]
     '[plumbing.core :rename {sum p-sum}])" "(use '[incanter core datasets charts :rename {save i-save}]
     '[affinity.skeleton.core]
     '[plumbing.core :rename {sum p-sum}])" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retention-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 17))) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 17))) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(for [ratio (range 0 3 0.05)] (-> (->> retention-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 17)))" "(for [ratio (range 0 3 0.05)] (-> (->> retetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 17)))" "(for [ratio (range 0 3 0.05)] (-> (->> retetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count) (/ 17))" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count) (/ 17)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(-> (->> retention-ds  ($ :anomaly-id)) distinct count)" "(-> (->> retention-ds ($where {:res-ratio {:$gte 0}}) ($ :anomaly-id)) distinct count)" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retention-ds ($where {:res-ratio {:$gte ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retention-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> rentetion-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> funnel-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"../org/img/20171204-roc_retention.png\")" "(affinity.skeleton.incanter/save retention-ds \"../org/export/20171204-retention_ds.csv\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> retention-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 41) double)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"20171204-roc_retention.png\")" "
" "(def retention-ds (->> st-retention (remove (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))
" "(map dim st-retention)" "(def st-retention (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-retention-anomaly-ids))" "(->> ($where {\"is_useful\" false \"report_type\" \"RETENTION\"} ds-feedback)
           ($ \"alert_id\")
           (map alert-id->sh-noti)
           (remove nil?)
           (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
           (apply concat)
           distinct count)
" "(->> ($where {\"report_type\" \"RETENTION\"} ds-feedback)
           ($ \"alert_id\")
           (map alert-id->sh-noti)
           (remove nil?)
           (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
           (apply concat)
           distinct count)
" "(prn (dataset [:anomaly-id :alert-id] (map (fn [anomaly-id] [anomaly-id (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\"
                                                                                      (anomaly-id->alert-id anomaly-id))])
                                                 useful-retention-anomaly-ids)))" "(double (/ 33 (+ 14 33)))" "(/ 33 (+ 14 33))" "(/ 22 (+ 14 22))" "(->> ($where {\"is_useful\" false \"report_type\" \"RETENTION\"} ds-feedback)
           ($ \"alert_id\")
           (map alert-id->sh-noti)
           (remove nil?)
           (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
           (apply concat)
           distinct count)
" "(affinity.skeleton.incanter/save funnel-ds \"../org/export/20171204-funnel_ds.csv\")" "(def funnel-ds (->> st-funnel (remove (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(affinity.skeleton.incanter/save funnel-ds \"../org/export/20171204-funnel_ds.csv\")" "(save (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> funnel-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 41) double)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\") \"20171204-roc_funnel.png\")" "(incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> funnel-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 41) double)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\")" "(incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count (/ 41) double)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\")" "(incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count) (/ 41) double) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\")" "(prn funnel-ds)" "(funnel-ds)" "(def funnel-ds (->> st-funnel (remove (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(->> st-funnel (remove (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (map dim))" "(->> st-funnel (filter (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (map dim))" "(map (fn-> dim second nil?) st-funnel)" "(def funnel-ds (->> st-funnel (filter (fn-> dim second nil?)) (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(def funnel-ds (->> st-funnel (filter nil?) (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(def funnel-ds (->> st-funnel (filter (fn-> dim second (>= 17))) (apply conj-rows)))" "(def funnel-ds (->> st-funnel (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(map dim st-funnel)" "(count st-funnel)" "(type st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-funnel-anomaly-ids))" "(def st-funnel)" " " "a" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-funnel-anomaly-ids))" "(-> st-funnel first prn)" "(-> st-funnel first type)" "(-> st-funnel first)" "(-> st-funnel count)" "(-> st-funnel type)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts dim)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts type)" "(-> tmp :segmented-ts dim)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 6 (-> tmp :segmented-ts))) dim)" "(-> tmp :segmented-ts count)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(-> tmp :segmented-ts count)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 10 (-> tmp :segmented-ts))) dim)" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 6 (-> tmp :segmented-ts))) dim)" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 5 (-> tmp :segmented-ts))) dim)" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 4 (-> tmp :segmented-ts))) dim)" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (take 3 (-> tmp :segmented-ts))) dim)" "(-> (apply affinity.skeleton.incanter/safely-conj-rows (-> tmp :segmented-ts)) dim)" "(-> tmp :segmented-ts count)" "(-> tmp :segmented-ts type)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts dim)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(-> tmp :segmented-ts dim)" "(-> tmp :segmented-ts head prn)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts head prn)" "(-> tmp :segmented-ts dim)" "(-> tmp :segmented-ts head)" "(-> tmp :segmented-ts keys)" "(-> tmp :segmented-ts type)" "(-> tmp :segmented-ts second type)" "(-> tmp :segmented-ts second prn)" "(-> tmp :segmented-ts first prn)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts first prn)" "(-> tmp :segmented-ts first dim)" "(-> tmp :segmented-ts first keys)" "(-> tmp :segmented-ts first)" "(-> tmp :segmented-ts type)" "(-> tmp :segmented-ts keys)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts-2 first (get \"meta\"))" "(-> tmp :segmented-ts-2 first \"meta\")" "(-> tmp :segmented-ts-2 first keys)" "(-> tmp :segmented-ts-2 first)" "(-> tmp :segmented-ts-2 count)" "(-> tmp keys)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts first keys)" "(-> tmp :segmented-ts first (get \"meta\"))" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts first (get \"meta\"))" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts first (get \"meta\"))" "(->> tmp :segmented-ts first keys)" "(->> tmp :segmented-ts first col-names)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(->> tmp :segmented-ts first col-names)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(->> tmp :segmented-ts first col-names)" "(->> tmp :segmented-ts first type)" "(->> tmp :segmented-ts first)" "(->> tmp :segmented-ts first keys)" "(->> tmp :segmented-ts first type)" "(->> tmp :segmented-ts type)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "dim" "(->> tmp :segmented-ts dim)" "(->> tmp keys)" "(->> tmp :segmented-ts type)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(->> tmp :segmented-ts type)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(->> tmp :segmented-ts ($ :property) distinct)" "(-> tmp :segmented-ts col-names)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts dim)" "(keys tmp)" "(count tmp)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"]))" "(-> tmp :segmented-ts dim)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(-> ($ :property sts) distinct)" "(dim sts)" "(def sts (-> tmp :segmented-ts))" "(-> tmp :group-by-properties)" "(-> tmp :segmented-ts dim)" "(-> tmp :original-ts)" "(-> tmp :segmented-ts dim)" "(-> tmp :group-by-properties)" "(-> tmp keys)" "(-> st-funnel keys)" "(def tmp (->> st-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(def tmp (->> st-100-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(count st-funnel)" "(def st-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-funnel-anomaly-ids))" "(require '[affinity.skeleton.query :as q]
         '[affinity.skeleton.anomaly-details :as ad]
         '[affinity.skeleton.core :as s])" "(count anomaly-ids)" "(-> tmp :segmented-ts prn)" "(-> tmp :segmented-ts count)" "(-> tmp :segmented-ts prn)" "(-> tmp keys)" "(-> tmp :original-ts prn)" "(def tmp (->> st-100-funnel (filter #(-> % :anomaly-id (= \"8b6feeaa-4fd6-4549-b35e-252cadafbef1\"))) first))" "(-> tmp :original-ts prn)" "(def tmp (->> st-100-funnel (filter #(-> % :anomaly-id (= \"b3270bea-ec4f-4d64-9ca9-53ece30b7560\"))) first))" "(-> tmp :original-ts prn)" "(-> tmp :original-ts type)" "(-> tmp original-ts prn)" "(-> tmp keys)" "(def tmp (->> st-100-funnel (filter #(-> % :anomaly-id (= \"953863f3-8ab7-49db-951b-2aa6ef069429\"))) first))" "(count tmp)" "(def tmp (->> st-100-funnel (filter #(-> % :anomaly-id (= \"953863f3-8ab7-49db-951b-2aa6ef069429\")))))" "(->> st-100-funnel (filter #(-> % :anomaly-id (= \"953863f3-8ab7-49db-951b-2aa6ef069429\"))))" "(-> st-100-funnel (filter #(-> % :anomaly-id (= \"953863f3-8ab7-49db-951b-2aa6ef069429\"))))" "(-> st-100-funnel type)" "(prn (dataset [:anomaly-id :alert-id] (map (fn [anomaly-id] [anomaly-id (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\"
                                                                                      (anomaly-id->alert-id anomaly-id))])
                                                 useful-funnel-anomaly-ids)))" "(prn (dataset [:anomaly-id :alert-id] (map (fn->> (fn [anomaly-id] [anomaly-id (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\"
                                                                                             (anomaly-id->alert-id anomaly-id))])) useful-funnel-anomaly-ids)))" "(prn (dataset [:anomaly-id :alert-id] (map (fn->> (fn [anomaly-id] [anomaly-id \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\"
                                                                          (anomaly-id->alert-id anomaly-id)])) useful-funnel-anomaly-ids)))" "(prn (dataset [:url](map (fn->> (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\")) useful-funnel-anomaly-ids)))" "(dataset [:url](map (fn->> (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\")) useful-funnel-anomaly-ids))" "(map (fn->> (format \"[[https://mixpanel.com/admin/internal/smart_hub/alert/%1$s][%1$s]]\")) useful-funnel-anomaly-ids)" "(prn (dataset [\"anomaly-id\"] useful-funnel-anomaly-ids))" "(dataset \"anomaly-id\" useful-funnel-anomaly-ids)" "(dataset useful-funnel-anomaly-ids :transpose true)" "(dataset useful-funnel-anomaly-ids)" "useful-funnel-anomaly-ids" "(def st-100-funnel (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-funnel-anomaly-ids))" "(affinity.skeleton.incanter/save insights-ds \"../org/export/20171204-insights_ds.csv\")" "(affinity.skeleton.incanter/save insights-ds \"20171204-insights_ds.csv\")" "(head insights-ds)" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(head insights-ds)" "(affinity.skeleton.incanter/save insights-ds \"20171204-insights_ds.csv\")" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(view (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum residual ratio\" :y-label \"percentage\"))" "(view (incanter.charts/xy-plot (range 0 3 0.05) (for [ratio (range 0 3 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum p-val\" :y-label \"percentage\"))" "(view (incanter.charts/xy-plot (range 0 1 0.05) (for [ratio (range 0 1 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum p-val\" :y-label \"percentage\"))" "(incanter.charts/xy-plot (range 0 1 0.05) (for [ratio (range 0 1 0.05)] (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)) :title \"ROC curve\" :x-label \"minimum p-val\" :y-label \"percentage\")" "(incanter.charts/xy-plot (range 0 1 0.05) (for [ratio (range 0 1 0.05)] [ratio  (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)]) :title \"ROC curve\" :x-label \"minimum p-val\" :y-label \"percentage\")" "(-> (->> insights-ds ($where {:p-val {:$gt 1.0}}) ($ :anomaly-id)) distinct count)" "(-> (->> insights-ds ($where {:p-val {:$gt 0.99}}) ($ :anomaly-id)) distinct count)" "(-> (->> insights-ds ($where {:p-val {:$gt 0}}) ($ :anomaly-id)) distinct count)" "(for [ratio (range 0 1 0.05)] [ratio  (-> (->> insights-ds ($where {:res-ratio {:$gt ratio}}) ($ :anomaly-id)) distinct count)])" "(range 0 1 0.1)" "(-> (->> insights-ds ($where {:res-ratio {:$gt 0}}) ($ :anomaly-id)) distinct count)" "(-> ($ :anomaly-id insights-ds) distinct count)" "($ :anomaly-id insights-ds)" "($ :anomaly-id insight-ds)" "(affinity.skeleton.incanter/save insights-ds \"20171204-insights-ds.csv\")" "(prn (head insights-ds))" "(head insights-ds)" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(type anomaly-id->alert-id)" "(dim insights-ds)" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id)))" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (<- (affinity.skeleton.core/add-alert-id-and-url anomaly-id->alert-id))))" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows) (<- (add-alert-id-and-url anomaly-id->alert-id))))" "(prn insights-ds)" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17))) (apply conj-rows)))" "(def insights-ds (->> st-100-insights (filter (fn-> dim second (>= 17)))) (apply conj-rows))" "(map dim st-100-insights)" "($ :anomaly-id st-100-insights)" "(->> st-100-insights ($ :anomaly-id))" "(map type st-100-insights)" "(count st-100-insights)" "(def st-100-insights (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb (take 100 useful-insights-anomaly-ids)))" "(count useful-insights-anomaly-ids)" "(def st-insights (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb useful-insights-anomaly-ids))" "(double (/ 420 (+ 420 77)))" "(double (/ 420 ()))" "(count not-useful-funnel-anomaly-ids)" "(count not-useful-funnel-alert-ids)" "(count useful-funnel-alert-ids)" "(count useful-funnel-anomaly-ids)" "(double (/ 83 (+ 83 44)))" "(double (/ 112 (+ 112 22)))" "(/ 112 (+ 112 22))" "(double (/ 970 (+ 970 170)))" "(/ 970 (+ 970 170))" "(->> ds-feedback ($where {:report_type {:$eq \"FUNNELS\"} :is_useful {:$eq true}}) prn)" "(->> ds-feedback ($where {:report_type {:$eq \"FUNNELS\"}}) prn)" "(->> ds-feedback ($where {:report-type {:$eq \"FUNELLS\"}}))" "(prn ds-feedback)" "(-> ($where {:report-type {:$eq :funnel}} total-ds-3) prn)" "(def total-ds-3 (-> total-ds-2 (affinity.skeleton.core/add-alert-id anomaly-id->alert-id)))" "(-> total-ds-2 (affinity.skeleton.core/add-alert-id anomaly-id->alert-id) prn)" "anomaly-id->alert-id" "(-> total-ds-2 affinity.skeleton.core/add-alert-id prn)" "(-> (sequence affinity.skeleton.core/add-alert-id [total-ds-2]) prn)" "(-> ($where {:report-type {:$eq :funnel}} total-ds-2) prn)" "($where {:report-type {:$eq :funnel}} total-ds-2)" "(prn total-ds-2)" "(def total-ds-2 (->> total-ds (filter (fn-> dim second (>= 17))) (apply conj-rows))) " "(def total-ds-2 (->> total-ds (filter (fn-> dim second (>= 17)))) (apply conj-rows)) " "(prn total-ds-2)" "(def total-ds-2 (->> total-ds (filter (fn-> dim second (>= 17))))) " "(Def total-ds-2 (->> total-ds (filter (fn-> dim second (>= 17))))) " "(prn total-ds-2)" "(->> total-ds (filter (fn-> dim second (>= 17))) (map dim)) " "(->> total-ds (filter (fn-> dim second (> 12))) (map dim total-ds)) " "(->> total-ds (filter (fn-> dim second (> 12)))) (map dim total-ds)" "(map dim total-ds)" "(let [_ (prn \"a\")])" "(let [_ (prn \"a\")] 1)" "(let [_ (prn a)] 1)" "(let [_ (prn a) 1])" "(-> total-ds (nth 5))" "(map type total-ds)" "(type total-ds)" "(count total-ds)" "(def total-ds (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb (take 100 (drop 100 useful-anomaly-ids))))" "(def total-ds (affinity.skeleton.core/pl--run--anomaly-id->summary ac pac adb pb (take 100 (drop 100 useful-anomaly-ids))))" "tmp" "(def tmp (affinity.skeleton.core/pl--run--anomaly-id->summary ac pac adb pb (take 3 useful-anomaly-ids)))" "(-> (add-derived-column :alert-id [:anomaly-id] anomaly-id->alert-id total-ds)
          (reorder-columns [:alert-id
                            :anomaly-id
                            :project-id
                            :report-type
                            :property
                            :property-value
                            :res-ratio
                            :k
                            :residual
                            :expected-k
                            :pseudo-actual-k
                            :actual-k
                            :p
                            :p-val
                            :hist-counts
                            :hist-total
                            :anomalies-id
                            :timestamp])
          (affinity.skeleton.incanter/save \"total-ds.csv\"))" "(-> (add-derived-column :alert-id [:anoamly-id] anomaly-id->alert-id total-ds)
          (reorder-columns [:alert-id
                            :anomaly-id
                            :project-id
                            :report-type
                            :property
                            :property-value
                            :res-ratio
                            :k
                            :residual
                            :expected-k
                            :pseudo-actual-k
                            :actual-k
                            :p
                            :p-val
                            :hist-counts
                            :hist-total
                            :anomalies-id
                            :timestamp])
          (affinity.skeleton.incanter/save \"total-ds.csv\"))" "(-> (add-derived-column :alert-id [:anoamly-id] anoamly-id->alert-id total-ds)
          (reorder-columns [:alert-id
                            :anomaly-id
                            :project-id
                            :report-type
                            :property
                            :property-value
                            :res-ratio
                            :k
                            :residual
                            :expected-k
                            :pseudo-actual-k
                            :actual-k
                            :p
                            :p-val
                            :hist-counts
                            :hist-total
                            :anomalies-id
                            :timestamp])
          (affinity.skeleton.incanter/save \"total-ds.csv\"))" "(count anomaly-id->alert-id)" "(affinity.skeleton.incanter/save total-ds \"total-ds.csv\")" "(require 'clojure.data.csv)" "(require '[clojure.data.csv :as csv])" "clojure.data.csv" "(save total-ds \"total-ds.csv\" :delim \",delim,\")" "(save total-ds \"total-ds.csv\" :delim \"xxx\")" "(save total-ds \"total-ds.csv\" :delim xxx)" "(prn total-ds)" "total-ds" "(save total-ds \"total-ds.csv\")" "(dim total-ds)" "(def total-ds (->> st-100 (filter (fn [ds] (-> ds :rows count (> 0)))) (apply conj-rows)))" "(dim total-ds)" "(def total-ds (->> st-100 (take 2) (filter (fn [ds] (-> ds :rows count (> 0)))) (apply conj-rows)))" "(def total-ds (->> st-100 (take 2) (filter (fn [ds] (-> ds rows count (> 0)))) (apply conj-rows)))" "(-> st-100 (nth 0) :rows count)" "(-> st-100 (nth 0) :rows :counts)" "(-> st-100 (nth 0) :rows)" "(dataset [:a :b])" "(dim (dataset [:a :b]))" "(-> st-100 (nth 0))" "(-> st-100 (nth 0) dim)" "(-> st-100 (nth 1) dim)" "(dim total-ds)" "(def total-ds (->> st-100 (take 2) (filter (fn [ds] (-> (dim ds) first (> 0)))) (apply conj-rows)))" "(dim total-ds)" "(def total-ds (->> st-100 (filter (fn [ds] (-> (dim ds) first (> 0)))) (apply conj-rows)))" "(dim (second st-100))" "(dim (apply conj-rows (take 2 st-100)))" "(apply conj-rows (take 2 st-100))" "(type st-100)" "(count st-100)" "(dim total-ds)" "(def total-ds (apply conj-rows st-100))" "(-> st-100 second prn)" "(-> st-100 first prn)" "total-ds" "(:col-names total-ds)" "(col-names total-ds)" "(dim total-ds)" "anomaly-id->alert-id" "(def anomaly-id->alert-id
        (->> (mapcat (fn [[alert-id noti]]
                       (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id]))))
                     alert-id->sh-noti)
             (into {})))" "(mapcat (fn [[alert-id noti]] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))) alert-id->sh-noti)" "(map (fn [[alert-id noti]] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))) alert-id->sh-noti)" "(map (fn [alert-id noti] ) alert-id->sh-noti)" "(map (fn [alert-id noti] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))) alert-id->sh-noti)" "(map (fn [alert-id noti] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))) alert-id->sh-noti))" "(into {} [[1 2] [3 4]])" "(map (fn [alert-id noti] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))) alert-id->sh-noti))" "(->> alert-id->sh-noti
           (map (fn [alert-id noti] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))))))" "(->> alert-id->sh-noti
           (mapcat (fn [alert-id noti] (->> noti :alert-contents (map (fn [alert-content] [(-> (get alert-content :alert) :anomaly :anomaly :anomaly-id) alert-id])))))))" "(->> alert-id->sh-noti
           (map-vals (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))))" "(->> alert-id->sh-noti
           (map-vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id)))))))))" "(dim total-ds)" "(def total-ds (apply affinity.skeleton.incanter/safely-conj-rows st-100))" "(dim total-ds)" "(def total-ds (affinity.skeleton.incanter/safely-conj-rows st-100))" "(-> st-100 (nth 2) dim)" "(-> st-100 (nth 2) prn)" "(-> st-100 first prn)" "(count st-100)" "(count (take 100 useful-anomaly-ids))" " (take 100 useful-anomaly-ids)" "(def st-100 (affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb (take 100 useful-anomaly-ids)))" "(prn (s/pl--anomaly-id->summary ac pac adb pb [\"c63879bc-acea-4ca6-b089-9904076d0fe9\"]))" "(prn a)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"e69c431f-d977-41c4-aefc-3230263458a9\"]))" "(prn a)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"e69c431f-d977-41c4-aefc-3230263458a9\"]))" "(prn a)" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"73e371fe-fdc7-4298-b08e-7178cc3ef3b0\"]))" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"66b6970f-4990-44a5-a53f-9abc16d1d7b4\"]))" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"66b6970f-4990-44a5-a53f-9abc16d1d7b4\"]))" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"66b6970f-4990-44a5-a53f-9abc16d1d7b4\"]))" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"66b6970f-4990-44a5-a53f-9abc16d1d7b4\"]))" "(-> a first prn)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"8686f177-34f6-4aab-8725-e4bf15c73b8f\"]))" "(-> a first prn)" "(-> a first type)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"8686f177-34f6-4aab-8725-e4bf15c73b8f\"]))" "(-> a first)" "(-> a first type)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"8686f177-34f6-4aab-8725-e4bf15c73b8f\"]))" "(-> a first type)" "(-> a type)" "(-> a first keys)" "(-> a first :stationary-factors prn)" "(prn a)" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"8686f177-34f6-4aab-8725-e4bf15c73b8f\"]))" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"42dba045-e947-47bc-9b1e-ba7e0c311317\"]))" "(conj-rows a)" "(type a)" "(prn (seq a))" "(coll? a)" "(matrix? a)" "(number? a)" "(dim a)" "a" "(def a (dataset []))" "(length (dataset []))" "(lenth (dataset []))" "(count (dataset []))" "(empty? (dataset []))" "(dataset [])" "(conj-rows {:a 1 :b 2} {:c 2 :d 4})" "(affinity.skeleton.incanter/safely-conj-rows {:a 1 :b 2} {:c 2 :d 4})" "(apply conj-rows nil)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"42dba045-e947-47bc-9b1e-ba7e0c311317\"]))" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"]))" "(prn a)" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"]))" "(-> a first :segmented-ts prn)" "(prn a)" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"]))" "(-> a first :segmented-ts prn)" "(-> a first :segmented-ts)" "(prn a)" "a" "(def a (s/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"]))" "(s/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"])" "(affinity.skeleton.core/pl--anomaly-id->summary ac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"])" "(affinity.skeleton.core/pl--anomaly-id->summaryac pac adb pb [\"9e1b0777-40d9-4ad0-a26e-36352977a119\"])" "(seq (to-list (dataset [])))" "(to-list (dataset []))" "(seq (dataset []))" "(dataset [])" "(dataset)" "(prn (->  (->> grp-jobs :funnel (q/->ts-dataset (:public-api-client svc-graph)))))" "(prn (->  (->> grp-jobs :funnel  q/->ts-dataset)))" "(ns-unmap 'affinity.skeleton.query '->ts-dataset)" "(prn (->  (->> grp-jobs :funnel ((fn [x] (q/query-ts-funnel (:public-api-client svc-graph) x {:name \"mp_lib\" :source :properties :type :string})))) q/->ts-dataset-funnel))" "(prn (->  (->> grp-jobs :funnel (q/query-ts-funnel (:public-api-client svc-graph))) q/->ts-dataset-funnel))" "(prn (->  (->> grp-jobs :retention ((fn [x] (q/query-ts-retention (:public-api-client svc-graph) x {:name \"mp_lib\" :source :properties :type :string})))) q/->ts-dataset-retention))" "(prn (-> (->> grp-jobs :retention (q/query-ts-retention (:public-api-client svc-graph))) q/->ts-dataset-retention))" "(prn (-> (->> grp-jobs :retention (q/query-ts-retention (:public-api-client svc-graph))) q/->ts-dataset-insights))" "(map (fn [x y] (+ x y)) a (range))" "(def a [1 2 3])" "(take 5 (range))" "zip" "(prn (-> (->> grp-jobs :insights ((fn [x] (q/query-ts-insights (:public-api-client svc-graph)
                                                      x
                                                      {:name \"mp_lib\" :source :properties :type :string}))))
               q/->ts-dataset-insights))" "(prn (-> (->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph))) q/->ts-dataset-insights))" "(-> (->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph))) q/->ts-dataset-insights)" "(for [a [1 2] b [3 4]] (prn a b))" "(->> grp-jobs :retention ((fn [x] (q/query-ts-retention (:public-api-client svc-graph) x {:name \"mp_lib\" :source :properties :type :string}))))" "(->> grp-jobs :retention (q/query-ts-retention (:public-api-client svc-graph)))" "(->> grp-jobs :funnel ((fn [x] (q/query-ts-funnel (:public-api-client svc-graph)
                                                  x
                                                  {:name \"mp_lib\" :source :properties :type :string}))))" "(->> grp-jobs :funnel (q/query-ts-funnel (:public-api-client svc-graph)))" "(->> grp-jobs :insights ((fn [x] (q/query-ts-insights (:public-api-client svc-graph) x {:name \"mp_lib\" :source :properties :type :string}))))" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph) {:name \"mp_lib\" :source :properties :type :string}))" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph)) {:name2 \"mp_lib\" :source :properties :type :string})" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph)) {:name \"mp_lib\" :source :properties :type :string})" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph)))" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph)) {:name \"$mp_lib\" :source :properties :type :string})" "(clojure.pprint/pprint (->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph))))" "(->> grp-jobs :insights (q/query-ts-insights (:public-api-client svc-graph)))" "(-> grp-jobs :insights q/query-ts-insights)" "(-> grp-jobs :insights query-ts-insights)" "(first grp-jobs)" "(def grp-jobs (map-vals (fn-> affinity.skeleton.anomaly-details/->grouped-jobs first) samples))" "(def grp-jobs (map-vals (fn-> affinity.skeleton.anomaly-details/->grouped-jobs first)) samples)" "(keys samples)" "(def samples (for-map [report-type [:insights :funnel :retention]] report-type (-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= report-type)) scored-anomaly-details) first)))" "(def samples (for [report-type [:insights :funnel :retention]] (-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= report-type)) scored-anomaly-details) first)))" "(-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= :segmentation)) scored-anomaly-details) first)" "(-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= :funnel)) scored-anomaly-details) first)" "(-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= :retention)) scored-anomaly-details) first)" "(-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= :insights)) scored-anomaly-details) first)" "(count samples)" "(def samples (for [report-type [:insights :segmentation :funnel :retention]] (-> (filter (fn-> affinity.skeleton.anomaly-details/anomaly-detail->plan-type (= report-type)) scored-anomaly-details) first)))" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first :grouped-jobs first) nil)" "(ns-unmap 'affinity.skeleton.query 'query-segmented-timeseries)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first :grouped-jobs first))" "(ns-unmap 'affinity.skeleton.query 'query-segmented-timeseries)" "(testfn 1 2)" "(testfn 1 2 3)" "(defn testfn [a b & c] (prn a b c))" "(def testfn [a b & c] (prn a b c))" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first :grouped-jobs first))" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first :grouped-jobs first) (-> tmp (get \"export csv\") first))" "(-> tmp (get \"export csv\") first)" "(def tmp ((:project-id->event->group-by-properties svc-graph) 3))" "(-> tmp (get \"export csv\") first)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first :grouped-jobs first) (-> tmp (get \"export csv\") first))" "(-> scored-anomaly-details first keys)" "(-> scored-anomaly-details keys)" "(first tmp)" "(def tmp ((:project-id->event->group-by-properties svc-graph) 3))" "(with-data tmp
        (view (incanter.charts/xy-plot (range (length ($ :original-ts))) :original-ts)))" "(first scored-anomaly-details)" "(first feedbacks)" "a" "(q/query-segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details (nth 0) :grouped-jobs first) nil)" "(q/query-segmented-timeseries (-> scored-anomaly-details (nth 0) :grouped-jobs first))" "(q/anomaly-detail-grouped-job->query-segmented-timeseries (-> scored-anomaly-details (nth 0) :grouped-jobs first))" "(with-data tmp
        (view (incanter.charts/xy-plot (range (length ($ :original-ts))) :original-ts)))" "(with-data tmp
        (incanter.charts/xy-plot (range (length ($ :original-ts))) :original-ts))" "(with-data tmp
        (incanter.core.chart/xy-plot (range (length ($ :original-ts))) :original-ts))" "(with-data tmp
        (xy-plot (range (length ($ :original-ts))) :original-ts))" "(with-data tmp
        ($ :original-ts) )" "(def tmp (q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 6) :grouped-jobs first)))" "(q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 6) :grouped-jobs first))" "(for [idx (range 20)] (letk [[[:queried-job timeseries {uncorrected-timeseries nil}]] (-> scored-anomaly-details (nth idx) :grouped-jobs first)]
                              (if uncorrected-timeseries
                                (prn idx))))" "(for [idx (range 20)] (letk [[[:queried-job timeseries {uncorrected-timeseries nil}]] (-> scored-anomaly-details (nth idx) :grouped-jobs first)]
                              (if-not uncorrected-timeseries
                                (prn idx))))" "(q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 5) :grouped-jobs first))" "(q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 4) :grouped-jobs first))" "(q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 3) :grouped-jobs first))" "(q/anomaly-detail-grouped-job->ts-dataset (-> scored-anomaly-details (nth 2) :grouped-jobs first))" "(require '[affinity.skeleton.query :as q])" "(-> scored-anomaly-details (nth 2) :grouped-jobs first)" "(-> scored-anomaly-details second :grouped-jobs first)" "(-> scored-anomaly-details first :grouped-jobs first)
" "(detect.modeler.forecaster/model-queried-job (-> scored-anomaly-details first :grouped-jobs first))
" "(-> scored-anomaly-details first :grouped-jobs first) 
" "(-> scored-anomaly-details keys) 
" "(-> scored-anomaly-details :grouped-jobs first) 
" "(detect.modeler.forecaster/model-queried-job (-> scored-anomaly-details :grouped-jobs first))
" "(anomaly.forecast/model-time-series {:timeseries (clojure.core.matrix/matrix (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries))})
" "(anomaly.forecast/model-time-series {:timeseries [1 2 3]})
" "(anomaly.forecast/model-time-series {:timeseries nil})
" "(clojure.core.matrix/matrix (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)) 
" "(anomaly.forecast/model-time-series {:timeseries (clojure.core.matrix/matrix (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries))})
" "(anomaly.forecast/model-time-series (clojure.core.matrix/matrix {:timeseries (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)}))
" "(anomaly.forecast/model-time-series {:timeseries (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)})
" "(clojure-version)" "?" "version" "help" "(anomaly.forecast/model-time-series {:timeseries (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)})
" "(require 'clojure.core.matrix.protocols)" "clojure.core.matrix.protocols" "(anomaly.forecast/model-time-series {:timeseries (-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)})
" "(-> scored-anomaly-details first :grouped-jobs (nth 0) :queried-job :timeseries)
" "(-> scored-anomaly-details first :grouped-jobs (nth 0))
" "(-> scored-anomaly-details first :grouped-jobs (nth 0) :timeseries)
" "(-> scored-anomaly-details first keys)
" "(first scored-anomaly-details)
" "(double (/ 1 92))" "(double (/ 1 79))" "(/ 1 79)" "tmp" "(def tmp (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 5) :grouped-jobs first) nil))" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "(for [x [1 2 3] y [4 5]] [x y])" "(for [x [1 2 3] y [4 5]] '(x y))" "(dataset [\"1\" \"2\"] [[2 3] [4 5]])" "(dataset [\"1\" \"2\"] [2 3])" "(dataset)" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "tmp" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "(ns-unmap 'affinity.skeleton.query '->segmented-ts-dataset)" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "(ns-unmap 'affinity.skeleton.query '->segmented-ts-dataset)" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "tmp" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "tmp" "(def tmp (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first) {:name \"mp_country_code\" :source :properties :type :string}))" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "tmp" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "(def tmp (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first) nil))" "(affinity.skeleton.query/->segmented-ts-dataset tmp)" "(def tmp (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first) nil))" "(ns-unmap 'affinity.skeleton.query '->segmented-ts-dataset)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first) nil)" "(ns-unmap 'affinity.skeleton.query 'query-segmented-timeseries)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first) nil)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (-> (nth scored-anomaly-details 7) :grouped-jobs first))" "(affinity.skeleton.query/query-segmented-timeseries (-> (nth scored-anomaly-details 7) :grouped-jobs first))" "(-> (nth scored-anomaly-details 7) :grouped-jobs first)" "(nth scored-anomaly-details 7)" "(nth scored-anomaly-details 5)" "(nth scored-anomaly-details 1)" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 1))" "(count a)" "a" "(def a (map (fn [anomaly-detail] (affinity.skeleton.query/anomaly-detail->plan-type anomaly-detail)) scored-anomaly-details))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 5))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 4))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 3))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 2))" "(nth scored-anomaly-details 2)" "(first a)" "(def a (filter (fn [anomaly-detail] (prn \"1\") (= :funnel (affinity.skeleton.query/anomaly-detail->plan-type anomaly-detail))) scored-anomaly-details))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 4))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 3))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 2))" "(affinity.skeleton.query/anomaly-detail->plan-type (nth scored-anomaly-details 7))" "(nth scored-anomaly-details 7)" "(nth scored-anomaly-details 6)" "(nth scored-anomaly-details 5)" "(nth scored-anomaly-details 4)" "(nth scored-anomaly-details 3)" "(nth scored-anomaly-details 2)" "(first a)" "(def a (filter (fn [anomaly-detail] (prn \"1\") (= :funnel (affinity.skeleton.query/anomaly-detail->plan-type anomaly-detail))) scored-anomaly-details))" "(first a)" "(def a (filter (fn [anomaly-detail] (= :funnel (affinity.skeleton.query/anomaly-detail->plan-type anomaly-detail))) scored-anomaly-details))" "((fn [anomaly-detail] (safe-get-in anomaly-detail [:grouped-jobs 0])) (first scored-anomaly-details))" "(second scored-anomaly-details)" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(second tmp)" "(first tmp)" "(def tmp ((safe-get svc-graph :project-id->event->group-by-properties) 3))" "(def tmp ((safe-get svc-graph :project-id->event->properties-datas) 3))" "(first tmp)" "(def tmp ((safe-get svc-graph :project-id->event->properties-datas) 3))" "(first tmp)" "(def tmp ((safe-get svc-graph :project-id->event->properties-datas) 3))" "(first tmp)" "(keys tmp)" "(def tmp ((safe-get svc-graph :project-id->event->properties-datas) 3))" "tmp" "(def tmp ((safe-get svc-graph :project-id->event->properties-datas) 3))" "tmp" "(def tmp (safe-get svc-graph :project-id->event->properties-datas))" "(def tmp (safe-get svc-graph :propject-id->event->properties-datas))" "tmp" "(def tmp (:propject-id->event->properties-datas svc-graph))" "tmp" "(def tmp (:propject-id->event->properties-datas svc-graph))" "(mp-client.appdb.custom-event/custom-event-infos (:appdb-client svc-graph) 231815)" "(affinity.skeleton.query/expand-event (:appdb-client svc-graph) \"$custom_event:231815\")" "(affinity.skeleton.query/expand-event (:appdb-client svc-graph) \"$custom_event:175795\")" "(mp-client.appdb.custom-event/custom-event-infos (:appdb-client svc-graph) 175797)" "(vec? [\"ae\" \"123\"])" "(seq? [\"ae\" \"123\"])" "(seq? \"ae\")" "(mp-client.appdb.custom-event/custom-event-infos (:appdb-client svc-graph) 175797)" "(mp-client.appdb.custom-event/custom-event-info (:appdb-client svc-graph) 175797)" "(-> (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"Account Type\" :source :properties :type :string})
          affinity.skeleton.query/->segmented-ts-dataset)" "(-> (affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"Account Type\" :source :properties :type :string})
          affinity.skeleton.query/segments->segmented-ts-dataset)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"Account Type\" :source :properties :type :string})" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(ns-unmap 'affinity.skeleton.query 'query-segmented-timeseries)" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(affinity.skeleton.query/query-segmented-timeseries-2 (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(ns-unmap 'affinity.skeleton.query 'query-segmented-timeseries)" "(ns-unmap 'affinity.skeleton.query #'affinity.skeleton.query/query-segmented-timeseries)" "(ns-unmap 'affinity.skeleton.query affinity.skeleton.query/query-segmented-timeseries)" "(ns-unmap affinity.skeleton.query 'affinity.skeleton.query/query-segmented-timeseries)" "(ns-unmap 'affinity.skeleton.query 'affinity.skeleton.query/query-segmented-timeseries)" "(ns-unmap #'affinity.skeleton.query 'affinity.skeleton.query/query-segmented-timeseries)" "(ns-unmap #'affinity.skeleton.query 'do-something)" "(affinity.skeleton.query/query-segmented-timeseries-2 (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(safe-get-in (first scored-anomaly-details) [:grouped-jobs 0])" "(first scored-anomaly-details)" "(safe-get-in (first scored-anomaly-details) [:grouped-jobs 0 :query :job-plan :plan :type])" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(safe-get-in b [:a 0])" "(safe-get-in b [:a 1])" "(safe-get b 1)" "(safe-get b :a)" "(def b {:a a})" "(safe-get a 1)" "(get a 1)" "(get a 0)" "(def a [1 2 3])" "(affinity.skeleton.query/query-segmented-timeseries (:public-api-client svc-graph) (first scored-anomaly-details) {:name \"$mp_lib\" :source :properties :type :string})" "(affinity.skeleton.query/query-segmented-timeseries(first scored-anomaly-details))" "(first scored-anomaly-details)" "seg" "(affinity.skeleton.query/segments->segmented-ts-dataset seg)" "seg" "seg2" "(prn (->> (map (fn [[k v]] (dataset [k] v)) data) (apply conj-cols)))" "(->> (map (fn [[k v]] (dataset [k] v)) data) (apply conj-cols))" "(map (fn [[k v]] (dataset [k] v)) data)" "(map (fn [[k v]] (dataset k v)) data)" "(prn (apply conj-cols (vals data)))" "(type (apply conj-cols (vals data)))" "(type (apply bind-columns (vals data)))" "(prn (apply bind-columns (vals data)))" "(to-dataset [(range 10) (range 10)])" "(to-dataset [(range 10) (range 10)] :transpose true)" "(prn (to-dataset (vals data) :transpose true))" "  (to-dataset (range 10) :transpose true)" "(to-dataset (range 10))" "(prn (to-dataset (vals data)  :transpose true))" "(prn (to-dataset (vals data)) :transpose true)" "(prn (to-dataset (vals data)))" "(to-dataset (vals data))" "(vals data)" "(dataset (keys data) (vals data))" "(dataset (vals data))" "(def data (map-vals (fn [col] (map (fn [idx](safe-get col idx)) row-idx)) seg2))" "(map-vals (fn [col] (map (fn [idx](safe-get col idx)) row-idx)) seg2)" "(map-vals seg2 (fn [col] (map (fn [idx](safe-get col idx)) row-idx)))" "(map-vals seg2 (fn [col] (map (safe-get col row-idx) row-idx)))" "(def row-idx (->> seg2 first val keys sort))" "(->> seg2 first val keys sort)" "(->> seg2 first val keys)" "(->> seg2 (map-vals count))" "(prn a)" "(def a (to-dataset [{:a 1, :b 2, :c 3} {:a 4, :b 5, :c 6}] :transpose true))" "(prn a)" "(def a (to-dataset [{:a 1, :b 2, :c 3} {:a 4, :b 5, :c 6}]))" "(prn a)" "(def a (to-dataset {:a 1, :b 2, :c 3}))" "(prn a)" "(view a)" "(def a (to-dataset {:a 1, :b 2, :c 3} :transpose true))" "(to-dataset {:a 1, :b 2, :c 3} :transpose true)" "(trans (to-dataset {:a 1, :b 2, :c 3}))" "(to-dataset {:a 1, :b 2, :c 3})" "(dataset seg2)" "(to-dataset seg2)" "(def seg2 (-> (get seg \"series\") vals first))" "(-> (get seg \"series\") vals first)" "(to-dataset (vec (-> (get seg \"series\") vals first)))" "(to-dataset (vec (-> (get seg \"series\") vals first)) :tranpose true)" "(to-dataset (-> (get seg \"series\") vals first) :tranpose true)" "(to-dataset (-> (get seg \"series\") vals first) true)" "(-> (get seg \"series\") vals first)" "(to-dataset (-> (get seg \"series\") vals first))" "(get seg \"series\") " "(to-dataset (get seg \"series\"))" "(keys seg)" "(to-dataset seg)" "(use '(incanter core datasets)
     '[plumbing.core :rename {sum p-sum}])" "(def seg (affinity.skeleton.query/anomaly->segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first) {:name \"Account Type\" :type :string :source :properties}))" "(affinity.skeleton.query/anomaly->segmented-timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first) {:name \"Account Type\" :type :string :source :properties})" "(affinity.skeleton.query/anomaly->timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first) {:name \"Account Type\" :type :string :source :properties})" "(affinity.skeleton.query/anomaly->timeseries (:public-api-client svc-graph) (-> scored-anomaly-details first))" "(-> scored-anomaly-details first)" "(def alert-id->feedback (gcp.bucket.core/get (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->user-feedback\"))
(def alert-id->sh-noti (gcp.bucket.core/get (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\"))

(def anomaly-ids (->> alert-id->sh-noti
                      vals
                      (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id))))))
                      (apply concat)
                      distinct))
(def scored-anomaly-details
  (->> (map (fn [anomaly-id]
              (try (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)
                   (catch Exception e (prn (format \"caught exception for %s: %s\" anomaly-id (.getMessage e))))))
            anomaly-ids)
       (filter not-empty)))" "(-> scored-anomaly-details
          first
          affinity.skeleton.query/anomaly->insights-query)" "(mp-client.appdb.custom-event/custom-event-info-1 (:appdb-client svc-graph) 23)" "(-> scored-anomaly-details
          first
          affinity.skeleton.query/anomaly->insights-query)" "(let [[x y] [1 2]] x)" "(letk [[x y] [1 2]] x)" "(letk [[x] [1]] x)" "(-> scored-anomaly-details
          first
          affinity.skeleton.query/anomaly->insights-query)" "(-> scored-anomaly-details
          first
          )" "(-> scored-anomaly-details
          first
          affinity.skeleton.query/anomaly->insights-query)" "(first scored-anomaly-details)" "(def tmp ((:project-id->properties svc-graph) 3))" "(keys tmp)" "(def tmp ((:project-id->properties svc-graph) 3))" "(keys affinity.skeleton.service/resources)" "(-> tmp first)" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(-> tmp first)" "(-> tmp keys)" "tmp" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "tmp" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(-> tmp first keys)" "(-> tmp first type)" "(-> tmp first val first)" "(-> tmp type)" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(-> tmp first val first)" "(-> tmp first key)" "(-> tmp type)" "(first tmp)" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(first tmp)" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(first tmp)" "(def tmp (affinity.skeleton.service/project-id->properties 3))" "(affinity.skeleton.service/project-id->properties 3)" "(first tmp)" "(def tmp (gcp.bucket.core/keys (:properties-bucket svc-graph)))" "(affinity.skeleton.service/project-id->properties 3)" "affinity.skeleton.service/project-id->properties" "(:project-id->properties affinity.skeleton.service/resources)" "(:project-id->properties svc-graph)" "svc-graph" "resources" "affinity.skeleton.query/jql-body--anomaly-feedback" "(count scored-anomaly-details)" "(def scored-anomaly-details (filter not-empty scored-anomaly-details))" "(not-empty {:a 2})" "(not-empty [1])" "(not-empty 1)" "(not-empty nil)" "(filter not-empty scored-anomaly-details)" "sum2" "(use '[plumbing.core :rename {sum sum2}])" "(use '[plumbing.core :rename '{sum sum2}])" "(use '[plumbing.core]  :rename '{sum sum2})" "(count scored-anomaly-details)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat) distinct))
(def scored-anomaly-details (map (fn [anomaly-id] (try(gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id) (catch Exception e (prn (format \"caught exception for %s: %s\" anomaly-id (.getMessage e)))))) anomaly-ids))" "(count scored-anomaly-details)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat) distinct))
(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(use '[plumbing.core :rename '[sum :as sum2]] )" "(use '[plumbing.core]  :rename '[sum :as sum2])" "(use '[plumbing.core]  :exclude '[sum])" "(use '[plumbing.core :exclude '[sum]])" "(use 'plumbing.core :exclude '[sum])" "(use 'plumbing.core :exclude ['sum])" "(use 'plumbing.core :exclude [sum])" "(use 'plumbing.core)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat) distinct))
(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(use '(incanter core datasets)
     'plumbing.core)" "(count scored-anomaly-details)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat) distinct))
(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(def alert-id->feedback (gcp.bucket.core/get (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->user-feedback\"))" "(count alert-id->sh-noti)" "(def alert-id->sh-noti (gcp.bucket.core/get (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\"))" "(def anomaly-details (gcp.bucket.core/get (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\"))" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat) distinct))
(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))
(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\" scored-anomaly-details) nil)

(count anomaly-ids)" "(first tmp)" "(def tmp (gcp.bucket.core/get (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\"))" "(def tmp (gcp.bucket.core/get (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\" scored-anomaly-details))" "(first scored-anomaly-details)" "(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\" scored-anomaly-details) nil)" "(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\" scored-anomaly-details) nil)" "(gcp.bucket.core/put (:rnd-bucket svc-graph) \"20171122_scored-anomaly-details\" scored-anomaly-details)" "
\"" "
                           

" "(first scored-anomaly-details)" "(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(first scored-anomaly-details)" "(def scored-anomaly-details (map (fn [anomaly-id] (gcp.bucket.core/get (:anomaly-details-bucket svc-graph) anomaly-id)) anomaly-ids))" "(-> anomaly-ids distinct count)" "(count anomaly-ids)" "(first anomaly-ids)" "(nth anomaly-ids 3)" "(second anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) (apply concat)))" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id))))))))" "(second anomaly-ids)" "(nth anomaly-ids 3)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id))) (apply concat)))) (apply concat)))" "(nth anomaly-ids 3)" "(second anomaly-ids)" "(first anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id))) concat))) concat))" "(nth anomaly-ids 3)" "(second anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) concat))" "(second anomaly-ids)" "(first anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id))))))))" "(first anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id))))) concat) concat))" "(second anomaly-ids)" "(first anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :alert) :anomaly :anomaly :anomaly-id)))))) concat))" "(second anomaly-ids)" "(first anomaly-ids)" "(count anomaly-ids)" "(def anomaly-ids (->> alert-id->sh-noti vals (map (fn [noti] (->> noti :alert-contents (map (fn [alert-content] (-> (safe-get alert-content :anomaly) :anomaly :anomaly :anomaly-id)))))) concat))" "(get alert-id->sh-noti \"a7a866f2-86e7-4ee9-a987-f176595e5e2e\")" "(second alert-id->sh-noti)" "(get alert-id->sh-noti \"a7a866f2-86e7-4ee9-a987-f176595e5e2e\")" "(->> alert-id->sh-noti (map-vals (fn [noti] (-> noti :alert-contents count)))
           (filter (fn [x] (> (val x) 1))))" "()" "(second alert-id->sh-noti)" "(first alert-id->sh-noti)" "(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->user-feedback\" alert-id->feedback) nil)" "(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\" alert-id->sh-noti) nil)" "(doall (gcp.bucket.core/put (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\" alert-id->sh-noti))" "(gcp.bucket.core/put (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\" alert-id->sh-noti)" "(put (:rnd-bucket svc-graph) \"alert-id->stuff/alert-id->smarthub-notification\" alert-id->sh-noti)" "(gcp.bucket.core/put (:rnd-bucket svc-graph) \"test1/test2\" [1 2 3])" "(put (:rnd-bucket svc-graph) \"test1/test2\" [1 2 3])" "(second alert-id->sh-noti)" "(first alert-id->sh-noti)" "(def alert-id->sh-noti (->> (map (fn [alert-id] [alert-id (gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph) alert-id)]) (keys alert-id->feedback))
                                  (into {})))" "(def alert-id->sh-noti (->> (map (fn [alert-id] [alert-id (gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph))]) (keys alert-id->feedback))
                                  (into {})))" "(def alert-id->sh-noti (->> (map (fn [alert-id] [alert-id (gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph) (keys alert-id->feedback))]))
                                  (into {})))" "(def alert-id->sh-noti (->> (map (fn [alert-id] [alert-id (gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph) alert-id)]))
                                  (into {})))" "(first alert-id->feedback)" "(def alert-id->feedback (->> alert-id-grp (map-vals first)))" "(->> alert-id-grp (map-vals count) (filter (fn [x] (> (val x) 1))))" "(def alert-id-grp (group-by (fn [feedback] (safe-get-in feedback [\"properties\" \"alert_id\"])) feedbacks))" "(-> alert-ids distinct count)" "(first (gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph)))" "(count alert-ids)" "(def alert-ids (map (fn [feedback] (safe-get-in feedback [\"properties\" \"alert_id\"])) feedbacks))" "(def alert-ids (map (fn [feedback] (safe-get-in feedback [\"properties\" \"alert_id\"]))) feedbacks)" "(count alert-ids)" "(def alert-ids (map (fn [feedback] (safe-get-in feedback [\"properties\" \"alert_id\"]))))" "(use 'plumbing.core)" "(use plumbing.core)" "(first feedbacks)" "(count feedbacks)" "(def feedbacks (q/anomaly-feedback (:public-api-client svc-graph) \"2017-10-01\" \"2017-11-20\"))" "(require '[affinity.skeleton.query :as q])" "(def feedbacks (q/anomaly-feedback (:public-api-client svc-graph) \"2017-10-01\" \"2017-11-20\"))" "(import '[com.google.cloud ReflectionHacks2])" "(import '[com.google.cloud ReflectionHacks])" "(import '[com.google.cloud ReflectionHacks2])" "(.setProjectId snb \"test\")" "(.projectId snb \"test\")" "snb" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      ))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      (.projectId \"test\")
                      .build))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      (.ProjectId \"test\")
                      .build))" "(.getNamespace snb)" "(.getDefaultProject snb)" "snb" "(.getDefaultNamespace snb)" "(.getDefaultProject snb)" "snb" "(.getDefaultProjectId snb)" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build))" "(.getDefaultProjectId snb)" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      
                      ))" "(.getDefaultProjectId snb)" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(.getProjectId snb)" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      ))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      (.setProjectId \"test\")))" "snb" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      .getProjectId))" "(-> (DatastoreOptions/newBuilder)
          
          (.setProjectId \"mixpanel-prod-1\"))" "(-> (DatastoreOptions/newBuilder)
          )" "(import [com.google.cloud.datastore DatastoreOptions])" "(-> (DatastoreOptions/newBuilder)
          )" "(-> (DatastoreOptions/newBuilder)
          (.setNamespace \"smart-hub-prod\")
          (.setProjectId \"mixpanel-prod-1\"))" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(-> (DatastoreOptions/newBuilder)
          (.setNamespace \"smart-hub-prod\")
          (.setProjectId \"mixpanel-prod-1\"))" "(-> (DatastoreOptions/newBuilder)
          #_(.setNamespace \"smart-hub-prod\"))" "(-> (DatastoreOptions/newBuilder)
          (.setNamespace \"smart-hub-prod\"))" "(def snb    (-> (doto (DatastoreOptions/newBuilder)
                        (.setNamespace \"smart-hub-prod\")
                        )
                      .build
                      (.setProjectId \"mixpanel-prod-1\")
                      ))" "(def snb    (-> (doto (DatastoreOptions/newBuilder)
                        (.setNamespace \"smart-hub-prod\")
                        (.setProjectId \"mixpanel-prod-1\"))
                      .build
                      ))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      (.setProjectId \"mixpanel-prod-1\")
                      .build
                      ))" "
                      .build
                      ))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      (.setProjectId \"mixpanel-prod-1\")
                      .build
                      ))" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      ))" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(.getProjectId snb)" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      ))" "(import [com.google.cloud.datastore DatastoreOptions])" "(.getProjectId snb)" "snb" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      ))" "(.getProjectId snb)" "snb" "(def snb    (-> (DatastoreOptions/newBuilder)
                      (.setNamespace \"smart-hub-prod\")
                      .build
                      .getService))" "(def snb    (-> (DatastoreOptions/newBuilder)
       (.setNamespace namespace)
       .build
       .getService))" "(DatastoreOptions/newBuilder)" "(.getNamespace (DatastoreOptions/newBuilder))" "(.getProjectId (DatastoreOptions/newBuilder))" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(.getProjectId (DatastoreOptions/newBuilder))" "(-> (DatastoreOptions/newBuilder)
          .getProjectId)" "(import [com.google.cloud.datastore DatastoreOptions])" "(import [com.google.clound.datastore DatastoreOptions])" "(import '[com.google.datastore DatastoreOptions])" "(import [com.google.datastore DatastoreOptions])" "(def snb (:smarthub-notifications-bucket svc-graph))" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph))" "(gcp.bucket.core/get (:smarthub-notifications-bucket svc-graph) \"Qwe\")" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(:smarthub-notifications-bucket svc-graph)" "(gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph))" "(first (gcp.bucket.core/keys (:smarthub-notifications-bucket svc-graph)))" "(with-data (doto ($rollup :count :count [:report_type :is_useful] ds-feedback)
                   prn)
        (view (bar-chart :report_type :count :group-by :is_useful)))" "(with-data ($rollup :count :count [:report_type :is_useful] ds-feedback)
        (view (bar-chart :report_type :count :group-by :is_useful))
        (prn))" "(prn ($rollup :count :count [:report_type :is_useful] ds-feedback))" "(pprint ($rollup :count :count [:report_type :is_useful] ds-feedback))" "(clojure.pprint.print-table ($rollup :count :count [:report_type :is_useful] ds-feedback))" "($rollup :count :count [:report_type :is_useful] ds-feedback)" "(summary ds-feedback)" "(with-data ($order :report_type :incr ($rollup :count :count [:report_type :is_useful] ds-feedback))
        (view (bar-chart :report_type :count :group-by :is_useful)))" "(with-data ($order :report_type :incr ($rollup :count :count [:report_type :is_useful] ds-feedback)
                         (view (bar-chart :report_type :count :group-by :is_useful :legend true))))" "(with-data ($order :report_type :incr ($rollup :count :count [:report_type :is_useful] ds-feedback)
                         (view (bar-chart :report_type :group-by :is_useful :legend true))))" "(with-data ($order :report_type :incr ($rollup :count :count [:report_type :is_useful] ds-feedback))
        (view (bar-chart :report_type :group-by :is_useful :legend true)))" "($order :report_type :incr ($rollup :count :count [:report_type :is_useful] ds-feedback))" "($rollup :count :count [:report_type :is_useful] ds-feedback)" "($rollup :count :count (fn [row] [(:report_type row) (:is_useful row)]) ds-feedback)" "($rollup :count :report_type-2 :report_type ds-feedback)" "($rollup :count :report_type :report_type-2 ds-feedback)" "($rollup :count :report_type :report_type ds-feedback)" "(count ($ :report_type ds-feedback))" "($ :report_type ds-feedback)" "($rollup :count :report_type ds-feedback)" "($rollup count :report_type ds-feedback)" "ds-feedback" "($rollup count :report-type ds-feedback)" "(with-data ds-feedback
        (view (bar-chart :group-by :report-type)))" "(with-data ds-feedback
        (bar-chart))" "(def ds-feedback (to-dataset (->> feedbacks
                                       (map (fn [feedback] (select-keys (get feedback \"properties\") [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\" \"grouped_alert_id\"]))))))" "(to-dataset (take 5 feedbacks))" "ds-feedback" "(def ds-feedback (to-dataset (->> feedbacks
                                       (map (fn [feedback] (select-keys (get feedback \"properties\") [\"alert_type\" \"report_type\" \"alert_id\" \"is_useful\"]))))))" "(to-dataset (take 5 feedbacks))" "(first feedbacks)" "(count feedbacks)" "(view (get-dataset :iris))" "(get-dataset :iris)" "sd" "mean" "(type (get-dataset :cars))" "(get-dataset :cars)" "(use '(incanter core datasets))" "$" "(view (histogram (sample-normal 1000)))" "(use '(incanter core stats charts io))" "(view (histogram (sample-normal 1000)))" "(i/view (p/histogram (s/sample-normal 1000)))" "(require '[incanter.core :as i]
            '[incanter.stats :as s]
            '[incanter.charts :as p])" "(i/view (p/histogram (s/sample-normal 1000)))" "(view (histogram (sample-normal 1000)))" "(use '(incanter core stats charts))" "(def feedbacks (q/anomaly-feedback (:public-api-client svc-graph) \"2017-10-01\" \"2017-11-20\"))" "(q/anomaly-feedback (:public-api-client svc-graph) \"2017-10-01\" \"2017-11-20\")" "(require '[affinity.skeleton.query :as q])" "(mp-client.public/events {:public-api-client (:public-api-client svc-graph) :event [\"Viewed report\"] :project-id 3 :interval 7})" "(mp-client.public/events {:public-api-client (:public-api-client svc-graph) :event [\"Viewed report\"] :project-id 3})" "(mp-client.public/events {:public-api-client (:public-api-client svc-graph) :event [\"Viewed report\"] :project-id} 3)" "(mp-client.public/events (assoc svc-graph :event [\"Viewed report\"] :project-id 3))" "(mp-client.public/events (assoc svc-graph :events [\"Viewed report\"] :project-id 3))" "(mp-client.appdb/project-details (:appdb-client svc-graph) 10)" "(mp-client.appdb/project-details (:appdb-client svc-graph) 3)" "(mp-client.appdb/project-details (mp-client.appdb/dev-client) 4)" "(mp-client.appdb/project-details (mp-client.appdb/dev-client) 3)" "(mp-client.appdb/project-details mp-client.appdb/dev-client 3)" "(mp-client.appdb/appdb-spec (atom @(core.config/dev-config)))" "(type @(core.config/dev-config))" "(type (core.config/dev-config))" "(mp-client.appdb/appdb-spec (atom (core.config/dev-config)))" "    (mp-client.appdb/appdb-spec (atom (mp-client.appdb/dev-client)))" "(core.config/dev-config)" "core.config/dev-config" "(mp-client.appdb/dev-client)" "mp-client.appdb/dev-client" "(mp-client.appdb/appdb-spec (atom {:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only false}]}}}))" "(core.config/repo-appdb-subname {:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only false}]}}})" "(core.config/repo-appdb-subname-2 {:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only true}]}}})" "(core.config/repo-appdb-subname {:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only true}]}}})" "{:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only true}]}}}" "(core.config/repo-appdb-subname )" "(core.config/repo-appdb-subname {:env :dev :appdb {:dev {:servers [{:host \"localhost\" :addresses {:internal \"localhost\"} :read_only true}]}}})" "(core.config/repo-appdb-subname {:env :dev :appdb {:dev {:servers [{:host \"localhost\"}]}}})" "(core.config/repo-appdb-subname {:env :dev :appdb {:dev :servers [{:host \"localhost\"}]}})" "(core.config/repo-appdb-subname {:env :dev :appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}})" "(core.config/repo-appdb-subname @(atom {:env :dev :appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}}))" "(core.secrets/appdb (atom {:env :dev :appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}}))" "(mp-client.appdb/appdb-spec (atom {:env :dev :appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}}))" "(core.secrets/appdb (atom {:env :dev :appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}}))" "(var not-empty)" "(not-empty (core.secrets/read-secret :appdb))" "(core.secrets/read-secret :appdb)" "(or (not-empty (core.secrets/read-secret :appdb))
                               (and config (get (sl-devbox-secrets (:env @config)) secret-name)))" "(core.secrets/appdb (atom {:appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password \"test\"}}))" "(core.secrets/appdb (atom {:appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password nil}}))" "(core.secrets/appdb (atom {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password nil}))" "(core.secrets/appdb {:mysql-db \"localhost\" :mysql-user \"root\" :mysql-password nil})" "(core.secrets/appdb)" "(g {:statsd nil})" "(g {})" "(g)" "g" "(def g (plumbing.graph/eager-compile affinity.skeleton.service/service-graph))" "(g)" "g" "(def g (plumbing.graph/compile affinity.skeleton.service/service-graph))" "(def g (plumbing.graph/compile affinity.skeleton.service service-graph))" "(core.config/config)" "core.config/config" "mp-client.public/client" "(gcp.bucket.core/get affinity.skeleton.service/anomaly-details-bucket \"0000057d-71ce-4b42-89e2-e92d8a7c9eac\")" "(-> (gcp.bucket.core/value affinity.skeleton.service/anomaly-details-bucket) first)" "(-> (gcp.bucket.core/values affinity.skeleton.service/anomaly-details-bucket) first)" "(-> (gcp.bucket.core/keys affinity.skeleton.service/anomaly-details-bucket) first)" "(-> (keys affinity.skeleton.service/anomaly-details-bucket) first)" "affinity.skeleton.service/sma-bucket" "(-> (keys affinity.skeleton.service/sma-bucket) first)" "(clojure.pprint/pprint (do (def a 1) a))" "(do (def a 1) a)" "(all-ns)" "all-ns" "@(resolve '*out*)" "(resolve '*out*)" "(macroexpand-1 '(cider.nrepl.middleware.out/with-out-binding [a b c] d))" "(macroexpand-1 '(cider.nrepl.middleware.out/with-out-binding [\"a\" \"b\" \"c\"]))" "(macroexpand-1 '(cider.nrepl.middleware.out/with-out-binding [\"a\" \"b\" \"c\"] (comment \"test\")))" "(macroexpand-1 '(cider.nrepl.middleware.out/with-out-binding [\"a\" \"b\" \"c\"] \"d\"))" "qwe")